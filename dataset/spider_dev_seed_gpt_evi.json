[
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "How many singers do we have?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of singers can be obtained by counting the rows in the 'singer' table using COUNT(Singer_ID)."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "What is the total number of singers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "singers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of singers refers to COUNT(Singer_ID) in the singer table."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "question_toks": [
      "Show",
      "name",
      ",",
      "country",
      ",",
      "age",
      "for",
      "all",
      "singers",
      "ordered",
      "by",
      "age",
      "from",
      "the",
      "oldest",
      "to",
      "the",
      "youngest",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to singer.Name; country refers to singer.Country; age refers to singer.Age; ordered by age from the oldest to the youngest refers to ORDER BY singer.Age DESC;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "countries",
      ",",
      "and",
      "ages",
      "for",
      "every",
      "singer",
      "in",
      "descending",
      "order",
      "of",
      "age",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names, countries, and ages refer to singer.Name, singer.Country, and singer.Age; descending order of age refers to ORDER BY singer.Age DESC."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      "WHERE",
      "country",
      "=",
      "'France",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "What is the average, minimum, and maximum age of all singers from France?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "of",
      "all",
      "singers",
      "from",
      "France",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "France is a country; the average, minimum, and maximum age correspond to the aggregate functions AVG, MIN, and MAX applied to singer.Age."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      "WHERE",
      "country",
      "=",
      "'France",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "What is the average, minimum, and maximum age for all French singers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "for",
      "all",
      "French",
      "singers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "French singers mean that singer.Country = 'France'; The average, minimum, and maximum are calculated on singer.Age."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks": [
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question": "Show the name and the release year of the song by the youngest singer.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "the",
      "release",
      "year",
      "of",
      "the",
      "song",
      "by",
      "the",
      "youngest",
      "singer",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The youngest singer refers to MIN(singer.Age); the name of the song refers to singer.Song_Name; the release year of the song refers to singer.Song_release_year;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks": [
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "release",
      "years",
      "for",
      "all",
      "the",
      "songs",
      "of",
      "the",
      "youngest",
      "singer",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "youngest singer refers to MIN(singer.Age); names and release years of songs refer to singer.Song_Name and singer.Song_release_year;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "What are all distinct countries where singers above age 20 are from?",
    "question_toks": [
      "What",
      "are",
      "all",
      "distinct",
      "countries",
      "where",
      "singers",
      "above",
      "age",
      "20",
      "are",
      "from",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct countries refer to DISTINCT singer.Country; singers above age 20 refer to singer.Age > 20;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "What are  the different countries with singers above age 20?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "countries",
      "with",
      "singers",
      "above",
      "age",
      "20",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Retrieve distinct values from `singer`.`Country` where `singer`.`Age` > 20."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "query_toks": [
      "SELECT",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "country"
    ],
    "question": "Show all countries and the number of singers in each country.",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "country",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'countries' refers to `singer`.`Country`; 'number of singers' refers to counting `singer`.`Singer_ID`"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "query_toks": [
      "SELECT",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "country"
    ],
    "question": "How many singers are from each country?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Singers' refers to the 'singer' table; 'from each country' refers to grouping by 'singer.Country'; 'How many' indicates counting the number of singers using 'COUNT(Singer_ID)'"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "query_toks": [
      "SELECT",
      "song_name",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "singer",
      ")"
    ],
    "question": "List all song names by singers above the average age.",
    "question_toks": [
      "List",
      "all",
      "song",
      "names",
      "by",
      "singers",
      "above",
      "the",
      "average",
      "age",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Above the average age refers to singer.Age > AVG(singer.Age); list all song names refers to singer.Song_Name;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "query_toks": [
      "SELECT",
      "song_name",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "singer",
      ")"
    ],
    "question": "What are all the song names by singers who are older than average?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "song",
      "names",
      "by",
      "singers",
      "who",
      "are",
      "older",
      "than",
      "average",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "singer.Age > AVG(singer.Age); output singer.Song_Name;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks": [
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "question_toks": [
      "Show",
      "location",
      "and",
      "name",
      "for",
      "all",
      "stadiums",
      "with",
      "a",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "location refers to stadium.Location; name refers to stadium.Name; capacity between 5000 and 10000 refers to stadium.Capacity BETWEEN 5000 AND 10000;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks": [
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "locations",
      "and",
      "names",
      "of",
      "all",
      "stations",
      "with",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "locations refers to stadium.Location; names refers to stadium.Name; capacity between 5000 and 10000 refers to stadium.Capacity BETWEEN 5000 AND 10000;"
  },
  {
    "db_id": "concert_singer",
    "query": "select max(capacity), average from stadium",
    "query_toks": [
      "select",
      "max",
      "(",
      "capacity",
      ")",
      ",",
      "average",
      "from",
      "stadium"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "capacity",
      ")",
      ",",
      "average",
      "from",
      "stadium"
    ],
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "capacity",
      "and",
      "the",
      "average",
      "of",
      "all",
      "stadiums",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum capacity refers to MAX(stadium.Capacity); average of all stadiums refers to AVG(stadium.Average);"
  },
  {
    "db_id": "concert_singer",
    "query": "select avg(capacity) ,  max(capacity) from stadium",
    "query_toks": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question": "What is the average and maximum capacities for all stadiums ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "capacities",
      "for",
      "all",
      "stadiums",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average capacities refer to AVG(stadium.Capacity); maximum capacities refer to MAX(stadium.Capacity); all stadiums refer to the stadium table."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name refers to stadium.Name; Capacity refers to stadium.Capacity; highest average attendance refers to MAX(stadium.Average);"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "for",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The name of the stadium refers to stadium.Name; the capacity of the stadium refers to stadium.Capacity; the highest average attendance refers to MAX(stadium.Average);"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      "OR",
      "YEAR",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "How many concerts are there in year 2014 or 2015?",
    "question_toks": [
      "How",
      "many",
      "concerts",
      "are",
      "there",
      "in",
      "year",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "concerts refers to the `concert` table; year 2014 or 2015 refers to the condition `concert.Year = '2014' OR concert.Year = '2015'`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      "OR",
      "YEAR",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "How many concerts occurred in 2014 or 2015?",
    "question_toks": [
      "How",
      "many",
      "concerts",
      "occurred",
      "in",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Year` refers to `concert.Year`; occurred in 2014 or 2015 refers to `concert.Year = '2014' OR concert.Year = '2015'`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "GROUP",
      "BY",
      "T1.stadium_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "group",
      "by",
      "t1",
      ".",
      "stadium_id"
    ],
    "question": "Show the stadium name and the number of concerts in each stadium.",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "name",
      "and",
      "the",
      "number",
      "of",
      "concerts",
      "in",
      "each",
      "stadium",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Stadium name refers to stadium.Name; number of concerts in each stadium refers to COUNT(concert.concert_ID) grouped by stadium.Name; join concert and stadium on concert.Stadium_ID = stadium.Stadium_ID."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "GROUP",
      "BY",
      "T1.stadium_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "group",
      "by",
      "t1",
      ".",
      "stadium_id"
    ],
    "question": "For each stadium, how many concerts play there?",
    "question_toks": [
      "For",
      "each",
      "stadium",
      ",",
      "how",
      "many",
      "concerts",
      "play",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "For each stadium refers to GROUP BY `stadium`.`Stadium_ID`; how many concerts refers to COUNT(`concert`.`concert_ID`); the relationship between stadium and concert is established via `concert`.`Stadium_ID` = `stadium`.`Stadium_ID`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.capacity",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      ">",
      "=",
      "2014",
      "GROUP",
      "BY",
      "T2.stadium_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      ">",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "name",
      "and",
      "capacity",
      "with",
      "most",
      "number",
      "of",
      "concerts",
      "in",
      "year",
      "2014",
      "or",
      "after",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          5,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Stadium name and capacity refer to `stadium`.`Name` and `stadium`.`Capacity`; most number of concerts refers to MAX(COUNT(`concert`.`concert_ID`)); year 2014 or after refers to `concert`.`Year` >= '2014'."
  },
  {
    "db_id": "concert_singer",
    "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
    "query_toks": [
      "select",
      "t2.name",
      ",",
      "t2.capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1.stadium_id",
      "=",
      "t2.stadium_id",
      "where",
      "t1.year",
      ">",
      "2013",
      "group",
      "by",
      "t2.stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      ">",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capacity",
      "of",
      "the",
      "stadium",
      "with",
      "the",
      "most",
      "concerts",
      "after",
      "2013",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name and capacity of the stadium refer to `stadium`.`Name` and `stadium`.`Capacity`; most concerts refer to MAX(COUNT(`concert`.`concert_ID`)); after 2013 refers to `concert`.`Year` > 2013; join `concert` and `stadium` on `concert`.`Stadium_ID` = `stadium`.`Stadium_ID`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "concert",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "concert",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which year has most number of concerts?",
    "question_toks": [
      "Which",
      "year",
      "has",
      "most",
      "number",
      "of",
      "concerts",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Year refers to concert.Year; most number of concerts refers to MAX(COUNT(concert.concert_ID)) grouped by concert.Year;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "concert",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "concert",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the year that had the most concerts?",
    "question_toks": [
      "What",
      "is",
      "the",
      "year",
      "that",
      "had",
      "the",
      "most",
      "concerts",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Year refers to concert.Year; most concerts refers to MAX(COUNT(concert_ID))"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "stadium_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "stadium_id",
      "FROM",
      "concert",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "where",
      "stadium_id",
      "not",
      "in",
      "(",
      "select",
      "stadium_id",
      "from",
      "concert",
      ")"
    ],
    "question": "Show the stadium names without any concert.",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "names",
      "without",
      "any",
      "concert",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      18,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "stadium names refer to `stadium`.`Name`; without any concert refers to `stadium`.`Stadium_ID` NOT IN `concert`.`Stadium_ID`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "stadium_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "stadium_id",
      "FROM",
      "concert",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "where",
      "stadium_id",
      "not",
      "in",
      "(",
      "select",
      "stadium_id",
      "from",
      "concert",
      ")"
    ],
    "question": "What are the names of the stadiums without any concerts?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "stadiums",
      "without",
      "any",
      "concerts",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      18,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of the stadiums refer to stadium.Name; without any concerts refers to stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert);"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "40",
      "INTERSECT",
      "SELECT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      "<",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value",
      "intersect",
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      "<",
      "value"
    ],
    "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "question_toks": [
      "Show",
      "countries",
      "where",
      "a",
      "singer",
      "above",
      "age",
      "40",
      "and",
      "a",
      "singer",
      "below",
      "30",
      "are",
      "from",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          40.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            4,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            30.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "singer.Age > 40 refers to singers above age 40; singer.Age < 30 refers to singers below age 30; singer.Country refers to the countries of the singers."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "question_toks": [
      "Show",
      "names",
      "for",
      "all",
      "stadiums",
      "except",
      "for",
      "stadiums",
      "having",
      "a",
      "concert",
      "in",
      "year",
      "2014",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "names for all stadiums refers to stadium.Name; except for stadiums having a concert in year 2014 refers to excluding stadiums where concert.Year = '2014' by joining stadium and concert on stadium.Stadium_ID = concert.Stadium_ID."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "stadiums",
      "that",
      "did",
      "not",
      "have",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "names of all stadiums refer to `stadium`.`Name`; did not have a concert in 2014 refers to excluding `stadium`.`Stadium_ID` where `concert`.`Year = '2014'`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "query_toks": [
      "SELECT",
      "T2.concert_name",
      ",",
      "T2.theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "concert",
      "AS",
      "T2",
      "ON",
      "T1.concert_id",
      "=",
      "T2.concert_id",
      "GROUP",
      "BY",
      "T2.concert_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "concert_name",
      ",",
      "t2",
      ".",
      "theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t2",
      ".",
      "concert_id",
      "group",
      "by",
      "t2",
      ".",
      "concert_id"
    ],
    "question": "Show the name and theme for all concerts and the number of singers in each concert.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "theme",
      "for",
      "all",
      "concerts",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "concert",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the concert refers to concert.concert_Name; Theme of the concert refers to concert.Theme; Number of singers in each concert refers to COUNT(singer_in_concert.Singer_ID) grouped by singer_in_concert.concert_ID"
  },
  {
    "db_id": "concert_singer",
    "query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
    "query_toks": [
      "select",
      "t2.concert_name",
      ",",
      "t2.theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1.concert_id",
      "=",
      "t2.concert_id",
      "group",
      "by",
      "t2.concert_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "concert_name",
      ",",
      "t2",
      ".",
      "theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t2",
      ".",
      "concert_id",
      "group",
      "by",
      "t2",
      ".",
      "concert_id"
    ],
    "question": "What are the names , themes , and number of singers for every concert ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "themes",
      ",",
      "and",
      "number",
      "of",
      "singers",
      "for",
      "every",
      "concert",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of concerts refers to concert.concert_Name; themes of concerts refers to concert.Theme; number of singers for each concert refers to COUNT(singer_in_concert.Singer_ID) grouped by singer_in_concert.concert_ID"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "GROUP",
      "BY",
      "T2.singer_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "List singer names and number of concerts for each singer.",
    "question_toks": [
      "List",
      "singer",
      "names",
      "and",
      "number",
      "of",
      "concerts",
      "for",
      "each",
      "singer",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Singer names refer to singer.Name; number of concerts refers to COUNT(singer_in_concert.concert_ID); the relationship is established through singer_in_concert.Singer_ID = singer.Singer_ID;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "GROUP",
      "BY",
      "T2.singer_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "What are the names of the singers and number of concerts for each person?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "and",
      "number",
      "of",
      "concerts",
      "for",
      "each",
      "person",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of singers refers to singer.Name; Number of concerts for each person refers to counting singer_in_concert.concert_ID; Join singer and singer_in_concert using singer.Singer_ID = singer_in_concert.Singer_ID"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "JOIN",
      "concert",
      "AS",
      "T3",
      "ON",
      "T1.concert_id",
      "=",
      "T3.concert_id",
      "WHERE",
      "T3.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t3",
      ".",
      "concert_id",
      "where",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "List all singer names in concerts in year 2014.",
    "question_toks": [
      "List",
      "all",
      "singer",
      "names",
      "in",
      "concerts",
      "in",
      "year",
      "2014",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`singer`.`Name` refers to singer names; `concert`.`Year` = '2014' filters concerts in the year 2014; `singer_in_concert` links `singer` and `concert` through `Singer_ID` and `concert_ID`."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "JOIN",
      "concert",
      "AS",
      "T3",
      "ON",
      "T1.concert_id",
      "=",
      "T3.concert_id",
      "WHERE",
      "T3.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t3",
      ".",
      "concert_id",
      "where",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names of the singers who performed in a concert in 2014?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "performed",
      "in",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Concert in 2014 refers to concert.Year = '2014'; Names of singers refers to singer.Name;"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "song_name",
      "LIKE",
      "'",
      "%",
      "Hey",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      "from",
      "singer",
      "where",
      "song_name",
      "like",
      "value"
    ],
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "question_toks": [
      "what",
      "is",
      "the",
      "name",
      "and",
      "nation",
      "of",
      "the",
      "singer",
      "who",
      "have",
      "a",
      "song",
      "having",
      "'Hey",
      "'",
      "in",
      "its",
      "name",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"%Hey%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "singer's name refers to singer.Name; singer's nation refers to singer.Country; song name condition is singer.Song_Name LIKE '%Hey%';"
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "song_name",
      "LIKE",
      "'",
      "%",
      "Hey",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      "from",
      "singer",
      "where",
      "song_name",
      "like",
      "value"
    ],
    "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "country",
      "of",
      "origin",
      "of",
      "every",
      "singer",
      "who",
      "has",
      "a",
      "song",
      "with",
      "the",
      "word",
      "'Hey",
      "'",
      "in",
      "its",
      "title",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"%Hey%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The word 'Hey' in the title refers to singer.Song_Name LIKE '%Hey%'; retrieve singer.Name and singer.Country."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2014",
      "INTERSECT",
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "location",
      "of",
      "the",
      "stadiums",
      "which",
      "some",
      "concerts",
      "happened",
      "in",
      "the",
      "years",
      "of",
      "both",
      "2014",
      "and",
      "2015",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "The name and location of the stadiums refer to `stadium`.`Name` and `stadium`.`Location`. Concerts happening in the years of both 2014 and 2015 refer to filtering `concert`.`Year` = '2014' and `concert`.`Year` = '2015' and finding the intersection of `Stadium_ID` values. These `Stadium_ID` values are then used to retrieve the corresponding `Name` and `Location` from the `stadium` table."
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2014",
      "INTERSECT",
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "locations",
      "of",
      "the",
      "stadiums",
      "that",
      "had",
      "concerts",
      "that",
      "occurred",
      "in",
      "both",
      "2014",
      "and",
      "2015",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Names and locations of stadiums refer to stadium.Name and stadium.Location; concerts in both 2014 and 2015 refer to filtering concert.Year = '2014' and concert.Year = '2015' and ensuring the same stadium hosted concerts in both years by grouping by stadium.Stadium_ID."
  },
  {
    "db_id": "concert_singer",
    "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "stadium_id",
      "=",
      "(",
      "select",
      "stadium_id",
      "from",
      "stadium",
      "order",
      "by",
      "capacity",
      "desc",
      "limit",
      "1",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "stadium_id",
      "=",
      "(",
      "select",
      "stadium_id",
      "from",
      "stadium",
      "order",
      "by",
      "capacity",
      "desc",
      "limit",
      "value",
      ")"
    ],
    "question": "Find the number of concerts happened in the stadium with the highest capacity .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "concerts",
      "happened",
      "in",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "capacity",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "COUNT(concert_ID) where Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = MAX(Capacity))"
  },
  {
    "db_id": "concert_singer",
    "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "stadium_id",
      "=",
      "(",
      "select",
      "stadium_id",
      "from",
      "stadium",
      "order",
      "by",
      "capacity",
      "desc",
      "limit",
      "1",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "stadium_id",
      "=",
      "(",
      "select",
      "stadium_id",
      "from",
      "stadium",
      "order",
      "by",
      "capacity",
      "desc",
      "limit",
      "value",
      ")"
    ],
    "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "concerts",
      "that",
      "occurred",
      "in",
      "the",
      "stadium",
      "with",
      "the",
      "largest",
      "capacity",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of concerts refers to COUNT(concert_ID); stadium with the largest capacity refers to MAX(Capacity) in stadium; concerts in that stadium refer to filtering concert.Stadium_ID by the Stadium_ID where Capacity = MAX(Capacity)."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM pets WHERE weight  >  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "pets",
      "WHERE",
      "weight",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "value"
    ],
    "question": "Find the number of pets whose weight is heavier than 10.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "pets",
      "whose",
      "weight",
      "is",
      "heavier",
      "than",
      "10",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Weight is heavier than 10 refers to weight > 10; number of pets refers to COUNT(PetID)."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM pets WHERE weight  >  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "pets",
      "WHERE",
      "weight",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "value"
    ],
    "question": "How many pets have a greater weight than 10?",
    "question_toks": [
      "How",
      "many",
      "pets",
      "have",
      "a",
      "greater",
      "weight",
      "than",
      "10",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "greater weight than 10 refers to `Pets`.`weight` > 10"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "Find the weight of the youngest dog.",
    "question_toks": [
      "Find",
      "the",
      "weight",
      "of",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "weight refers to Pets.weight; youngest refers to MIN(Pets.pet_age); dog refers to Pets.PetType = 'dog';"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "How much does the youngest dog weigh?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "youngest",
      "dog",
      "weigh",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'youngest dog' refers to filtering Pets.PetType = 'dog' and finding MIN(Pets.pet_age); 'weigh' refers to Pets.weight;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "petType",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "petType"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "weight",
      "for",
      "each",
      "type",
      "of",
      "pet",
      ".",
      "List",
      "the",
      "maximum",
      "weight",
      "and",
      "pet",
      "type",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum weight refers to MAX(Pets.weight); for each type of pet refers to GROUP BY Pets.PetType; list maximum weight and pet type refers to SELECT Pets.PetType, MAX(Pets.weight)"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "petType",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "petType"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "List the maximum weight and type for each type of pet.",
    "question_toks": [
      "List",
      "the",
      "maximum",
      "weight",
      "and",
      "type",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum weight refers to MAX(Pets.weight); type of pet refers to Pets.PetType; for each type of pet refers to GROUP BY Pets.PetType;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "age",
      ">",
      "value"
    ],
    "question": "Find number of pets owned by students who are older than 20.",
    "question_toks": [
      "Find",
      "number",
      "of",
      "pets",
      "owned",
      "by",
      "students",
      "who",
      "are",
      "older",
      "than",
      "20",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "students older than 20 refers to Student.Age > 20; number of pets owned by these students refers to COUNT(Has_Pet.PetID) after joining Student.StuID = Has_Pet.StuID;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "age",
      ">",
      "value"
    ],
    "question": "How many pets are owned by students that have an age greater than 20?",
    "question_toks": [
      "How",
      "many",
      "pets",
      "are",
      "owned",
      "by",
      "students",
      "that",
      "have",
      "an",
      "age",
      "greater",
      "than",
      "20",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "students that have an age greater than 20 refer to Student.Age > 20; pets owned by students refer to joining Student, Has_Pet, and Pets tables on Student.StuID = Has_Pet.StuID and Has_Pet.PetID = Pets.PetID; the number of pets refers to counting rows in the Pets table."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T2.petid",
      "=",
      "T3.petid",
      "WHERE",
      "T1.sex",
      "=",
      "'F",
      "'",
      "AND",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "petid",
      "=",
      "t3",
      ".",
      "petid",
      "where",
      "t1",
      ".",
      "sex",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "dog",
      "pets",
      "that",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "(",
      "with",
      "sex",
      "F",
      ")",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number_of_dog_pets = COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'; female students refers to Student.Sex = 'F'; dog pets refers to Pets.PetType = 'dog'; Has_Pet links Student.StuID to Pets.PetID."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T2.petid",
      "=",
      "T3.petid",
      "WHERE",
      "T1.sex",
      "=",
      "'F",
      "'",
      "AND",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "petid",
      "=",
      "t3",
      ".",
      "petid",
      "where",
      "t1",
      ".",
      "sex",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "How many dog pets are raised by female students?",
    "question_toks": [
      "How",
      "many",
      "dog",
      "pets",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "female students refers to Student.StuID where Student.Sex = 'F'; dog pets refers to Pets.PetID where Pets.PetType = 'dog'; the relationship is established through Has_Pet where Has_Pet.StuID = Student.StuID and Has_Pet.PetID = Pets.PetID; count the number of such relationships."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question": "Find the number of distinct type of pets.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "type",
      "of",
      "pets",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct type of pets refers to distinct values in Pets.PetType"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question": "How many different types of pet are there?",
    "question_toks": [
      "How",
      "many",
      "different",
      "types",
      "of",
      "pet",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different types of pet refer to distinct values in Pets.PetType"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "OR",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "or",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the first name of students who have cat or dog pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "students",
      "who",
      "have",
      "cat",
      "or",
      "dog",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First name of students refers to Student.Fname; have cat or dog pet refers to Pets.PetType IN ('cat', 'dog'); the relationship is established through Has_Pet.StuID = Student.StuID and Has_Pet.PetID = Pets.PetID."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "OR",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "or",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What are the first names of every student who has a cat or dog as a pet?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "every",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "or",
      "dog",
      "as",
      "a",
      "pet",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first names refers to Student.Fname; students who have a pet refers to joining Student and Has_Pet on Student.StuID = Has_Pet.StuID; cat or dog as a pet refers to filtering Pets.PetType = 'cat' OR Pets.PetType = 'dog'; linking pets to students requires joining Has_Pet and Pets on Has_Pet.PetID = Pets.PetID"
  },
  {
    "db_id": "pets_1",
    "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "query_toks": [
      "select",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"cat\"",
      "intersect",
      "select",
      "t1.fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3.petid",
      "=",
      "t2.petid",
      "where",
      "t3.pettype",
      "=",
      "\"dog\""
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the first name of students who have both cat and dog pets .",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "students",
      "who",
      "have",
      "both",
      "cat",
      "and",
      "dog",
      "pets",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Students who have both cat and dog pets refers to `Has_Pet.StuID` linked to `Pets.PetType = 'cat'` AND `Pets.PetType = 'dog';` The first name of these students is retrieved from `Student.Fname`."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What are the students' first names who have both cats and dogs as pets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "students",
      "'",
      "first",
      "names",
      "who",
      "have",
      "both",
      "cats",
      "and",
      "dogs",
      "as",
      "pets",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "students who have both cats and dogs as pets refers to Has_Pet.StuID having both Pets.PetType = 'cat' and Pets.PetType = 'dog'; students' first names refers to Student.Fname;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "major",
      ",",
      "age",
      "FROM",
      "student",
      "WHERE",
      "stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "major",
      ",",
      "age",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "Find the major and age of students who do not have a cat pet.",
    "question_toks": [
      "Find",
      "the",
      "major",
      "and",
      "age",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "students who do not have a cat pet refers to Student.StuID who are NOT in Has_Pet.StuID where Has_Pet.PetID is linked to Pets.PetID and Pets.PetType = 'cat'; the major and age of students are represented by Student.Major and Student.Age respectively."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "major",
      ",",
      "age",
      "FROM",
      "student",
      "WHERE",
      "stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "major",
      ",",
      "age",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "question_toks": [
      "What",
      "major",
      "is",
      "every",
      "student",
      "who",
      "does",
      "not",
      "own",
      "a",
      "cat",
      "as",
      "a",
      "pet",
      ",",
      "and",
      "also",
      "how",
      "old",
      "are",
      "they",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Students who do not own a cat refers to excluding StuID values in Has_Pet where PetID links to Pets.PetType = 'cat'; Major refers to Student.Major; Age refers to Student.Age."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "stuid",
      "FROM",
      "student",
      "EXCEPT",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the id of students who do not have a cat pet.",
    "question_toks": [
      "Find",
      "the",
      "id",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "'Do not have a cat pet' refers to Student.StuID values that are NOT in the set of Has_Pet.StuID where Has_Pet.PetID links to Pets.PetID and Pets.PetType = 'cat';"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "stuid",
      "FROM",
      "student",
      "EXCEPT",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What are the ids of the students who do not own cats as pets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "students",
      "who",
      "do",
      "not",
      "own",
      "cats",
      "as",
      "pets",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "`Student`.`StuID` refers to all student IDs; students who own cats are identified by joining `Has_Pet`.`StuID` with `Pets`.`PetID` where `Pets`.`PetType` = 'cat'; students who do not own cats are those in `Student`.`StuID` but not in the result of this join."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'",
      "AND",
      "T1.stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "age",
      "of",
      "students",
      "who",
      "have",
      "a",
      "dog",
      "but",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "as",
      "a",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "students who have a dog refers to Has_Pet.StuID linked to Pets.PetID where Pets.PetType = 'dog'; students who do not have a cat refers to Has_Pet.StuID not linked to Pets.PetID where Pets.PetType = 'cat'; first name and age of students are retrieved from Student.Fname and Student.Age respectively;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'",
      "AND",
      "T1.stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "every",
      "student",
      "who",
      "has",
      "a",
      "dog",
      "but",
      "does",
      "not",
      "have",
      "a",
      "cat",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ],
                "and",
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Students who have a dog can be identified by joining `Has_Pet` and `Pets` where `Pets`.`PetType` = 'dog'. Students who do not have a cat can be identified by ensuring their `StuID` is not linked to any `PetID` in `Has_Pet` where `Pets`.`PetType` = 'cat'. The first name of the student can be retrieved from `Student`.`Fname` by joining `Student` on `Has_Pet`.`StuID`."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "Find the type and weight of the youngest pet.",
    "question_toks": [
      "Find",
      "the",
      "type",
      "and",
      "weight",
      "of",
      "the",
      "youngest",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "question_toks": [
      "What",
      "type",
      "of",
      "pet",
      "is",
      "the",
      "youngest",
      "animal",
      ",",
      "and",
      "how",
      "much",
      "does",
      "it",
      "weigh",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "type of pet refers to Pets.PetType; youngest animal refers to MIN(Pets.pet_age); how much does it weigh refers to Pets.weight;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "query_toks": [
      "SELECT",
      "petid",
      ",",
      "weight",
      "FROM",
      "pets",
      "WHERE",
      "pet_age",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "value"
    ],
    "question": "Find the id and weight of all pets whose age is older than 1.",
    "question_toks": [
      "Find",
      "the",
      "id",
      "and",
      "weight",
      "of",
      "all",
      "pets",
      "whose",
      "age",
      "is",
      "older",
      "than",
      "1",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "SELECT PetID, weight FROM Pets WHERE pet_age > 1;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "query_toks": [
      "SELECT",
      "petid",
      ",",
      "weight",
      "FROM",
      "pets",
      "WHERE",
      "pet_age",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "value"
    ],
    "question": "What is the id and weight of every pet who is older than 1?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "and",
      "weight",
      "of",
      "every",
      "pet",
      "who",
      "is",
      "older",
      "than",
      "1",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to Pets.PetID; weight refers to Pets.weight; older than 1 refers to Pets.pet_age > 1"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "Find the average and maximum age for each type of pet.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "and",
      "maximum",
      "age",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average age = AVG(Pets.pet_age); maximum age = MAX(Pets.pet_age); each type of pet refers to grouping by Pets.PetType;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "What is the average and maximum age for each pet type?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "age",
      "for",
      "each",
      "pet",
      "type",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(Pets.pet_age), MAX(Pets.pet_age) GROUP BY Pets.PetType;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "Find the average weight for each pet type.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "weight",
      "for",
      "each",
      "pet",
      "type",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average weight = AVG(Pets.weight); each pet type refers to GROUP BY Pets.PetType;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "What is the average weight for each type of pet?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average weight = AVG(Pets.weight); each type of pet = GROUP BY Pets.PetType;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid"
    ],
    "question": "Find the first name and age of students who have a pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "age",
      "of",
      "students",
      "who",
      "have",
      "a",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Has_Pet.StuID` refers to students who have a pet; `Student.Fname` and `Student.Age` refer to the first name and age of students."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid"
    ],
    "question": "What are the different first names and ages of the students who do have pets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "first",
      "names",
      "and",
      "ages",
      "of",
      "the",
      "students",
      "who",
      "do",
      "have",
      "pets",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Students who do have pets refers to Student.StuID IN Has_Pet.StuID; different first names and ages refers to DISTINCT(Student.Fname, Student.Age)."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "query_toks": [
      "SELECT",
      "T2.petid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.Lname",
      "=",
      "'Smith",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "lname",
      "=",
      "value"
    ],
    "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
    "question_toks": [
      "Find",
      "the",
      "id",
      "of",
      "the",
      "pet",
      "owned",
      "by",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "\u2018Smith\u2019",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ID of the pet refers to `Pets`.`PetID`; owned by student refers to the relationship between `Has_Pet`.`StuID` and `Student`.`StuID`; last name is 'Smith' refers to `Student`.`LName = 'Smith'`."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "query_toks": [
      "SELECT",
      "T2.petid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.Lname",
      "=",
      "'Smith",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "lname",
      "=",
      "value"
    ],
    "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "of",
      "the",
      "pet",
      "owned",
      "by",
      "the",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "'Smith",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Smith' is a value in `Student`.`LName`; `Student`.`StuID` links to `Has_Pet`.`StuID`; `Has_Pet`.`PetID` represents the ID of the pet owned by the student."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid"
    ],
    "question": "Find the number of pets for each student who has any pet and student id.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "pets",
      "for",
      "each",
      "student",
      "who",
      "has",
      "any",
      "pet",
      "and",
      "student",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of pets for each student who has any pet can be calculated by counting `Has_Pet.PetID` grouped by `Has_Pet.StuID`. Only include students where `COUNT(Has_Pet.PetID) > 0`."
  },
  {
    "db_id": "pets_1",
    "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1.stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1.stuid",
      "=",
      "t2.stuid",
      "group",
      "by",
      "t1.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid"
    ],
    "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "question_toks": [
      "For",
      "students",
      "who",
      "have",
      "pets",
      ",",
      "how",
      "many",
      "pets",
      "does",
      "each",
      "student",
      "have",
      "?",
      "list",
      "their",
      "ids",
      "instead",
      "of",
      "names",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "students who have pets refers to Has_Pet.StuID; how many pets refers to COUNT(Has_Pet.PetID); list their IDs refers to Has_Pet.PetID."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.sex",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "sex",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the first name and gender of student who have more than one pet.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "gender",
      "of",
      "student",
      "who",
      "have",
      "more",
      "than",
      "one",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "To find the first name and gender of students who have more than one pet: 1) Count the number of pets for each student using Has_Pet.StuID and Has_Pet.PetID, grouping by Has_Pet.StuID; 2) Filter students with more than one pet using HAVING COUNT(Has_Pet.PetID) > 1; 3) Join the Has_Pet table with the Student table on Has_Pet.StuID = Student.StuID to retrieve Student.Fname (first name) and Student.Sex (gender)."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.sex",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "sex",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What is the first name and gender of the all the students who have more than one pet?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "gender",
      "of",
      "the",
      "all",
      "the",
      "students",
      "who",
      "have",
      "more",
      "than",
      "one",
      "pet",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Students with more than one pet refers to grouping `Has_Pet.StuID` and counting `Has_Pet.PetID` where count > 1; first name and gender refer to `Student.Fname` and `Student.Sex` respectively."
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "T1.lname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pet_age",
      "=",
      "3",
      "AND",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pet_age",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the last name of the student who has a cat that is age 3.",
    "question_toks": [
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "age",
      "3",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "last name of the student refers to Student.LName; has a cat refers to Pets.PetType = 'cat'; age 3 refers to Pets.pet_age = 3; relationship between students and pets is established through Has_Pet;"
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "T1.lname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pet_age",
      "=",
      "3",
      "AND",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pet_age",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "3",
      "years",
      "old",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The last name of the student is found in Student.LName; the student is linked to the pet through Has_Pet (Has_Pet.StuID = Student.StuID and Has_Pet.PetID = Pets.PetID); the pet is identified as a cat by Pets.PetType = 'cat' and is 3 years old by Pets.pet_age = 3."
  },
  {
    "db_id": "pets_1",
    "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "stuid",
      "from",
      "has_pet",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "stuid",
      "from",
      "has_pet",
      ")"
    ],
    "question": "Find the average age of students who do not have any pet .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "pet",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average age = DIVIDE(SUM(Student.Age), COUNT(Student.Age WHERE Student.StuID NOT IN Has_Pet.StuID)); students who do not have any pet refers to Student.StuID who are NOT in Has_Pet.StuID;"
  },
  {
    "db_id": "pets_1",
    "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "query_toks": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "stuid",
      "from",
      "has_pet",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "stuid",
      "from",
      "has_pet",
      ")"
    ],
    "question": "What is the average age for all students who do not own any pets ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "for",
      "all",
      "students",
      "who",
      "do",
      "not",
      "own",
      "any",
      "pets",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Average age refers to AVG(Student.Age); students who do not own any pets refers to Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CONTINENTS;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question": "How many continents are there?",
    "question_toks": [
      "How",
      "many",
      "continents",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of continents = COUNT(continents.ContId);"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CONTINENTS;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question": "What is the number of continents?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "continents",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of continents = COUNT(continents.ContId);"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "query_toks": [
      "SELECT",
      "T1.ContId",
      ",",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.Continent",
      "GROUP",
      "BY",
      "T1.ContId",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contid",
      ",",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "group",
      "by",
      "t1",
      ".",
      "contid"
    ],
    "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "question_toks": [
      "How",
      "many",
      "countries",
      "does",
      "each",
      "continent",
      "have",
      "?",
      "List",
      "the",
      "continent",
      "id",
      ",",
      "continent",
      "name",
      "and",
      "the",
      "number",
      "of",
      "countries",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "continent id refers to continents.ContId; continent name refers to continents.Continent; number of countries refers to COUNT(countries.CountryId); the relationship is established through countries.Continent = continents.ContId."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "query_toks": [
      "SELECT",
      "T1.ContId",
      ",",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.Continent",
      "GROUP",
      "BY",
      "T1.ContId",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contid",
      ",",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "group",
      "by",
      "t1",
      ".",
      "contid"
    ],
    "question": "For each continent, list its id, name, and how many countries it has?",
    "question_toks": [
      "For",
      "each",
      "continent",
      ",",
      "list",
      "its",
      "id",
      ",",
      "name",
      ",",
      "and",
      "how",
      "many",
      "countries",
      "it",
      "has",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The `continents` table contains `ContId` (ID of the continent) and `Continent` (name of the continent). The `countries` table contains `CountryId` (ID of the country) and `Continent` (a foreign key referencing `ContId` in the `continents` table). To find the number of countries in each continent, group the `countries` table by `Continent` and count the rows. Join the `continents` table with the `countries` table on `continents.ContId = countries.Continent` to get the ID, name, and count of countries for each continent."
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM COUNTRIES;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question": "How many countries are listed?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "are",
      "listed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of countries listed corresponds to the count of rows in the `countries` table."
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM COUNTRIES;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question": "How many countries exist?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "exist",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of countries can be determined by counting the rows in the `countries` table using the `CountryId` column."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id"
    ],
    "question": "How many models does each car maker produce? List maker full name, id and the number.",
    "question_toks": [
      "How",
      "many",
      "models",
      "does",
      "each",
      "car",
      "maker",
      "produce",
      "?",
      "List",
      "maker",
      "full",
      "name",
      ",",
      "id",
      "and",
      "the",
      "number",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of models refers to COUNT(*); maker full name refers to car_makers.FullName; id refers to car_makers.Id; the relationship between car makers and models is established through car_names.MakeId = car_makers.Id"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id"
    ],
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "question_toks": [
      "What",
      "is",
      "the",
      "full",
      "name",
      "of",
      "each",
      "car",
      "maker",
      ",",
      "along",
      "with",
      "its",
      "id",
      "and",
      "how",
      "many",
      "models",
      "it",
      "produces",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "full name of each car maker refers to car_makers.FullName; id of each car maker refers to car_makers.Id; how many models it produces refers to COUNT(car_names.MakeId); relationship between car makers and models is car_makers.Id = car_names.MakeId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.horsepower",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "asc",
      "limit",
      "value"
    ],
    "question": "Which model of the car has the minimum horsepower?",
    "question_toks": [
      "Which",
      "model",
      "of",
      "the",
      "car",
      "has",
      "the",
      "minimum",
      "horsepower",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "minimum horsepower refers to MIN(cars_data.Horsepower); model of the car refers to model_list.Model"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.horsepower",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "question_toks": [
      "What",
      "is",
      "the",
      "model",
      "of",
      "the",
      "car",
      "with",
      "the",
      "smallest",
      "amount",
      "of",
      "horsepower",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "the smallest amount of horsepower refers to min(Horsepower); the model of the car refers to car_names.Model; join cars_data and car_names on cars_data.Id = car_names.MakeId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "query_toks": [
      "SELECT",
      "T1.model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Weight",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      "FROM",
      "CARS_DATA",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "weight",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "Find the model of the car whose weight is below the average weight.",
    "question_toks": [
      "Find",
      "the",
      "model",
      "of",
      "the",
      "car",
      "whose",
      "weight",
      "is",
      "below",
      "the",
      "average",
      "weight",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "model of the car refers to model_list.Model; weight refers to cars_data.Weight; below the average weight refers to cars_data.Weight < avg(cars_data.Weight)."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "query_toks": [
      "SELECT",
      "T1.model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Weight",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      "FROM",
      "CARS_DATA",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "weight",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "What is the model for the car with a weight smaller than the average?",
    "question_toks": [
      "What",
      "is",
      "the",
      "model",
      "for",
      "the",
      "car",
      "with",
      "a",
      "weight",
      "smaller",
      "than",
      "the",
      "average",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Weight smaller than the average refers to Weight < AVG(Weight); Model for the car refers to retrieving Model from the car_names table"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T3.MakeId",
      "=",
      "T4.id",
      "WHERE",
      "T4.year",
      "=",
      "'1970",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "makers",
      "that",
      "produced",
      "some",
      "cars",
      "in",
      "the",
      "year",
      "of",
      "1970",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"name of the makers\" refers to car_makers.Maker; \"produced some cars\" refers to joining car_makers, car_names, and cars_data; \"year of 1970\" refers to cars_data.Year = 1970"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T3.MakeId",
      "=",
      "T4.id",
      "WHERE",
      "T4.year",
      "=",
      "'1970",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "different",
      "car",
      "makers",
      "who",
      "produced",
      "a",
      "car",
      "in",
      "1970",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the car makers refers to car_makers.Maker; produced a car refers to a join between car_makers, car_names, and cars_data; in 1970 refers to cars_data.Year = 1970"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "query_toks": [
      "SELECT",
      "T2.Make",
      ",",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Year",
      "=",
      "(",
      "SELECT",
      "min",
      "(",
      "YEAR",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "make",
      ",",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "(",
      "select",
      "min",
      "(",
      "year",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "question_toks": [
      "Find",
      "the",
      "make",
      "and",
      "production",
      "time",
      "of",
      "the",
      "cars",
      "that",
      "were",
      "produced",
      "in",
      "the",
      "earliest",
      "year",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'make' refers to car_names.Make; 'production time' refers to cars_data.Year; 'earliest year' refers to min(cars_data.Year); the relationship between car_names and cars_data is established via cars_data.Id = car_names.MakeId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "query_toks": [
      "SELECT",
      "T2.Make",
      ",",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Year",
      "=",
      "(",
      "SELECT",
      "min",
      "(",
      "YEAR",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "make",
      ",",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "(",
      "select",
      "min",
      "(",
      "year",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maker",
      "of",
      "the",
      "carr",
      "produced",
      "in",
      "the",
      "earliest",
      "year",
      "and",
      "what",
      "year",
      "was",
      "it",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "the earliest year refers to min(cars_data.Year); the maker refers to car_makers.Maker; the relationship is cars_data.Id = car_names.MakeId and car_names.Model = model_list.Model and model_list.Maker = car_makers.Id"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.model",
      "=",
      "T2.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.id",
      "WHERE",
      "T3.year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question": "Which distinct car models are the produced after 1980?",
    "question_toks": [
      "Which",
      "distinct",
      "car",
      "models",
      "are",
      "the",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct car models refers to car_names.Model; produced after 1980 refers to cars_data.Year > 1980"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.model",
      "=",
      "T2.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.id",
      "WHERE",
      "T3.year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question": "What are the different models for the cards produced after 1980?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "models",
      "for",
      "the",
      "cards",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different models refers to model_list.Model; produced after 1980 refers to cars_data.Year > 1980; relationship between tables is cars_data.Id = model_list.Maker"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.continent",
      "JOIN",
      "car_makers",
      "AS",
      "T3",
      "ON",
      "T2.CountryId",
      "=",
      "T3.Country",
      "GROUP",
      "BY",
      "T1.Continent",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "continent"
    ],
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "question_toks": [
      "How",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "each",
      "continents",
      "?",
      "List",
      "the",
      "continent",
      "name",
      "and",
      "the",
      "count",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "car makers refers to car_makers.Id; continent name refers to continents.Continent; group by continent refers to group by continents.Continent; count refers to count(car_makers.Id)."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.continent",
      "JOIN",
      "car_makers",
      "AS",
      "T3",
      "ON",
      "T2.CountryId",
      "=",
      "T3.Country",
      "GROUP",
      "BY",
      "T1.Continent",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "continent"
    ],
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "continent",
      "and",
      "how",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "each",
      "one",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of each continent refers to continents.Continent; how many car makers refers to count(car_makers.Id); the relationship is car_makers.Country = countries.CountryId and countries.Continent = continents.ContId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.CountryName",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "GROUP",
      "BY",
      "T1.Country",
      "ORDER",
      "BY",
      "Count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "countryname",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "group",
      "by",
      "t1",
      ".",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which of the countries has the most car makers? List the country name.",
    "question_toks": [
      "Which",
      "of",
      "the",
      "countries",
      "has",
      "the",
      "most",
      "car",
      "makers",
      "?",
      "List",
      "the",
      "country",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most car makers refers to max(count(car_makers.Country)); list the country name refers to countries.CountryName"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.CountryName",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "GROUP",
      "BY",
      "T1.Country",
      "ORDER",
      "BY",
      "Count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "countryname",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "group",
      "by",
      "t1",
      ".",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the country with the most car makers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "country",
      "with",
      "the",
      "most",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the country refers to countries.CountryName; most car makers refers to the maximum count of car_makers.Maker grouped by car_makers.Country; car_makers.Country links to countries.CountryId."
  },
  {
    "db_id": "car_1",
    "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.fullname",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.maker",
      "=",
      "t2.id",
      "group",
      "by",
      "t2.id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "fullname",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t2",
      ".",
      "id"
    ],
    "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "are",
      "produced",
      "by",
      "each",
      "maker",
      "?",
      "Only",
      "list",
      "the",
      "count",
      "and",
      "the",
      "maker",
      "full",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count of car models refers to COUNT(car_names.MakeId); maker full name refers to car_makers.FullName; relationship between car_names and car_makers is established through model_list."
  },
  {
    "db_id": "car_1",
    "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "query_toks": [
      "SELECT",
      "Count",
      "(",
      "*",
      ")",
      ",",
      "T2.FullName",
      ",",
      "T2.id",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "GROUP",
      "BY",
      "T2.id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "fullname",
      ",",
      "t2",
      ".",
      "id",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t2",
      ".",
      "id"
    ],
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "models",
      "that",
      "are",
      "produced",
      "by",
      "each",
      "maker",
      "and",
      "what",
      "is",
      "the",
      "id",
      "and",
      "full",
      "name",
      "of",
      "each",
      "maker",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of car models refers to COUNT(model_list.Model); produced by each maker refers to GROUP BY model_list.Maker; id and full name of each maker refers to car_makers.Id and car_makers.FullName; relationship is model_list.Maker = car_makers.Id"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "query_toks": [
      "SELECT",
      "T1.Accelerate",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Make",
      "=",
      "'amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "make",
      "=",
      "value"
    ],
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "question_toks": [
      "What",
      "is",
      "the",
      "accelerate",
      "of",
      "the",
      "car",
      "make",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "accelerate refers to cars_data.Accelerate; car make amc hornet sportabout (sw) refers to car_names.Make = 'amc hornet sportabout (sw)'"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "query_toks": [
      "SELECT",
      "T1.Accelerate",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Make",
      "=",
      "'amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "make",
      "=",
      "value"
    ],
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "car",
      "accelerate",
      "that",
      "makes",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"amc hornet sportabout (sw)\" refers to car_names.Make = 'amc hornet sportabout (sw)'; acceleration refers to cars_data.Accelerate"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "WHERE",
      "T2.CountryName",
      "=",
      "'france",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "where",
      "t2",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "How many car makers are there in france?",
    "question_toks": [
      "How",
      "many",
      "car",
      "makers",
      "are",
      "there",
      "in",
      "france",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "car makers refers to the car_makers table; in France refers to countries.CountryName = 'france'; the relationship is established via car_makers.Country = countries.CountryId; How many refers to count(car_makers.Id)"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "WHERE",
      "T2.CountryName",
      "=",
      "'france",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "where",
      "t2",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "What is the number of makers of care in France?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "makers",
      "of",
      "care",
      "in",
      "France",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "makers of cars refers to car_makers.Maker; in France refers to countries.CountryName = 'france'; the relationship between car_makers and countries is through car_makers.Country = countries.CountryId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T3",
      "ON",
      "T2.Country",
      "=",
      "T3.CountryId",
      "WHERE",
      "T3.CountryName",
      "=",
      "'usa",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "country",
      "=",
      "t3",
      ".",
      "countryid",
      "where",
      "t3",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "How many car models are produced in the usa?",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "are",
      "produced",
      "in",
      "the",
      "usa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "car models refers to car_names.Model; produced in the usa refers to countries.CountryName = 'usa'"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T3",
      "ON",
      "T2.Country",
      "=",
      "T3.CountryId",
      "WHERE",
      "T3.CountryName",
      "=",
      "'usa",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "country",
      "=",
      "t3",
      ".",
      "countryid",
      "where",
      "t3",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "What is the count of the car models produced in the United States?",
    "question_toks": [
      "What",
      "is",
      "the",
      "count",
      "of",
      "the",
      "car",
      "models",
      "produced",
      "in",
      "the",
      "United",
      "States",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "count of car models refers to COUNT(car_names.Model); produced in the United States refers to countries.CountryName = 'usa'"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "mpg",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value"
    ],
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon",
      "(",
      "mpg",
      ")",
      "of",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "4 cylinders refers to Cylinders = 4; average miles per gallon = avg(MPG) where Cylinders = 4"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "mpg",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value"
    ],
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon",
      "of",
      "all",
      "the",
      "cards",
      "with",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average miles per gallon refers to avg(MPG); 4 cylinders refers to Cylinders = 4"
  },
  {
    "db_id": "car_1",
    "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "query_toks": [
      "select",
      "min",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "8",
      "and",
      "year",
      "=",
      "1974"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value"
    ],
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "smallest",
      "weight",
      "of",
      "the",
      "car",
      "produced",
      "with",
      "8",
      "cylinders",
      "on",
      "1974",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "smallest weight refers to min(Weight); produced with 8 cylinders refers to Cylinders = 8; on 1974 refers to Year = 1974"
  },
  {
    "db_id": "car_1",
    "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "query_toks": [
      "select",
      "min",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "8",
      "and",
      "year",
      "=",
      "1974"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value"
    ],
    "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "minimum",
      "weight",
      "of",
      "the",
      "car",
      "with",
      "8",
      "cylinders",
      "produced",
      "in",
      "1974",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "minimum weight = MIN(cars_data.Weight); 8 cylinders refers to cars_data.Cylinders = 8; produced in 1974 refers to cars_data.Year = 1974"
  },
  {
    "db_id": "car_1",
    "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks": [
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question": "What are all the makers and models?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Makers refers to `car_makers`.`Maker`; Models refers to `car_names`.`Model`."
  },
  {
    "db_id": "car_1",
    "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks": [
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question": "What are the makers and models?",
    "question_toks": [
      "What",
      "are",
      "the",
      "makers",
      "and",
      "models",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Makers refers to `car_makers`.`Maker`; Models refers to `car_names`.`Model`."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      ",",
      "T1.CountryId",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.CountryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      ",",
      "t1",
      ".",
      "countryid",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the countries having at least one car maker? List name and id.",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "having",
      "at",
      "least",
      "one",
      "car",
      "maker",
      "?",
      "List",
      "name",
      "and",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "countries having at least one car maker refers to countries.CountryId = car_makers.Country; name and id refers to selecting countries.CountryName and countries.CountryId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      ",",
      "T1.CountryId",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.CountryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      ",",
      "t1",
      ".",
      "countryid",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names and ids of all countries with at least one car maker?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "all",
      "countries",
      "with",
      "at",
      "least",
      "one",
      "car",
      "maker",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of countries refers to countries.CountryName; ids of countries refers to countries.CountryId; at least one car maker refers to the existence of a record in car_makers where car_makers.Country = countries.CountryId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "horsepower",
      ">",
      "150",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "value"
    ],
    "question": "What is the number of the cars with horsepower more than 150?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "the",
      "cars",
      "with",
      "horsepower",
      "more",
      "than",
      "150",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "horsepower more than 150 refers to cars_data.Horsepower > 150"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "horsepower",
      ">",
      "150",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "value"
    ],
    "question": "What is the number of cars with a horsepower greater than 150?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "a",
      "horsepower",
      "greater",
      "than",
      "150",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "horsepower greater than 150 refers to cars_data.Horsepower > 150"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      ",",
      "YEAR",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "YEAR",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "year",
      "from",
      "cars_data",
      "group",
      "by",
      "year"
    ],
    "question": "What is the average weight of cars each year?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "of",
      "cars",
      "each",
      "year",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average weight refers to AVG(Weight); each year refers to GROUP BY Year"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      ",",
      "YEAR",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "YEAR",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "year",
      "from",
      "cars_data",
      "group",
      "by",
      "year"
    ],
    "question": "What is the average weight and year for each year?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "and",
      "year",
      "for",
      "each",
      "year",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(cars_data.Weight), AVG(cars_data.Year) GROUP BY cars_data.Year;"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CONTINENTS",
      "AS",
      "T2",
      "ON",
      "T1.Continent",
      "=",
      "T2.ContId",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T1.CountryId",
      "=",
      "T3.Country",
      "WHERE",
      "T2.Continent",
      "=",
      "'europe",
      "'",
      "GROUP",
      "BY",
      "T1.CountryName",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "continents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "continent",
      "=",
      "t2",
      ".",
      "contid",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "where",
      "t2",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "countryname",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "question_toks": [
      "Which",
      "countries",
      "in",
      "europe",
      "have",
      "at",
      "least",
      "3",
      "car",
      "manufacturers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"europe\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "countries in Europe refers to countries where Continent = (SELECT ContId FROM continents WHERE Continent = 'europe'); at least 3 car manufacturers refers to COUNT(car_makers.Country) >= 3; the relationship between car_makers and countries is car_makers.Country = countries.CountryId."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CONTINENTS",
      "AS",
      "T2",
      "ON",
      "T1.Continent",
      "=",
      "T2.ContId",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T1.CountryId",
      "=",
      "T3.Country",
      "WHERE",
      "T2.Continent",
      "=",
      "'europe",
      "'",
      "GROUP",
      "BY",
      "T1.CountryName",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "continents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "continent",
      "=",
      "t2",
      ".",
      "contid",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "where",
      "t2",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "countryname",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "European",
      "countries",
      "with",
      "at",
      "least",
      "3",
      "manufacturers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"europe\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "European countries refer to countries.CountryName where continents.Continent = 'europe'; at least 3 manufacturers refer to COUNT(car_makers.Maker) >= 3; join countries and car_makers on countries.CountryId = car_makers.Country; join countries and continents on countries.Continent = continents.ContId."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.horsepower",
      ",",
      "T1.Make",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.cylinders",
      "=",
      "3",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "horsepower",
      ",",
      "t1",
      ".",
      "make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "horsepower",
      "and",
      "the",
      "make",
      "of",
      "the",
      "car",
      "models",
      "with",
      "3",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum horsepower refers to max(Horsepower); make of the car models refers to Make; with 3 cylinders refers to Cylinders = 3"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.horsepower",
      ",",
      "T1.Make",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.cylinders",
      "=",
      "3",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "horsepower",
      ",",
      "t1",
      ".",
      "make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "question_toks": [
      "What",
      "is",
      "the",
      "largest",
      "amount",
      "of",
      "horsepower",
      "for",
      "the",
      "models",
      "with",
      "3",
      "cylinders",
      "and",
      "what",
      "make",
      "is",
      "it",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "models with 3 cylinders refers to cars_data.Cylinders = 3; largest amount of horsepower refers to max(cars_data.Horsepower); what make is it refers to car_names.Make"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "question_toks": [
      "Which",
      "model",
      "saves",
      "the",
      "most",
      "gasoline",
      "?",
      "That",
      "is",
      "to",
      "say",
      ",",
      "have",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "saves the most gasoline refers to max(cars_data.MPG); model refers to car_names.Model"
  },
  {
    "db_id": "car_1",
    "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
    "query_toks": [
      "select",
      "t1.model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1.makeid",
      "=",
      "t2.id",
      "order",
      "by",
      "t2.mpg",
      "desc",
      "limit",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the car model with the highest mpg ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "car",
      "model",
      "with",
      "the",
      "highest",
      "mpg",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "car model refers to car_names.Model; highest mpg refers to max(cars_data.MPG)"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "<",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "value"
    ],
    "question": "What is the average horsepower of the cars before 1980?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "of",
      "the",
      "cars",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average horsepower refers to avg(Horsepower); before 1980 refers to Year < 1980"
  },
  {
    "db_id": "car_1",
    "query": "select avg(horsepower) from cars_data where year  <  1980;",
    "query_toks": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "value"
    ],
    "question": "What is the average horsepower for all cars produced before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "for",
      "all",
      "cars",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average horsepower refers to avg(CAST(Horsepower AS REAL)); produced before 1980 refers to Year < 1980"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.edispl",
      ")",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T1.Model",
      "=",
      "'volvo",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What is the average edispl of the cars of model volvo?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "of",
      "the",
      "cars",
      "of",
      "model",
      "volvo",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average edispl refers to avg(cars_data.Edispl); cars of model volvo refers to model_list.Model = 'volvo'"
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.edispl",
      ")",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T1.Model",
      "=",
      "'volvo",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What is the average edispl for all volvos?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "for",
      "all",
      "volvos",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average edispl refers to avg(cars_data.Edispl); all volvos refers to filtering car_names.Make for values containing 'Volvo'; join cars_data and car_names on cars_data.Id = car_names.MakeId"
  },
  {
    "db_id": "car_1",
    "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Accelerate",
      ")",
      ",",
      "Cylinders",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "Cylinders",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "accelerate",
      ")",
      ",",
      "cylinders",
      "from",
      "cars_data",
      "group",
      "by",
      "cylinders"
    ],
    "question": "What is the maximum accelerate for different number of cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "accelerate",
      "for",
      "different",
      "number",
      "of",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum accelerate refers to max(Accelerate); different number of cylinders refers to grouping by Cylinders"
  },
  {
    "db_id": "car_1",
    "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Accelerate",
      ")",
      ",",
      "Cylinders",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "Cylinders",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "accelerate",
      ")",
      ",",
      "cylinders",
      "from",
      "cars_data",
      "group",
      "by",
      "cylinders"
    ],
    "question": "What is the maximum accelerate for all the different cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "accelerate",
      "for",
      "all",
      "the",
      "different",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"maximum accelerate\" refers to max(Accelerate); \"all the different cylinders\" refers to grouping by Cylinders."
  },
  {
    "db_id": "car_1",
    "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Model",
      "FROM",
      "CAR_NAMES",
      "GROUP",
      "BY",
      "Model",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "model",
      "from",
      "car_names",
      "group",
      "by",
      "model",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which model has the most version(make) of cars?",
    "question_toks": [
      "Which",
      "model",
      "has",
      "the",
      "most",
      "version",
      "(",
      "make",
      ")",
      "of",
      "cars",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          14,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Model refers to model_list.Model; version (make) refers to car_names.Make; the task is to find the model with the maximum COUNT(car_names.Make)."
  },
  {
    "db_id": "car_1",
    "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Model",
      "FROM",
      "CAR_NAMES",
      "GROUP",
      "BY",
      "Model",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "model",
      "from",
      "car_names",
      "group",
      "by",
      "model",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What model has the most different versions?",
    "question_toks": [
      "What",
      "model",
      "has",
      "the",
      "most",
      "different",
      "versions",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          14,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Model refers to model_list.Model; Different versions refers to COUNT(car_names.Make) grouped by model_list.Model;"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "How many cars have more than 4 cylinders?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "have",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "more than 4 cylinders refers to cars_data.Cylinders > 4; counting cars refers to COUNT(*) where cars_data.Cylinders > 4"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "What is the number of cars with more than 4 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of cars refers to count(Id); more than 4 cylinders refers to Cylinders > 4"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "=",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "how many cars were produced in 1980?",
    "question_toks": [
      "how",
      "many",
      "cars",
      "were",
      "produced",
      "in",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'produced in 1980' refers to Year = 1980 in the cars_data table; 'how many cars' refers to counting the Id column in the cars_data table"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "=",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "In 1980, how many cars were made?",
    "question_toks": [
      "In",
      "1980",
      ",",
      "how",
      "many",
      "cars",
      "were",
      "made",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "In 1980 refers to Year = 1980; how many cars refers to COUNT(*) in the cars_data table."
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "WHERE",
      "T1.FullName",
      "=",
      "'American",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "where",
      "t1",
      ".",
      "fullname",
      "=",
      "value"
    ],
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "were",
      "produced",
      "by",
      "the",
      "maker",
      "with",
      "full",
      "name",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'car models' refers to `car_names`.`Model`; 'produced by the maker with full name American Motor Company' refers to filtering `car_makers`.`FullName` = 'American Motor Company' and joining `car_names`.`MakeId` with `car_makers`.`Id`"
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "WHERE",
      "T1.FullName",
      "=",
      "'American",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "where",
      "t1",
      ".",
      "fullname",
      "=",
      "value"
    ],
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "models",
      "created",
      "by",
      "the",
      "car",
      "maker",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The car maker American Motor Company refers to car_makers.FullName = 'American Motor Company'; the number of car models refers to COUNT(car_names.Model); created by the car maker refers to car_names.MakeId = car_makers.Id"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which makers designed more than 3 car models? List full name and the id.",
    "question_toks": [
      "Which",
      "makers",
      "designed",
      "more",
      "than",
      "3",
      "car",
      "models",
      "?",
      "List",
      "full",
      "name",
      "and",
      "the",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "makers refers to car_makers; designed more than 3 car models refers to COUNT(car_names.Model) > 3; full name refers to car_makers.FullName; id refers to car_makers.Id."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names and ids of all makers with more than 3 models?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "all",
      "makers",
      "with",
      "more",
      "than",
      "3",
      "models",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`car_makers`.`Id` and `car_makers`.`Maker` refer to the ids and names of makers; `model_list`.`Maker` links to `car_makers`.`Id`; count of `model_list`.`Model` > 3 filters makers with more than 3 models."
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T2.Maker",
      "=",
      "T3.Id",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T1.MakeId",
      "=",
      "T4.Id",
      "WHERE",
      "T3.FullName",
      "=",
      "'General",
      "Motors",
      "'",
      "OR",
      "T4.weight",
      ">",
      "3500",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "maker",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "fullname",
      "=",
      "value",
      "or",
      "t4",
      ".",
      "weight",
      ">",
      "value"
    ],
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "question_toks": [
      "Which",
      "distinctive",
      "models",
      "are",
      "produced",
      "by",
      "maker",
      "with",
      "the",
      "full",
      "name",
      "General",
      "Motors",
      "or",
      "weighing",
      "more",
      "than",
      "3500",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinctive models refer to car_names.Model; produced by maker with the full name General Motors refers to car_makers.FullName = 'General Motors'; weighing more than 3500 refers to cars_data.Weight > 3500"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T2.Maker",
      "=",
      "T3.Id",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T1.MakeId",
      "=",
      "T4.Id",
      "WHERE",
      "T3.FullName",
      "=",
      "'General",
      "Motors",
      "'",
      "OR",
      "T4.weight",
      ">",
      "3500",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "maker",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "fullname",
      "=",
      "value",
      "or",
      "t4",
      ".",
      "weight",
      ">",
      "value"
    ],
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "models",
      "created",
      "by",
      "either",
      "the",
      "car",
      "maker",
      "General",
      "Motors",
      "or",
      "weighed",
      "more",
      "than",
      "3500",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different models refers to car_names.Model; car maker General Motors refers to car_makers.FullName = 'General Motors'; weighed more than 3500 refers to cars_data.Weight > 3500; join car_makers to model_list on car_makers.Id = model_list.Maker; join model_list to car_names on model_list.Model = car_names.Model; join car_names to cars_data on car_names.MakeId = cars_data.Id"
  },
  {
    "db_id": "car_1",
    "query": "select distinct year from cars_data where weight between 3000 and 4000;",
    "query_toks": [
      "select",
      "distinct",
      "year",
      "from",
      "cars_data",
      "where",
      "weight",
      "between",
      "3000",
      "and",
      "4000",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "year",
      "from",
      "cars_data",
      "where",
      "weight",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "question_toks": [
      "In",
      "which",
      "years",
      "cars",
      "were",
      "produced",
      "weighing",
      "no",
      "less",
      "than",
      "3000",
      "and",
      "no",
      "more",
      "than",
      "4000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          4000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`cars_data.Year` refers to the manufacturing year of the car; `cars_data.Weight` refers to the weight of the car in pounds; weighing no less than 3000 and no more than 4000 refers to `cars_data.Weight >= 3000 AND cars_data.Weight <= 4000`."
  },
  {
    "db_id": "car_1",
    "query": "select distinct year from cars_data where weight between 3000 and 4000;",
    "query_toks": [
      "select",
      "distinct",
      "year",
      "from",
      "cars_data",
      "where",
      "weight",
      "between",
      "3000",
      "and",
      "4000",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "year",
      "from",
      "cars_data",
      "where",
      "weight",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "years",
      "in",
      "which",
      "there",
      "were",
      "cars",
      "produced",
      "that",
      "weighed",
      "less",
      "than",
      "4000",
      "and",
      "also",
      "cars",
      "that",
      "weighted",
      "more",
      "than",
      "3000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          4000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "weighed less than 4000 refers to cars_data.Weight < 4000; weighed more than 3000 refers to cars_data.Weight > 3000; different years refers to cars_data.Year"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the horsepower of the car with the largest accelerate?",
    "question_toks": [
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "accelerate",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Largest accelerate refers to MAX(cars_data.Accelerate); Horsepower of the car refers to cars_data.Horsepower"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the horsepower of the car with the greatest accelerate?",
    "question_toks": [
      "What",
      "is",
      "the",
      "horsepower",
      "of",
      "the",
      "car",
      "with",
      "the",
      "greatest",
      "accelerate",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Horsepower refers to cars_data.Horsepower; the greatest accelerate refers to MAX(cars_data.Accelerate)"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.cylinders",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Model",
      "=",
      "'volvo",
      "'",
      "ORDER",
      "BY",
      "T1.accelerate",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "model",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "asc",
      "limit",
      "value"
    ],
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question_toks": [
      "For",
      "model",
      "volvo",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "car",
      "with",
      "the",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Model volvo refers to car_names.Model = 'volvo'; least accelerate refers to min(cars_data.Accelerate); how many cylinders refers to cars_data.Cylinders"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.cylinders",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Model",
      "=",
      "'volvo",
      "'",
      "ORDER",
      "BY",
      "T1.accelerate",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "model",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "asc",
      "limit",
      "value"
    ],
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question_toks": [
      "For",
      "a",
      "volvo",
      "model",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "version",
      "with",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "volvo model refers to model_list.Model = 'volvo'; least accelerate refers to min(cars_data.Accelerate); number of cylinders refers to cars_data.Cylinders"
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Accelerate",
      ">",
      "(",
      "SELECT",
      "Accelerate",
      "FROM",
      "CARS_DATA",
      "ORDER",
      "BY",
      "Horsepower",
      "DESC",
      "LIMIT",
      "1",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "accelerate",
      ">",
      "(",
      "select",
      "accelerate",
      "from",
      "cars_data",
      "order",
      "by",
      "horsepower",
      "desc",
      "limit",
      "value",
      ")"
    ],
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "have",
      "a",
      "larger",
      "accelerate",
      "than",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "horsepower",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      22,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    20,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "the car with the largest horsepower refers to MAX(Horsepower); larger accelerate refers to Accelerate > (Accelerate of the car with MAX(Horsepower)); how many cars refers to COUNT(*)"
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Accelerate",
      ">",
      "(",
      "SELECT",
      "Accelerate",
      "FROM",
      "CARS_DATA",
      "ORDER",
      "BY",
      "Horsepower",
      "DESC",
      "LIMIT",
      "1",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "accelerate",
      ">",
      "(",
      "select",
      "accelerate",
      "from",
      "cars_data",
      "order",
      "by",
      "horsepower",
      "desc",
      "limit",
      "value",
      ")"
    ],
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "a",
      "greater",
      "accelerate",
      "than",
      "the",
      "one",
      "with",
      "the",
      "most",
      "horsepower",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      22,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    20,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "the one with the most horsepower refers to MAX(cars_data.Horsepower); greater accelerate refers to cars_data.Accelerate > (SELECT cars_data.Accelerate FROM cars_data WHERE cars_data.Horsepower = MAX(cars_data.Horsepower))"
  },
  {
    "db_id": "car_1",
    "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "How many countries has more than 2 car makers ?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "has",
      "more",
      "than",
      "2",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'countries' refers to the `countries` table; 'car makers' refers to the `car_makers` table; 'more than 2 car makers' refers to filtering groups of `car_makers.Country` where `COUNT(car_makers.Id) > 2`; the result is the count of such countries, which can be obtained using `COUNT(DISTINCT countries.CountryId)`."
  },
  {
    "db_id": "car_1",
    "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What is the number of countries with more than 2 car makers ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "countries",
      "with",
      "more",
      "than",
      "2",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "countries refers to the `countries` table; car makers refers to the `car_makers` table; more than 2 car makers refers to grouping by `car_makers.Country` and filtering groups with COUNT(`car_makers.Id`) > 2; number of countries refers to counting distinct `countries.CountryId` that satisfy the condition."
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "6",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "How many cars has over 6 cylinders?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "has",
      "over",
      "6",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "over 6 cylinders refers to Cylinders > 6; how many cars refers to COUNT(*)"
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "6",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "What is the number of carsw ith over 6 cylinders?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "carsw",
      "ith",
      "over",
      "6",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "over 6 cylinders refers to Cylinders > 6; number of cars refers to count(Id)."
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Cylinders",
      "=",
      "4",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "question_toks": [
      "For",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      ",",
      "which",
      "model",
      "has",
      "the",
      "largest",
      "horsepower",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "4 cylinders refers to cars_data.Cylinders = 4; largest horsepower refers to MAX(cast(cars_data.Horsepower as INTEGER)); model refers to model_list.Model"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Cylinders",
      "=",
      "4",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "question_toks": [
      "For",
      "all",
      "of",
      "the",
      "4",
      "cylinder",
      "cars",
      ",",
      "which",
      "model",
      "has",
      "the",
      "most",
      "horsepower",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "4 cylinder cars refers to cars_data.Cylinders = 4; most horsepower refers to MAX(cars_data.Horsepower); model refers to car_names.Model"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "query_toks": [
      "SELECT",
      "T2.MakeId",
      ",",
      "T2.Make",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Horsepower",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "Horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      "AND",
      "T1.Cylinders",
      "<",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "makeid",
      ",",
      "t2",
      ".",
      "make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1",
      ".",
      "cylinders",
      "<",
      "=",
      "value"
    ],
    "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "question_toks": [
      "Among",
      "the",
      "cars",
      "with",
      "more",
      "than",
      "lowest",
      "horsepower",
      ",",
      "which",
      "ones",
      "do",
      "not",
      "have",
      "more",
      "than",
      "3",
      "cylinders",
      "?",
      "List",
      "the",
      "car",
      "makeid",
      "and",
      "make",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      20,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ],
        "and",
        [
          false,
          6,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "more than lowest horsepower refers to Horsepower > (SELECT MIN(Horsepower) FROM cars_data); do not have more than 3 cylinders refers to Cylinders <= 3; car makeid and make name refers to car_names.MakeId and car_names.Make"
  },
  {
    "db_id": "car_1",
    "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
    "query_toks": [
      "select",
      "t2.makeid",
      ",",
      "t2.make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.makeid",
      "where",
      "t1.horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1.cylinders",
      "<",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "makeid",
      ",",
      "t2",
      ".",
      "make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1",
      ".",
      "cylinders",
      "<",
      "value"
    ],
    "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "question_toks": [
      "Among",
      "the",
      "cars",
      "that",
      "do",
      "not",
      "have",
      "the",
      "minimum",
      "horsepower",
      ",",
      "what",
      "are",
      "the",
      "make",
      "ids",
      "and",
      "names",
      "of",
      "all",
      "those",
      "with",
      "less",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      20,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "do not have the minimum horsepower refers to Horsepower != MIN(Horsepower); make ids and names refer to car_names.MakeId and car_names.Make; less than 4 cylinders refers to cars_data.Cylinders < 4; join cars_data and car_names on cars_data.Id = car_names.MakeId"
  },
  {
    "db_id": "car_1",
    "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "query_toks": [
      "select",
      "max",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "8",
      "or",
      "year",
      "<",
      "1980"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "or",
      "year",
      "<",
      "value"
    ],
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "of",
      "the",
      "car",
      "with",
      "8",
      "cylinders",
      "or",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum miles per gallon refers to MAX(MPG); 8 cylinders refers to Cylinders = 8; produced before 1980 refers to Year < 1980; combine as MAX(MPG) where (Cylinders = 8 OR Year < 1980)"
  },
  {
    "db_id": "car_1",
    "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "query_toks": [
      "select",
      "max",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "8",
      "or",
      "year",
      "<",
      "1980"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "or",
      "year",
      "<",
      "value"
    ],
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "mpg",
      "of",
      "the",
      "cars",
      "that",
      "had",
      "8",
      "cylinders",
      "or",
      "that",
      "were",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum mpg refers to max(cars_data.MPG); 8 cylinders refers to cars_data.Cylinders = 8; produced before 1980 refers to cars_data.Year < 1980; the conditions are combined using OR"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.Id",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T4",
      "ON",
      "T1.Maker",
      "=",
      "T4.Id",
      "WHERE",
      "T3.weight",
      "<",
      "3500",
      "AND",
      "T4.FullName",
      "!",
      "=",
      "'Ford",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "weight",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "fullname",
      "!",
      "=",
      "value"
    ],
    "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "question_toks": [
      "Which",
      "models",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "not",
      "built",
      "by",
      "the",
      "'Ford",
      "Motor",
      "Company",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'lighter than 3500' refers to cars_data.Weight < 3500; 'not built by the Ford Motor Company' refers to car_makers.FullName != 'Ford Motor Company'; 'models' refers to car_names.Model"
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.Id",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T4",
      "ON",
      "T1.Maker",
      "=",
      "T4.Id",
      "WHERE",
      "T3.weight",
      "<",
      "3500",
      "AND",
      "T4.FullName",
      "!",
      "=",
      "'Ford",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "weight",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "fullname",
      "!",
      "=",
      "value"
    ],
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "models",
      "wthat",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "were",
      "not",
      "built",
      "by",
      "the",
      "Ford",
      "Motor",
      "Company",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different models refer to car_names.Model; lighter than 3500 refers to cars_data.Weight < 3500; not built by the Ford Motor Company refers to car_makers.FullName != 'Ford Motor Company'"
  },
  {
    "db_id": "car_1",
    "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "query_toks": [
      "SELECT",
      "CountryName",
      "FROM",
      "countries",
      "EXCEPT",
      "SELECT",
      "T1.CountryName",
      "FROM",
      "countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.countryId",
      "=",
      "T2.Country",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country"
    ],
    "question": "What are the name of the countries where there is not a single car maker?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "of",
      "the",
      "countries",
      "where",
      "there",
      "is",
      "not",
      "a",
      "single",
      "car",
      "maker",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "name of the countries refers to countries.CountryName; not a single car maker refers to countries.CountryId not being present in car_makers.Country"
  },
  {
    "db_id": "car_1",
    "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "query_toks": [
      "SELECT",
      "CountryName",
      "FROM",
      "countries",
      "EXCEPT",
      "SELECT",
      "T1.CountryName",
      "FROM",
      "countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.countryId",
      "=",
      "T2.Country",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country"
    ],
    "question": "What are the names of the countries with no car makers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "with",
      "no",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "names of the countries refers to countries.CountryName; no car makers refers to countries.CountryId not in car_makers.Country"
  },
  {
    "db_id": "car_1",
    "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
    "query_toks": [
      "select",
      "t1.id",
      ",",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">=",
      "2",
      "intersect",
      "select",
      "t1.id",
      ",",
      "t1.maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1.id",
      "=",
      "t2.maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2.model",
      "=",
      "t3.model",
      "group",
      "by",
      "t1.id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "question_toks": [
      "Which",
      "are",
      "the",
      "car",
      "makers",
      "which",
      "produce",
      "at",
      "least",
      "2",
      "models",
      "and",
      "more",
      "than",
      "3",
      "car",
      "makers",
      "?",
      "List",
      "the",
      "id",
      "and",
      "the",
      "maker",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              4
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  12,
                  false
                ],
                null
              ],
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            6,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            3.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "car makers refers to car_makers; produce at least 2 models refers to COUNT(model_list.Model) >= 2; more than 3 car makers refers to ensuring the result set contains more than 3 rows; id and maker refers to car_makers.Id and car_makers.Maker"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.Id",
      ",",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2",
      "INTERSECT",
      "SELECT",
      "T1.Id",
      ",",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "makers",
      "of",
      "all",
      "car",
      "makers",
      "that",
      "produce",
      "at",
      "least",
      "2",
      "models",
      "and",
      "make",
      "more",
      "than",
      "3",
      "cars",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              4
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  12,
                  false
                ],
                null
              ],
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            6,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            3.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "ids and makers refer to car_makers.Id and car_makers.Maker; produce at least 2 models refers to COUNT(DISTINCT car_names.Model) >= 2; make more than 3 cars refers to COUNT(cars_data.Id) > 3"
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "query_toks": [
      "SELECT",
      "T1.countryId",
      ",",
      "T1.CountryName",
      "FROM",
      "Countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.countryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      "UNION",
      "SELECT",
      "T1.countryId",
      ",",
      "T1.CountryName",
      "FROM",
      "Countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T3",
      "ON",
      "T2.Id",
      "=",
      "T3.Maker",
      "WHERE",
      "T3.Model",
      "=",
      "'fiat",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "maker",
      "where",
      "t3",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      "and",
      "names",
      "of",
      "the",
      "countries",
      "which",
      "have",
      "more",
      "than",
      "3",
      "car",
      "makers",
      "or",
      "produce",
      "the",
      "'fiat",
      "'",
      "model",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"fiat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "id and names of the countries refer to countries.CountryId and countries.CountryName; more than 3 car makers refers to COUNT(car_makers.Id) > 3; produce the 'fiat' model refers to car_names.Model = 'fiat'"
  },
  {
    "db_id": "car_1",
    "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
    "query_toks": [
      "select",
      "t1.countryid",
      ",",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "group",
      "by",
      "t1.countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      "union",
      "select",
      "t1.countryid",
      ",",
      "t1.countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1.countryid",
      "=",
      "t2.country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2.id",
      "=",
      "t3.maker",
      "where",
      "t3.model",
      "=",
      "\"fiat\"",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "maker",
      "where",
      "t3",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "all",
      "countries",
      "that",
      "either",
      "have",
      "more",
      "than",
      "3",
      "car",
      "makers",
      "or",
      "produce",
      "fiat",
      "model",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"fiat\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "ids and names of all countries refer to countries.CountryId and countries.CountryName; more than 3 car makers refers to count(car_makers.Id) > 3 grouped by countries.CountryId; produce fiat model refers to car_names.Model = 'fiat' joined with model_list and car_makers to link to countries.CountryId."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Country",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "question_toks": [
      "Which",
      "country",
      "does",
      "Airline",
      "``",
      "JetBlue",
      "Airways",
      "''",
      "belong",
      "to",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'JetBlue Airways' refers to airlines.Airline; the country of the airline is retrieved from airlines.Country;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Country",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "What country is Jetblue Airways affiliated with?",
    "question_toks": [
      "What",
      "country",
      "is",
      "Jetblue",
      "Airways",
      "affiliated",
      "with",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Jetblue Airways' refers to `airlines`.`Airline` = 'JetBlue Airways'; 'Country' refers to `airlines`.`Country`;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "abbreviation",
      "of",
      "Airline",
      "``",
      "JetBlue",
      "Airways",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "abbreviation of Airline refers to Abbreviation; JetBlue Airways refers to Airline = 'JetBlue Airways';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "question_toks": [
      "Which",
      "abbreviation",
      "corresponds",
      "to",
      "Jetblue",
      "Airways",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Jetblue Airways' refers to airlines.Airline LIKE '%JetBlue Airways%'; abbreviation corresponds to airlines.Abbreviation;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "Airline",
      ",",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "List all airline names and their abbreviations in \"USA\".",
    "question_toks": [
      "List",
      "all",
      "airline",
      "names",
      "and",
      "their",
      "abbreviations",
      "in",
      "``",
      "USA",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airline names refers to airlines.Airline; abbreviations refers to airlines.Abbreviation; in 'USA' refers to airlines.Country = 'USA';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "Airline",
      ",",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "What are the airline names and abbreviations for airlines in the USA?",
    "question_toks": [
      "What",
      "are",
      "the",
      "airline",
      "names",
      "and",
      "abbreviations",
      "for",
      "airlines",
      "in",
      "the",
      "USA",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airline names refers to airlines.Airline; abbreviations refers to airlines.Abbreviation; airlines in the USA refers to airlines.Country = 'USA';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "query_toks": [
      "SELECT",
      "AirportCode",
      ",",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "city",
      "=",
      "``",
      "Anthony",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "List the airport code and name in the city of Anthony.",
    "question_toks": [
      "List",
      "the",
      "airport",
      "code",
      "and",
      "name",
      "in",
      "the",
      "city",
      "of",
      "Anthony",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airport code and name refers to AirportCode and AirportName; city of Anthony refers to City = 'Anthony';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "query_toks": [
      "SELECT",
      "AirportCode",
      ",",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "city",
      "=",
      "``",
      "Anthony",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "Give the airport code and airport name corresonding to the city Anthony.",
    "question_toks": [
      "Give",
      "the",
      "airport",
      "code",
      "and",
      "airport",
      "name",
      "corresonding",
      "to",
      "the",
      "city",
      "Anthony",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Anthony' refers to `airports`.`City = 'Anthony'`; airport code and airport name correspond to `airports`.`AirportCode` and `airports`.`AirportName`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question": "How many airlines do we have?",
    "question_toks": [
      "How",
      "many",
      "airlines",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "How many airlines refers to COUNT(uid) in the airlines table."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question": "What is the total number of airlines?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "airlines",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total number of airlines refers to COUNT(uid) in the airlines table."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRPORTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question": "How many airports do we have?",
    "question_toks": [
      "How",
      "many",
      "airports",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of airports refers to counting the rows in the `airports` table using the `AirportCode` column."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRPORTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question": "Return the number of  airports.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "airports",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of airports refers to COUNT(AirportCode)."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question": "How many flights do we have?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flights refers to the `flights` table; counting flights refers to counting rows in the `flights` table."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question": "Return the number of flights.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of flights refers to COUNT(*) on the 'flights' table."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "query_toks": [
      "SELECT",
      "Airline",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Abbreviation",
      "=",
      "``",
      "UAL",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "value"
    ],
    "question": "Which airline has abbreviation 'UAL'?",
    "question_toks": [
      "Which",
      "airline",
      "has",
      "abbreviation",
      "'UAL",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airline refers to airlines.Airline; abbreviation refers to airlines.Abbreviation; airlines.Abbreviation = 'UAL';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "query_toks": [
      "SELECT",
      "Airline",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Abbreviation",
      "=",
      "``",
      "UAL",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "value"
    ],
    "question": "Give the airline with abbreviation 'UAL'.",
    "question_toks": [
      "Give",
      "the",
      "airline",
      "with",
      "abbreviation",
      "'UAL",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'airline' refers to `airlines`.`Airline`; 'abbreviation' refers to `airlines`.`Abbreviation`; abbreviation 'UAL' translates to `airlines`.`Abbreviation` = 'UAL';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "How many airlines are from USA?",
    "question_toks": [
      "How",
      "many",
      "airlines",
      "are",
      "from",
      "USA",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines are from USA refers to Country = 'USA';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "Return the number of airlines in the USA.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "airlines",
      "in",
      "the",
      "USA",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of airlines refers to COUNT(*) in the airlines table; in the USA refers to airlines.Country = 'USA';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "query_toks": [
      "SELECT",
      "City",
      ",",
      "Country",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportName",
      "=",
      "``",
      "Alton",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "value"
    ],
    "question": "Which city and country is the Alton airport at?",
    "question_toks": [
      "Which",
      "city",
      "and",
      "country",
      "is",
      "the",
      "Alton",
      "airport",
      "at",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Alton airport refers to airports.AirportName = 'Alton'; city and country refers to selecting airports.City and airports.Country;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "query_toks": [
      "SELECT",
      "City",
      ",",
      "Country",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportName",
      "=",
      "``",
      "Alton",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "value"
    ],
    "question": "Give the city and country for the Alton airport.",
    "question_toks": [
      "Give",
      "the",
      "city",
      "and",
      "country",
      "for",
      "the",
      "Alton",
      "airport",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The airport named 'Alton' refers to AirportName = 'Alton'; city and country refer to City and Country columns in the airports table."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportCode",
      "=",
      "``",
      "AKO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "value"
    ],
    "question": "What is the airport name for airport 'AKO'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "airport",
      "name",
      "for",
      "airport",
      "'AKO",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AirportCode = 'AKO' refers to AirportName;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportCode",
      "=",
      "``",
      "AKO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "value"
    ],
    "question": "Return the name of the airport with code 'AKO'.",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "airport",
      "with",
      "code",
      "'AKO",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The name of the airport refers to `airports`.`AirportName`; the code 'AKO' refers to `airports`.`AirportCode = 'AKO'`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What are airport names at City 'Aberdeen'?",
    "question_toks": [
      "What",
      "are",
      "airport",
      "names",
      "at",
      "City",
      "'Aberdeen",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airport names refers to airports.AirportName; City 'Aberdeen' refers to airports.City = 'Aberdeen';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What are the names of airports in Aberdeen?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "airports",
      "in",
      "Aberdeen",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of airports refers to airports.AirportName; in Aberdeen refers to airports.City = 'Aberdeen ';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "How many flights depart from 'APG'?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "'APG",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "depart from refers to flights.SourceAirport; 'APG' refers to flights.SourceAirport = ' APG';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Count the number of flights departing from 'APG'.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "flights",
      "departing",
      "from",
      "'APG",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Departing from 'APG' refers to flights.SourceAirport = 'APG';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "ATO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "How many flights have destination ATO?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "have",
      "destination",
      "ATO",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "destination ATO refers to flights.DestAirport = 'ATO';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "ATO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "Count the number of flights into ATO.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "flights",
      "into",
      "ATO",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Flights into ATO refers to flights.DestAirport = ' ATO';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flights depart from City Aberdeen?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "City",
      "Aberdeen",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flights depart refers to the `flights` table; from City Aberdeen refers to `airports`.`City = 'Aberdeen '`; the relationship between `flights` and `airports` is `flights`.`SourceAirport` = `airports`.`AirportCode`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Return the number of flights departing from Aberdeen.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "departing",
      "from",
      "Aberdeen",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'number of flights' refers to COUNT(*) in the 'flights' table; 'departing from' refers to 'SourceAirport' in the 'flights' table; 'Aberdeen' refers to 'City' in the 'airports' table, which matches 'Aberdeen '; 'SourceAirport' in the 'flights' table corresponds to 'AirportCode' in the 'airports' table."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flights arriving in Aberdeen city?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "city",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Arriving in Aberdeen city refers to flights.DestAirport and airports.City = 'Aberdeen';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Return the number of flights arriving in Aberdeen.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Flights arriving refers to flights.DestAirport; Aberdeen refers to airports.City = 'Aberdeen '; the relationship is established through flights.DestAirport = airports.AirportCode."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T3",
      "ON",
      "T1.SourceAirport",
      "=",
      "T3.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Ashley",
      "''",
      "AND",
      "T3.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t3",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "depart",
      "from",
      "City",
      "'Aberdeen",
      "'",
      "and",
      "have",
      "destination",
      "City",
      "'Ashley",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "depart from City 'Aberdeen' refers to flights.SourceAirport linked to airports.AirportCode where airports.City = 'Aberdeen '; destination City 'Ashley' refers to flights.DestAirport linked to airports.AirportCode where airports.City = 'Ashley ';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T3",
      "ON",
      "T1.SourceAirport",
      "=",
      "T3.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Ashley",
      "''",
      "AND",
      "T3.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t3",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flights fly from Aberdeen to Ashley?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "fly",
      "from",
      "Aberdeen",
      "to",
      "Ashley",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "from Aberdeen refers to flights.SourceAirport corresponding to airports.AirportCode where airports.City = 'Aberdeen '; to Ashley refers to flights.DestAirport corresponding to airports.AirportCode where airports.City = 'Ashley '; how many flights refers to COUNT(*) in the flights table;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T1.Airline",
      "=",
      "T2.uid",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airline",
      "=",
      "t2",
      ".",
      "uid",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "does",
      "airline",
      "'JetBlue",
      "Airways",
      "'",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'JetBlue Airways' refers to airlines.Airline = 'JetBlue Airways'; flights refers to rows in the flights table where flights.Airline matches airlines.uid."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T1.Airline",
      "=",
      "T2.uid",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airline",
      "=",
      "t2",
      ".",
      "uid",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "Give the number of Jetblue Airways flights.",
    "question_toks": [
      "Give",
      "the",
      "number",
      "of",
      "Jetblue",
      "Airways",
      "flights",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Jetblue Airways' refers to airlines.Airline = 'JetBlue Airways'; the number of flights refers to COUNT(*) on the flights table; join flights.Airline = airlines.uid to link the tables."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.DestAirport",
      "=",
      "``",
      "ASY",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "question_toks": [
      "How",
      "many",
      "'United",
      "Airlines",
      "'",
      "flights",
      "go",
      "to",
      "Airport",
      "'ASY",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to airlines.Airline = 'United Airlines'; 'go to Airport ASY' refers to flights.DestAirport = 'ASY'; the relationship between airlines and flights is flights.Airline = airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.DestAirport",
      "=",
      "``",
      "ASY",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "arriving",
      "in",
      "ASY",
      "Airport",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to `airlines`.`Airline = 'United Airlines'`; 'ASY Airport' refers to `airports`.`AirportCode = 'ASY'`; 'flights arriving' refers to `flights`.`DestAirport = 'ASY'`; the relationship between `flights`.`Airline` and `airlines`.`uid` requires a join between the `flights` and `airlines` tables."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "question_toks": [
      "How",
      "many",
      "'United",
      "Airlines",
      "'",
      "flights",
      "depart",
      "from",
      "Airport",
      "'AHD",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to airlines.Airline = 'United Airlines'; 'depart from' refers to flights.SourceAirport; 'AHD' refers to airports.AirportCode = 'AHD';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "leaving",
      "from",
      "AHD",
      "Airport",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to airlines.Airline = 'United Airlines'; 'leaving from AHD Airport' refers to flights.SourceAirport = ' AHD'; the relationship between airlines and flights is established through airlines.uid = flights.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRLINES",
      "AS",
      "T3",
      "ON",
      "T3.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''",
      "AND",
      "T3.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "question_toks": [
      "How",
      "many",
      "United",
      "Airlines",
      "flights",
      "go",
      "to",
      "City",
      "'Aberdeen",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to airlines.Airline = 'United Airlines'; go to refers to flights.DestAirport; City 'Aberdeen' refers to airports.City = 'Aberdeen '; flights.Airline = airlines.uid; flights.DestAirport = airports.AirportCode;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRLINES",
      "AS",
      "T3",
      "ON",
      "T3.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''",
      "AND",
      "T3.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flights",
      "that",
      "arrive",
      "in",
      "Aberdeen",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to airlines.Airline = 'United Airlines'; flights that arrive in Aberdeen refers to flights.DestAirport linking to airports.AirportCode where airports.City = 'Aberdeen '; COUNT is used to count the number of flights;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which city has most number of arriving flights?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "most",
      "number",
      "of",
      "arriving",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "City refers to airports.City; arriving flights refers to flights.DestAirport; most number of arriving flights refers to MAX(COUNT(flights.DestAirport)); join flights.DestAirport with airports.AirportCode to get the corresponding city."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which city has the most frequent destination airport?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "the",
      "most",
      "frequent",
      "destination",
      "airport",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "City refers to `airports`.`City`; most frequent destination airport refers to `MAX(COUNT(flights.DestAirport))`; the relationship is established through `flights.DestAirport = airports.AirportCode`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which city has most number of departing flights?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "most",
      "number",
      "of",
      "departing",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "City refers to airports.City; departing flights refers to COUNT(flights.SourceAirport); most number of refers to MAX(COUNT(flights.SourceAirport)); join flights.SourceAirport with airports.AirportCode."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which city is the most frequent source airport?",
    "question_toks": [
      "Which",
      "city",
      "is",
      "the",
      "most",
      "frequent",
      "source",
      "airport",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "City refers to airports.City; source airport refers to flights.SourceAirport; most frequent source airport refers to MAX(COUNT(flights.SourceAirport)); the relationship between flights.SourceAirport and airports.City is established through airports.AirportCode."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the code of airport that has the highest number of flights?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "airport",
      "that",
      "has",
      "the",
      "highest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Code of airport refers to `airports`.`AirportCode`; highest number of flights refers to `MAX(COUNT(SourceAirport) + COUNT(DestAirport))`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the airport code of the airport with the most flights?",
    "question_toks": [
      "What",
      "is",
      "the",
      "airport",
      "code",
      "of",
      "the",
      "airport",
      "with",
      "the",
      "most",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airport code refers to airports.AirportCode; most flights refers to MAX(COUNT(SourceAirport + DestAirport));"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "What is the code of airport that has fewest number of flights?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "airport",
      "that",
      "has",
      "fewest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Code of airport refers to airports.AirportCode; fewest number of flights refers to MIN(COUNT(SourceAirport) + COUNT(DestAirport)); SourceAirport and DestAirport refer to flights.SourceAirport and flights.DestAirport respectively."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "Give the code of the airport with the least flights.",
    "question_toks": [
      "Give",
      "the",
      "code",
      "of",
      "the",
      "airport",
      "with",
      "the",
      "least",
      "flights",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Code of the airport refers to airports.AirportCode; least flights refers to MIN(COUNT(flights.SourceAirport) + COUNT(flights.DestAirport));"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which airline has most number of flights?",
    "question_toks": [
      "Which",
      "airline",
      "has",
      "most",
      "number",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airline refers to airlines.Airline; most number of flights refers to MAX(COUNT(flights.FlightNo)); flights.Airline corresponds to airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What airline serves the most flights?",
    "question_toks": [
      "What",
      "airline",
      "serves",
      "the",
      "most",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Airline refers to airlines.Airline; serves the most flights refers to MAX(COUNT(flights.FlightNo)); the relationship between airlines and flights is established through airlines.uid = flights.Airline."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Abbreviation",
      ",",
      "T1.Country",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "abbreviation",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "question_toks": [
      "Find",
      "the",
      "abbreviation",
      "and",
      "country",
      "of",
      "the",
      "airline",
      "that",
      "has",
      "fewest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Abbreviation refers to airlines.Abbreviation; Country refers to airlines.Country; fewest number of flights refers to MIN(COUNT(flights.Airline)); flights.Airline corresponds to airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Abbreviation",
      ",",
      "T1.Country",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "abbreviation",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "question_toks": [
      "What",
      "is",
      "the",
      "abbreviation",
      "of",
      "the",
      "airilne",
      "has",
      "the",
      "fewest",
      "flights",
      "and",
      "what",
      "country",
      "is",
      "it",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "abbreviation of the airline refers to airlines.Abbreviation; fewest flights refers to MIN(COUNT(flights.Airline)); country refers to airlines.Country;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "question_toks": [
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "some",
      "flight",
      "departing",
      "from",
      "airport",
      "'AHD",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to airlines.Airline; departing from airport 'AHD' refers to flights.SourceAirport = 'AHD'; the relationship between airlines and flights is flights.Airline = airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Which airlines have a flight with source airport AHD?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "source",
      "airport",
      "AHD",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`airlines`.`Airline` refers to the airline name; source airport AHD refers to `flights`.`SourceAirport = ' AHD'`; the relationship between `airlines` and `flights` is established through `airlines`.`uid = flights`.`Airline`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.DestAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "question_toks": [
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "flights",
      "arriving",
      "at",
      "airport",
      "'AHD",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to airlines.Airline; flights arriving at airport 'AHD' refers to flights.DestAirport = 'AHD'; Airline in flights corresponds to uid in airlines;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.DestAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "Which airlines have a flight with destination airport AHD?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "destination",
      "airport",
      "AHD",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to airlines.Airline; flight with destination airport AHD refers to flights.DestAirport = ' AHD'; the relationship between airlines and flights is flights.Airline = airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "both",
      "airports",
      "'APG",
      "'",
      "and",
      "'CVO",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Flights from both airports 'APG' and 'CVO' refers to flights.SourceAirport = 'APG' AND flights.SourceAirport = 'CVO'; All airlines refers to airlines.Airline, which corresponds to flights.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "departing",
      "flights",
      "from",
      "both",
      "APG",
      "and",
      "CVO",
      "airports",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to airlines.Airline; departing flights refers to flights.SourceAirport; from both APG and CVO airports refers to flights.SourceAirport = 'APG' AND flights.SourceAirport = 'CVO';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''",
      "EXCEPT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "except",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "airport",
      "'CVO",
      "'",
      "but",
      "not",
      "from",
      "'APG",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "'from airport CVO' refers to flights.SourceAirport = 'CVO'; 'but not from APG' refers to excluding airlines where flights.SourceAirport = 'APG'; airlines are identified by airlines.uid corresponding to flights.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''",
      "EXCEPT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "except",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "departures",
      "from",
      "CVO",
      "but",
      "not",
      "from",
      "APG",
      "airports",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "departures from CVO refers to flights.SourceAirport = 'CVO'; not from APG refers to flights.SourceAirport != 'APG'; airlines refers to airlines.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find all airlines that have at least 10 flights.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "at",
      "least",
      "10",
      "flights",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to the `airlines` table; at least 10 flights refers to COUNT(`flights`.`FlightNo`) >= 10; the `flights`.`Airline` column links to the `airlines`.`uid` column."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which airlines have at least 10 flights?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "at",
      "least",
      "10",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to airlines.Airline; at least 10 flights refers to COUNT(flights.FlightNo) >= 10; flights refers to flights table; the link between airlines and flights is flights.Airline = airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "Find all airlines that have fewer than 200 flights.",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "fewer",
      "than",
      "200",
      "flights",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to the airlines table; fewer than 200 flights refers to COUNT(flights.FlightNo) < 200; the relationship between airlines and flights is airlines.uid = flights.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "Which airlines have less than 200 flights?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "less",
      "than",
      "200",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airlines refers to airlines.Airline; less than 200 flights refers to COUNT(*) < 200 in flights; the relationship between airlines and flights is airlines.uid = flights.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T2.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "Airline",
      "``",
      "United",
      "Airlines",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to flights.FlightNo; United Airlines refers to airlines.Airline = 'United Airlines'; the relationship between flights and airlines is flights.Airline = airlines.uid;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T2.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "Which flight numbers correspond to United Airlines flights?",
    "question_toks": [
      "Which",
      "flight",
      "numbers",
      "correspond",
      "to",
      "United",
      "Airlines",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'United Airlines' refers to airlines.Airline = 'United Airlines'; flight numbers refers to flights.FlightNo; the relationship between airlines and flights is airlines.uid = flights.Airline;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "departing",
      "from",
      "Airport",
      "``",
      "APG",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to `flights`.`FlightNo`; departing from Airport 'APG' refers to `flights`.`SourceAirport = 'APG'`;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Give the flight numbers of flights leaving from APG.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "leaving",
      "from",
      "APG",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to FlightNo; leaving from APG refers to SourceAirport = 'APG';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "Airport",
      "``",
      "APG",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to flights.FlightNo; arriving at Airport 'APG' refers to flights.DestAirport = ' APG';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "Give the flight numbers of flights landing at APG.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "landing",
      "at",
      "APG",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refer to flights.FlightNo; landing at APG refers to flights.DestAirport = 'APG';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "departing",
      "from",
      "City",
      "``",
      "Aberdeen",
      "``",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to flights.FlightNo; departing from City 'Aberdeen ' refers to a join between flights.SourceAirport and airports.AirportCode where airports.City = 'Aberdeen ';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Give the flight numbers of flights leaving from Aberdeen.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "leaving",
      "from",
      "Aberdeen",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "FlightNo refers to flights.FlightNo; leaving from Aberdeen refers to flights.SourceAirport = (SELECT airports.AirportCode FROM airports WHERE airports.City = 'Aberdeen ');"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "City",
      "``",
      "Aberdeen",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to flights.FlightNo; arriving at refers to flights.DestAirport; City 'Aberdeen' refers to airports.City = 'Aberdeen '; flights.DestAirport is linked to airports.AirportCode;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Give the flight numbers of flights arriving in Aberdeen.",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "flight numbers refers to `flights`.`FlightNo`; arriving in refers to `flights`.`DestAirport`; Aberdeen refers to `airports`.`City` = 'Aberdeen '; the relationship is established through `flights`.`DestAirport` = `airports`.`AirportCode`."
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Flights",
      "AS",
      "T1",
      "JOIN",
      "Airports",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.city",
      "=",
      "``",
      "Aberdeen",
      "''",
      "OR",
      "T2.city",
      "=",
      "``",
      "Abilene",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "flights",
      "landing",
      "in",
      "the",
      "city",
      "of",
      "Aberdeen",
      "or",
      "Abilene",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Landing in refers to flights.DestAirport; city of Aberdeen or Abilene refers to airports.City IN ('Aberdeen ', 'Abilene '); join flights and airports on flights.DestAirport = airports.AirportCode;"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Flights",
      "AS",
      "T1",
      "JOIN",
      "Airports",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.city",
      "=",
      "``",
      "Aberdeen",
      "''",
      "OR",
      "T2.city",
      "=",
      "``",
      "Abilene",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flights land in Aberdeen or Abilene?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "land",
      "in",
      "Aberdeen",
      "or",
      "Abilene",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Landing in Aberdeen or Abilene refers to flights.DestAirport matching the airport codes where airports.City = 'Aberdeen ' or airports.City = 'Abilene ';"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "Airports",
      "WHERE",
      "AirportCode",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "SourceAirport",
      "FROM",
      "Flights",
      "UNION",
      "SELECT",
      "DestAirport",
      "FROM",
      "Flights",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "not",
      "in",
      "(",
      "select",
      "sourceairport",
      "from",
      "flights",
      "union",
      "select",
      "destairport",
      "from",
      "flights",
      ")"
    ],
    "question": "Find the name of airports which do not have any flight in and out.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "airports",
      "which",
      "do",
      "not",
      "have",
      "any",
      "flight",
      "in",
      "and",
      "out",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ]
                ],
                "conds": []
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        13,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": null,
              "union": null,
              "except": null
            },
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of airports refers to airports.AirportName; do not have any flight in or out refers to airports.AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);"
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "Airports",
      "WHERE",
      "AirportCode",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "SourceAirport",
      "FROM",
      "Flights",
      "UNION",
      "SELECT",
      "DestAirport",
      "FROM",
      "Flights",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "not",
      "in",
      "(",
      "select",
      "sourceairport",
      "from",
      "flights",
      "union",
      "select",
      "destairport",
      "from",
      "flights",
      ")"
    ],
    "question": "Which airports do not have departing or arriving flights?",
    "question_toks": [
      "Which",
      "airports",
      "do",
      "not",
      "have",
      "departing",
      "or",
      "arriving",
      "flights",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ]
                ],
                "conds": []
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        13,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": null,
              "union": null,
              "except": null
            },
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "airports refers to the `airports` table; do not have departing or arriving flights means `AirportCode` not in `flights.SourceAirport` and `AirportCode` not in `flights.DestAirport`."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) FROM employee",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question": "How many employees are there?",
    "question_toks": [
      "How",
      "many",
      "employees",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of employees is determined by counting the unique `Employee_ID` values in the `employee` table."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) FROM employee",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question": "Count the number of employees",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "employees"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of employees refers to counting rows in the `employee` table."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee ORDER BY age",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question": "Sort employee names by their age in ascending order.",
    "question_toks": [
      "Sort",
      "employee",
      "names",
      "by",
      "their",
      "age",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "employee names refer to `employee`.`Name`; age refers to `employee`.`Age`; ascending order refers to order by `employee`.`Age` asc."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee ORDER BY age",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question": "List the names of employees and sort in ascending order of age.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "employees",
      "and",
      "sort",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of employees refers to employee.Name; ascending order of age refers to order by employee.Age asc"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "FROM",
      "employee",
      "GROUP",
      "BY",
      "city"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "from",
      "employee",
      "group",
      "by",
      "city"
    ],
    "question": "What is the number of employees from each city?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "employees",
      "from",
      "each",
      "city",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Group by `employee`.`City`; COUNT(`employee`.`Employee_ID`) as the number of employees."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "FROM",
      "employee",
      "GROUP",
      "BY",
      "city"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "from",
      "employee",
      "group",
      "by",
      "city"
    ],
    "question": "Count the number of employees for each city.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "employees",
      "for",
      "each",
      "city",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of employees refers to COUNT(Employee_ID); for each city refers to GROUP BY City;"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "city",
      "FROM",
      "employee",
      "WHERE",
      "age",
      "<",
      "30",
      "GROUP",
      "BY",
      "city",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      "from",
      "employee",
      "where",
      "age",
      "<",
      "value",
      "group",
      "by",
      "city",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which cities do more than one employee under age 30 come from?",
    "question_toks": [
      "Which",
      "cities",
      "do",
      "more",
      "than",
      "one",
      "employee",
      "under",
      "age",
      "30",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "under age 30 refers to `employee`.`Age` < 30; more than one employee refers to grouping by `employee`.`City` with a condition COUNT(*) > 1."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "city",
      "FROM",
      "employee",
      "WHERE",
      "age",
      "<",
      "30",
      "GROUP",
      "BY",
      "city",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      "from",
      "employee",
      "where",
      "age",
      "<",
      "value",
      "group",
      "by",
      "city",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the cities that have more than one employee under age 30.",
    "question_toks": [
      "Find",
      "the",
      "cities",
      "that",
      "have",
      "more",
      "than",
      "one",
      "employee",
      "under",
      "age",
      "30",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Age < 30 and COUNT(*) > 1"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "LOCATION",
      "FROM",
      "shop",
      "GROUP",
      "BY",
      "LOCATION"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "location",
      "from",
      "shop",
      "group",
      "by",
      "location"
    ],
    "question": "Find the number of shops in each location.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "shops",
      "in",
      "each",
      "location",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of shops refers to COUNT(Shop_ID); each location refers to GROUP BY Location."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "LOCATION",
      "FROM",
      "shop",
      "GROUP",
      "BY",
      "LOCATION"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "location",
      "from",
      "shop",
      "group",
      "by",
      "location"
    ],
    "question": "How many shops are there in each location?",
    "question_toks": [
      "How",
      "many",
      "shops",
      "are",
      "there",
      "in",
      "each",
      "location",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "COUNT(shop.Shop_ID) grouped by shop.Location"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "question_toks": [
      "Find",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "whose",
      "number",
      "of",
      "products",
      "is",
      "the",
      "largest",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest number of products refers to MAX(Number_products); manager name = Manager_name; district = District."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "question_toks": [
      "What",
      "are",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "shop",
      "that",
      "sells",
      "the",
      "largest",
      "number",
      "of",
      "products",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Manager name refers to shop.Manager_name; District refers to shop.District; Largest number of products refers to MAX(shop.Number_products)"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question": "find the minimum and maximum number of products of all stores.",
    "question_toks": [
      "find",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "of",
      "all",
      "stores",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The task involves finding the minimum and maximum values of the column `Number_products` in the table `shop`."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question": "What are the minimum and maximum number of products across all the shops?",
    "question_toks": [
      "What",
      "are",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "across",
      "all",
      "the",
      "shops",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Number of products' refers to the column `shop`.`Number_products`; 'minimum' refers to MIN(Number_products); 'maximum' refers to MAX(Number_products)."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question": "Return the name, location and district of all shops in descending order of number of products.",
    "question_toks": [
      "Return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "all",
      "shops",
      "in",
      "descending",
      "order",
      "of",
      "number",
      "of",
      "products",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to shop.Name; location refers to shop.Location; district refers to shop.District; descending order of number of products refers to ORDER BY shop.Number_products DESC;"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "question_toks": [
      "Sort",
      "all",
      "the",
      "shops",
      "by",
      "number",
      "products",
      "in",
      "descending",
      "order",
      ",",
      "and",
      "return",
      "the",
      "name",
      ",",
      "location",
      "and",
      "district",
      "of",
      "each",
      "shop",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`name` refers to `shop`.`Name`; `location` refers to `shop`.`Location`; `district` refers to `shop`.`District`; `number products` refers to `shop`.`Number_products`; sort by `shop`.`Number_products` in descending order."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "number_products",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "number_products",
      ")",
      "FROM",
      "shop",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "number_products",
      ")",
      "from",
      "shop",
      ")"
    ],
    "question": "Find the names of stores whose number products is more than the average number of products.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "stores",
      "whose",
      "number",
      "products",
      "is",
      "more",
      "than",
      "the",
      "average",
      "number",
      "of",
      "products",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of stores refers to shop.Name; number of products more than the average refers to shop.Number_products > AVG(shop.Number_products);"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "number_products",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "number_products",
      ")",
      "FROM",
      "shop",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "number_products",
      ")",
      "from",
      "shop",
      ")"
    ],
    "question": "Which shops' number products is above the average? Give me the shop names.",
    "question_toks": [
      "Which",
      "shops",
      "'",
      "number",
      "products",
      "is",
      "above",
      "the",
      "average",
      "?",
      "Give",
      "me",
      "the",
      "shop",
      "names",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "shops' number products refers to shop.Number_products; above the average refers to AVG(Number_products); shop names refers to shop.Name"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "GROUP",
      "BY",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "group",
      "by",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "question_toks": [
      "find",
      "the",
      "name",
      "of",
      "employee",
      "who",
      "was",
      "awarded",
      "the",
      "most",
      "times",
      "in",
      "the",
      "evaluation",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Awarded the most times refers to MAX(COUNT(evaluation.Year_awarded)); Name of employee refers to employee.Name; Join evaluation and employee on evaluation.Employee_ID = employee.Employee_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "GROUP",
      "BY",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "group",
      "by",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "question_toks": [
      "Which",
      "employee",
      "received",
      "the",
      "most",
      "awards",
      "in",
      "evaluations",
      "?",
      "Give",
      "me",
      "the",
      "employee",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most awards in evaluations refers to MAX(COUNT(Year_awarded)) grouped by evaluation.Employee_ID; employee name refers to employee.Name; join evaluation and employee tables on evaluation.Employee_ID = employee.Employee_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "t2.bonus",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "t2",
      ".",
      "bonus",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name of the employee who got the highest one time bonus.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "employee",
      "who",
      "got",
      "the",
      "highest",
      "one",
      "time",
      "bonus",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the employee = employee.Name; highest one-time bonus refers to MAX(evaluation.Bonus); relationship between evaluation and employee is evaluation.Employee_ID = employee.Employee_ID."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "t2.bonus",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "t2",
      ".",
      "bonus",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which employee received the biggest bonus? Give me the employee name.",
    "question_toks": [
      "Which",
      "employee",
      "received",
      "the",
      "biggest",
      "bonus",
      "?",
      "Give",
      "me",
      "the",
      "employee",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Biggest bonus refers to MAX(evaluation.Bonus); Employee name refers to employee.Name; evaluation and employee tables are joined using evaluation.Employee_ID = employee.Employee_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "WHERE",
      "Employee_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Employee_ID",
      "FROM",
      "evaluation",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "where",
      "employee_id",
      "not",
      "in",
      "(",
      "select",
      "employee_id",
      "from",
      "evaluation",
      ")"
    ],
    "question": "Find the names of employees who never won any award in the evaluation.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "employees",
      "who",
      "never",
      "won",
      "any",
      "award",
      "in",
      "the",
      "evaluation",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      15,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of employees refers to employee.Name; never won any award in the evaluation means employee.Employee_ID not in evaluation.Employee_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "WHERE",
      "Employee_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Employee_ID",
      "FROM",
      "evaluation",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "where",
      "employee_id",
      "not",
      "in",
      "(",
      "select",
      "employee_id",
      "from",
      "evaluation",
      ")"
    ],
    "question": "What are the names of the employees who never received any evaluation?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "employees",
      "who",
      "never",
      "received",
      "any",
      "evaluation",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      15,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of employees refers to employee.Name; never received any evaluation refers to employee.Employee_ID NOT IN evaluation.Employee_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t1.shop_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t1",
      ".",
      "shop_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the shop that is hiring the largest number of employees?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "shop",
      "that",
      "is",
      "hiring",
      "the",
      "largest",
      "number",
      "of",
      "employees",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the shop refers to shop.Name; hiring the largest number of employees refers to COUNT(hiring.Employee_ID) grouped by hiring.Shop_ID and finding the MAX; the relationship between shop and hiring is through shop.Shop_ID = hiring.Shop_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t1.shop_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t1",
      ".",
      "shop_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which shop has the most employees? Give me the shop name.",
    "question_toks": [
      "Which",
      "shop",
      "has",
      "the",
      "most",
      "employees",
      "?",
      "Give",
      "me",
      "the",
      "shop",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most employees refers to MAX(COUNT(hiring.Employee_ID)); shop name refers to shop.Name; hiring.Shop_ID links to shop.Shop_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "shop_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "shop_id",
      "FROM",
      "hiring",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "shop_id",
      "not",
      "in",
      "(",
      "select",
      "shop_id",
      "from",
      "hiring",
      ")"
    ],
    "question": "Find the name of the shops that do not hire any employee.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "shops",
      "that",
      "do",
      "not",
      "hire",
      "any",
      "employee",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of shops refers to shop.Name; do not hire any employee refers to shop.Shop_ID not in hiring.Shop_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "shop_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "shop_id",
      "FROM",
      "hiring",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "shop_id",
      "not",
      "in",
      "(",
      "select",
      "shop_id",
      "from",
      "hiring",
      ")"
    ],
    "question": "Which shops run with no employees? Find the shop names",
    "question_toks": [
      "Which",
      "shops",
      "run",
      "with",
      "no",
      "employees",
      "?",
      "Find",
      "the",
      "shop",
      "names"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Shops are represented in the `shop` table; shop names are in the `shop`.`Name` column; shops with no employees are those whose `Shop_ID` is not present in the `hiring`.`Shop_ID` column."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t2.name"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "employees",
      "hired",
      "in",
      "each",
      "shop",
      ";",
      "show",
      "the",
      "shop",
      "name",
      "as",
      "well",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of employees hired in each shop refers to COUNT(hiring.Employee_ID); show the shop name refers to shop.Name; join condition is hiring.Shop_ID = shop.Shop_ID; group by hiring.Shop_ID"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t2.name"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "question_toks": [
      "For",
      "each",
      "shop",
      ",",
      "return",
      "the",
      "number",
      "of",
      "employees",
      "working",
      "there",
      "and",
      "the",
      "name",
      "of",
      "the",
      "shop",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of employees working there refers to count(hiring.Employee_ID); Name of the shop refers to shop.Name; the relationship between hiring and shop is established via hiring.Shop_ID = shop.Shop_ID; group by hiring.Shop_ID to get the number of employees per shop."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT sum(bonus) FROM evaluation",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question": "What is total bonus given in all evaluations?",
    "question_toks": [
      "What",
      "is",
      "total",
      "bonus",
      "given",
      "in",
      "all",
      "evaluations",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total bonus refers to SUM(evaluation.Bonus); all evaluations refers to all rows in the evaluation table."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT sum(bonus) FROM evaluation",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question": "Find the total amount of bonus given in all the evaluations.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "amount",
      "of",
      "bonus",
      "given",
      "in",
      "all",
      "the",
      "evaluations",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total amount of bonus refers to sum(evaluation.Bonus)"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT * FROM hiring",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question": "Give me all the information about hiring.",
    "question_toks": [
      "Give",
      "me",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "all the information about hiring refers to selecting all columns (*) from the hiring table"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT * FROM hiring",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question": "What is all the information about hiring?",
    "question_toks": [
      "What",
      "is",
      "all",
      "the",
      "information",
      "about",
      "hiring",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "All information about hiring refers to all columns in the `hiring` table: `hiring.Shop_ID`, `hiring.Employee_ID`, `hiring.Start_from`, `hiring.Is_full_time`."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "query_toks": [
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      "<",
      "3000",
      "INTERSECT",
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      ">",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "value",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "value"
    ],
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "question_toks": [
      "Which",
      "district",
      "has",
      "both",
      "stores",
      "with",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "stores",
      "with",
      "more",
      "than",
      "10000",
      "products",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Districts with both conditions refer to GroupBy(shop.District) having COUNT(shop.Number_products < 3000) > 0 and COUNT(shop.Number_products > 10000) > 0."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "query_toks": [
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      "<",
      "3000",
      "INTERSECT",
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      ">",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "value",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "value"
    ],
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "question_toks": [
      "Find",
      "the",
      "districts",
      "in",
      "which",
      "there",
      "are",
      "both",
      "shops",
      "selling",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "shops",
      "selling",
      "more",
      "than",
      "10000",
      "products",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "less than 3000 products refers to shop.Number_products < 3000; more than 10000 products refers to shop.Number_products > 10000; districts where both conditions are satisfied can be identified by grouping by shop.District and applying a filter to ensure both conditions are met."
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question": "How many different store locations are there?",
    "question_toks": [
      "How",
      "many",
      "different",
      "store",
      "locations",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different store locations refers to Count(DISTINCT shop.Location)"
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question": "Count the number of distinct store locations.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "distinct",
      "store",
      "locations",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct store locations refers to COUNT(DISTINCT shop.Location)"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question": "How many documents do we have?",
    "question_toks": [
      "How",
      "many",
      "documents",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "documents refer to rows in the `Documents` table; total number of documents can be determined by counting `Documents.Document_ID`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question": "Count the number of documents.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of documents refers to COUNT(Documents.Document_ID)."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question": "List document IDs, document names, and document descriptions for all documents.",
    "question_toks": [
      "List",
      "document",
      "IDs",
      ",",
      "document",
      "names",
      ",",
      "and",
      "document",
      "descriptions",
      "for",
      "all",
      "documents",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "document IDs, document names, and document descriptions refer to Documents.Document_ID, Documents.Document_Name, and Documents.Document_Description respectively; retrieve all rows from the Documents table."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question": "What are the ids, names, and descriptions for all documents?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "names",
      ",",
      "and",
      "descriptions",
      "for",
      "all",
      "documents",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids, names, and descriptions for all documents refer to Document_ID, Document_Name, and Document_Description in the Documents table."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "query_toks": [
      "SELECT",
      "document_name",
      ",",
      "template_id",
      "FROM",
      "Documents",
      "WHERE",
      "Document_Description",
      "LIKE",
      "``",
      "%",
      "w",
      "%",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_name",
      ",",
      "template_id",
      "from",
      "documents",
      "where",
      "document_description",
      "like",
      "value"
    ],
    "question": "What is the document name and template id for document with description with the letter 'w' in it?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "name",
      "and",
      "template",
      "id",
      "for",
      "document",
      "with",
      "description",
      "with",
      "the",
      "letter",
      "'w",
      "'",
      "in",
      "it",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"%w%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "document name refers to Documents.Document_Name; template id refers to Documents.Template_ID; description with the letter 'w' refers to Documents.Document_Description LIKE '%w%'."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "query_toks": [
      "SELECT",
      "document_name",
      ",",
      "template_id",
      "FROM",
      "Documents",
      "WHERE",
      "Document_Description",
      "LIKE",
      "``",
      "%",
      "w",
      "%",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_name",
      ",",
      "template_id",
      "from",
      "documents",
      "where",
      "document_description",
      "like",
      "value"
    ],
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "template",
      "ids",
      "for",
      "documents",
      "that",
      "contain",
      "the",
      "letter",
      "w",
      "in",
      "their",
      "description",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"%w%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names refer to Document_Name; Template IDs refer to Template_ID; contain the letter w in their description refers to Document_Description LIKE '%w%';"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "template_id",
      ",",
      "Document_Description",
      "FROM",
      "Documents",
      "WHERE",
      "document_name",
      "=",
      "``",
      "Robbin",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "value"
    ],
    "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "id",
      ",",
      "template",
      "id",
      "and",
      "description",
      "for",
      "document",
      "named",
      "``",
      "Robbin",
      "CV",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"document named 'Robbin CV'\" refers to Documents.Document_Name = 'Robbin CV'; required columns are Documents.Document_ID, Documents.Template_ID, and Documents.Document_Description"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "template_id",
      ",",
      "Document_Description",
      "FROM",
      "Documents",
      "WHERE",
      "document_name",
      "=",
      "``",
      "Robbin",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "value"
    ],
    "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "question_toks": [
      "Return",
      "the",
      "document",
      "id",
      ",",
      "template",
      "id",
      ",",
      "and",
      "description",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "Robbin",
      "CV",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Robbin CV' refers to Documents.Document_Name = 'Robbin CV'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question": "How many different templates do all document use?",
    "question_toks": [
      "How",
      "many",
      "different",
      "templates",
      "do",
      "all",
      "document",
      "use",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different templates refer to distinct Template_ID; all documents use refers to Documents.Template_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question": "Count the number of different templates used for documents.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "templates",
      "used",
      "for",
      "documents",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'different templates' refers to DISTINCT Template_ID; 'used for documents' refers to Documents.Template_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.Template_ID",
      "=",
      "T2.Template_ID",
      "WHERE",
      "T2.Template_Type_Code",
      "=",
      "'PPT",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "How many documents are using the template with type code 'PPT'?",
    "question_toks": [
      "How",
      "many",
      "documents",
      "are",
      "using",
      "the",
      "template",
      "with",
      "type",
      "code",
      "'PPT",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "documents refers to Documents.Document_ID; template refers to Templates.Template_ID; type code 'PPT' refers to Templates.Template_Type_Code = 'PPT'; Documents.Template_ID references Templates.Template_ID;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.Template_ID",
      "=",
      "T2.Template_ID",
      "WHERE",
      "T2.Template_Type_Code",
      "=",
      "'PPT",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Count the number of documents that use the PPT template type.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "that",
      "use",
      "the",
      "PPT",
      "template",
      "type",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'PPT' refers to Template_Type_Code = 'PPT' in the Templates table; documents refers to COUNT(Documents.Document_ID)"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "group",
      "by",
      "template_id"
    ],
    "question": "Show all template ids and number of documents using each template.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "ids",
      "and",
      "number",
      "of",
      "documents",
      "using",
      "each",
      "template",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template ids refer to Templates.Template_ID; number of documents refers to count(Documents.Document_ID); relationship is Documents.Template_ID = Templates.Template_ID;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "group",
      "by",
      "template_id"
    ],
    "question": "What are all different template ids used for documents, and how many times were each of them used?",
    "question_toks": [
      "What",
      "are",
      "all",
      "different",
      "template",
      "ids",
      "used",
      "for",
      "documents",
      ",",
      "and",
      "how",
      "many",
      "times",
      "were",
      "each",
      "of",
      "them",
      "used",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "All different template ids refer to DISTINCT Documents.Template_ID; how many times were each of them used refers to COUNT(Documents.Template_ID) GROUP BY Documents.Template_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_id",
      ",",
      "T2.Template_Type_Code",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_id",
      ",",
      "t2",
      ".",
      "template_type_code",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the id and type code for the template used by the most documents?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "and",
      "type",
      "code",
      "for",
      "the",
      "template",
      "used",
      "by",
      "the",
      "most",
      "documents",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to Templates.Template_ID; type code refers to Templates.Template_Type_Code; most documents refers to MAX(COUNT(Documents.Template_ID)) grouped by Documents.Template_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_id",
      ",",
      "T2.Template_Type_Code",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_id",
      ",",
      "t2",
      ".",
      "template_type_code",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "question_toks": [
      "Return",
      "the",
      "id",
      "and",
      "type",
      "code",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "for",
      "the",
      "greatest",
      "number",
      "of",
      "documents",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to Templates.Template_ID; type code refers to Templates.Template_Type_Code; used for the greatest number of documents refers to MAX(COUNT(Documents.Template_ID)); join Documents and Templates on Documents.Template_ID = Templates.Template_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "documents",
      "group",
      "by",
      "template_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show ids for all templates that are used by more than one document.",
    "question_toks": [
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "that",
      "are",
      "used",
      "by",
      "more",
      "than",
      "one",
      "document",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids for all templates refers to Templates.Template_ID; used by more than one document refers to count(Documents.Template_ID) > 1;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "documents",
      "group",
      "by",
      "template_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the template ids of any templates used in more than a single document?",
    "question_toks": [
      "What",
      "are",
      "the",
      "template",
      "ids",
      "of",
      "any",
      "templates",
      "used",
      "in",
      "more",
      "than",
      "a",
      "single",
      "document",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template ids refers to `Templates`.`Template_ID`; used in more than a single document refers to count(`Documents`.`Template_ID`) > 1."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question": "Show ids for all templates not used by any document.",
    "question_toks": [
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "'ids for all templates' refers to `Templates`.`Template_ID`; 'not used by any document' means `Template_ID` in `Templates` that is not present in `Documents`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question": "What are the ids for templates that are not used in any documents?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "for",
      "templates",
      "that",
      "are",
      "not",
      "used",
      "in",
      "any",
      "documents",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "ids for templates refers to Templates.Template_ID; not used in any documents refers to Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents)"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question": "How many templates do we have?",
    "question_toks": [
      "How",
      "many",
      "templates",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of templates refers to the count of rows in the Templates table."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question": "Count the number of templates.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "templates refer to `Templates`.`Template_ID`"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "Show template ids, version numbers, and template type codes for all templates.",
    "question_toks": [
      "Show",
      "template",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template ids refer to `Templates`.`Template_ID`; version numbers refer to `Templates`.`Version_Number`; template type codes refer to `Templates`.`Template_Type_Code`; all templates means no filtering condition is applied."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "What are the ids, version numbers, and type codes for each template?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "type",
      "codes",
      "for",
      "each",
      "template",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids refers to Templates.Template_ID; version numbers refers to Templates.Version_Number; type codes refers to Templates.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "Show all distinct template type codes for all templates.",
    "question_toks": [
      "Show",
      "all",
      "distinct",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type codes refer to Templates.Template_Type_Code; distinct indicates retrieving unique values."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "What are the different template type codes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different template type codes refers to DISTINCT values of Ref_Template_Types.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "PP",
      "''",
      "OR",
      "template_type_code",
      "=",
      "``",
      "PPT",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value",
      "or",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "What are the ids of templates with template type code PP or PPT?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "templates",
      "with",
      "template",
      "type",
      "code",
      "PP",
      "or",
      "PPT",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type code PP or PPT refers to Templates.Template_Type_Code IN ('PP', 'PPT'); ids of templates refers to Templates.Template_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "PP",
      "''",
      "OR",
      "template_type_code",
      "=",
      "``",
      "PPT",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value",
      "or",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Return the ids of templates that have the code PP or PPT.",
    "question_toks": [
      "Return",
      "the",
      "ids",
      "of",
      "templates",
      "that",
      "have",
      "the",
      "code",
      "PP",
      "or",
      "PPT",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids of templates refer to Templates.Template_ID; code PP or PPT refers to Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "How many templates have template type code CV?",
    "question_toks": [
      "How",
      "many",
      "templates",
      "have",
      "template",
      "type",
      "code",
      "CV",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "templates refer to Templates; template type code CV refers to Templates.Template_Type_Code = 'CV';"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Count the number of templates of the type CV.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "of",
      "the",
      "type",
      "CV",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "templates of the type CV refers to Templates.Template_Type_Code = 'CV';"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "query_toks": [
      "SELECT",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates",
      "WHERE",
      "version_number",
      ">",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "value"
    ],
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "question_toks": [
      "What",
      "is",
      "the",
      "version",
      "number",
      "and",
      "template",
      "type",
      "code",
      "for",
      "the",
      "template",
      "with",
      "version",
      "number",
      "later",
      "than",
      "5",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "version number refers to Templates.Version_Number; template type code refers to Templates.Template_Type_Code; Templates.Version_Number > 5;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "query_toks": [
      "SELECT",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates",
      "WHERE",
      "version_number",
      ">",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "value"
    ],
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "question_toks": [
      "Return",
      "the",
      "version",
      "numbers",
      "and",
      "template",
      "type",
      "codes",
      "of",
      "templates",
      "with",
      "a",
      "version",
      "number",
      "greater",
      "than",
      "5",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "version numbers greater than 5 refers to Templates.Version_Number > 5; template type codes refers to Templates.Template_Type_Code"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code"
    ],
    "question": "Show all template type codes and number of templates for each.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "number",
      "of",
      "templates",
      "for",
      "each",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type codes refer to Templates.Template_Type_Code; number of templates for each refers to COUNT(Templates.Template_ID) grouped by Templates.Template_Type_Code"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code"
    ],
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      ",",
      "and",
      "how",
      "many",
      "templates",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different template type codes refers to Ref_Template_Types.Template_Type_Code; how many templates correspond to each refers to COUNT(Templates.Template_ID) grouped by Templates.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which template type code has most number of templates?",
    "question_toks": [
      "Which",
      "template",
      "type",
      "code",
      "has",
      "most",
      "number",
      "of",
      "templates",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Template_Type_Code refers to Templates.Template_Type_Code; most number of templates refers to MAX(COUNT(Template_ID)) grouped by Templates.Template_Type_Code."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the type code of the template type that the most templates belong to.",
    "question_toks": [
      "Return",
      "the",
      "type",
      "code",
      "of",
      "the",
      "template",
      "type",
      "that",
      "the",
      "most",
      "templates",
      "belong",
      "to",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "type code of the template type refers to `Templates`.`Template_Type_Code`; the most templates belong to refers to `MAX(COUNT(Templates.Template_ID))` grouped by `Templates`.`Template_Type_Code`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "Show all template type codes with less than three templates.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "with",
      "less",
      "than",
      "three",
      "templates",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type codes with less than three templates refer to `Ref_Template_Types`.`Template_Type_Code` where the count of `Templates`.`Template_ID` grouped by `Templates`.`Template_Type_Code` is less than 3."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "What are the codes of template types that have fewer than 3 templates?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "template",
      "types",
      "that",
      "have",
      "fewer",
      "than",
      "3",
      "templates",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "codes of template types refers to Ref_Template_Types.Template_Type_Code; fewer than 3 templates refers to COUNT(Templates.Template_ID) < 3; join Ref_Template_Types and Templates on Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Version_Number",
      ")",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "version_number",
      ")",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "What the smallest version number and its template type code?",
    "question_toks": [
      "What",
      "the",
      "smallest",
      "version",
      "number",
      "and",
      "its",
      "template",
      "type",
      "code",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "smallest version number refers to MIN(Templates.Version_Number); template type code refers to Templates.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Version_Number",
      ")",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "version_number",
      ")",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "question_toks": [
      "Return",
      "the",
      "lowest",
      "version",
      "number",
      ",",
      "along",
      "with",
      "its",
      "corresponding",
      "template",
      "type",
      "code",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "lowest version number refers to MIN(Version_Number); corresponding template type code refers to Template_Type_Code; both columns are in the Templates table."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Data",
      "base",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "What is the template type code of the template used by document with the name \"Data base\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "used",
      "by",
      "document",
      "with",
      "the",
      "name",
      "``",
      "Data",
      "base",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "document with the name \"Data base\" refers to Documents.Document_Name = 'Data base'; template type code refers to Templates.Template_Type_Code"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Data",
      "base",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Return the template type code of the template that is used by a document named Data base.",
    "question_toks": [
      "Return",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "by",
      "a",
      "document",
      "named",
      "Data",
      "base",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type code refers to Templates.Template_Type_Code; document name refers to Documents.Document_Name; Document_Name = 'Data base'; relationship between Documents and Templates is through Template_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "query_toks": [
      "SELECT",
      "T2.document_name",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T1.template_type_code",
      "=",
      "``",
      "BK",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t1",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Show all document names using templates with template type code BK.",
    "question_toks": [
      "Show",
      "all",
      "document",
      "names",
      "using",
      "templates",
      "with",
      "template",
      "type",
      "code",
      "BK",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "document names refers to Documents.Document_Name; template type code BK refers to Templates.Template_Type_Code = 'BK'; Documents is linked to Templates via Template_ID;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "query_toks": [
      "SELECT",
      "T2.document_name",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T1.template_type_code",
      "=",
      "``",
      "BK",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t1",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "What are the names of documents that use templates with the code BK?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "documents",
      "that",
      "use",
      "templates",
      "with",
      "the",
      "code",
      "BK",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "templates with the code BK refers to Templates.Template_Type_Code = 'BK'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code"
    ],
    "question": "Show all template type codes and the number of documents using each type.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "documents",
      "using",
      "each",
      "type",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type codes refers to Templates.Template_Type_Code; number of documents refers to count(Documents.Document_ID); relationship: Documents.Template_ID = Templates.Template_ID; group by Templates.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code"
    ],
    "question": "What are the different template type codes, and how many documents use each type?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      ",",
      "and",
      "how",
      "many",
      "documents",
      "use",
      "each",
      "type",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different template type codes refer to Ref_Template_Types.Template_Type_Code; how many documents use each type refers to counting Documents.Document_ID grouped by Templates.Template_Type_Code; the relationship is Documents.Template_ID = Templates.Template_ID and Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which template type code is used by most number of documents?",
    "question_toks": [
      "Which",
      "template",
      "type",
      "code",
      "is",
      "used",
      "by",
      "most",
      "number",
      "of",
      "documents",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Template type code refers to Templates.Template_Type_Code; most number of documents refers to max(count(Documents.Document_ID)) grouped by Templates.Template_Type_Code;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the code of the template type that is most commonly used in documents.",
    "question_toks": [
      "Return",
      "the",
      "code",
      "of",
      "the",
      "template",
      "type",
      "that",
      "is",
      "most",
      "commonly",
      "used",
      "in",
      "documents",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Code of the template type refers to Template_Type_Code; most commonly used in documents refers to max(count(Template_ID)); join Documents, Templates, and Ref_Template_Types to link Template_ID to Template_Type_Code."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id"
    ],
    "question": "Show all template type codes that are not used by any document.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "that",
      "are",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Template type codes refers to Ref_Template_Types.Template_Type_Code; not used by any document refers to Template_Type_Code values in Ref_Template_Types that do not have a corresponding Template_ID in Documents through Templates.Template_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id"
    ],
    "question": "What are the codes of template types that are not used for any document?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "template",
      "types",
      "that",
      "are",
      "not",
      "used",
      "for",
      "any",
      "document",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "`Template_Type_Code` values in `Ref_Template_Types` that are not linked to any `Document_ID` through `Templates`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question": "Show all template type codes and descriptions.",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "descriptions",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type codes refer to Ref_Template_Types.Template_Type_Code; descriptions refer to Ref_Template_Types.Template_Type_Description;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question": "What are the type codes and descriptions for all template types?",
    "question_toks": [
      "What",
      "are",
      "the",
      "type",
      "codes",
      "and",
      "descriptions",
      "for",
      "all",
      "template",
      "types",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "type codes refer to `Ref_Template_Types.Template_Type_Code`; descriptions refer to `Ref_Template_Types.Template_Type_Description`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "query_toks": [
      "SELECT",
      "template_type_description",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "AD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "What is the template type descriptions for template type code \"AD\".",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "descriptions",
      "for",
      "template",
      "type",
      "code",
      "``",
      "AD",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type descriptions refers to Ref_Template_Types.Template_Type_Description; template type code 'AD' refers to Ref_Template_Types.Template_Type_Code = 'AD'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "query_toks": [
      "SELECT",
      "template_type_description",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "AD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Return the template type description of the template type with the code AD.",
    "question_toks": [
      "Return",
      "the",
      "template",
      "type",
      "description",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "code",
      "AD",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Template type description refers to Ref_Template_Types.Template_Type_Description; template type with the code AD refers to Ref_Template_Types.Template_Type_Code = 'AD'."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_description",
      "=",
      "``",
      "Book",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "What is the template type code for template type description \"Book\".",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "for",
      "template",
      "type",
      "description",
      "``",
      "Book",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "template type description 'Book' refers to Ref_Template_Types.Template_Type_Description = 'Book'; retrieve Ref_Template_Types.Template_Type_Code"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_description",
      "=",
      "``",
      "Book",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "Return the type code of the template type with the description \"Book\".",
    "question_toks": [
      "Return",
      "the",
      "type",
      "code",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "description",
      "``",
      "Book",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "description 'Book' refers to Ref_Template_Types.Template_Type_Description = 'Book'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.template_type_description",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "JOIN",
      "Documents",
      "AS",
      "T3",
      "ON",
      "T2.Template_ID",
      "=",
      "T3.template_ID"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "template_id",
      "=",
      "t3",
      ".",
      "template_id"
    ],
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "template",
      "type",
      "descriptions",
      "for",
      "the",
      "templates",
      "ever",
      "used",
      "by",
      "any",
      "document",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Distinct template type descriptions refer to Ref_Template_Types.Template_Type_Description; templates ever used by any document involve joining Documents.Template_ID = Templates.Template_ID and Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.template_type_description",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "JOIN",
      "Documents",
      "AS",
      "T3",
      "ON",
      "T2.Template_ID",
      "=",
      "T3.template_ID"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "template_id",
      "=",
      "t3",
      ".",
      "template_id"
    ],
    "question": "Return the different descriptions for templates that have been used in a document.",
    "question_toks": [
      "Return",
      "the",
      "different",
      "descriptions",
      "for",
      "templates",
      "that",
      "have",
      "been",
      "used",
      "in",
      "a",
      "document",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Template_Type_Description refers to Ref_Template_Types.Template_Type_Description; templates used in a document refers to joining Documents.Template_ID with Templates.Template_ID and Templates.Template_Type_Code with Ref_Template_Types.Template_Type_Code; use DISTINCT to get unique descriptions."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "query_toks": [
      "SELECT",
      "T2.template_id",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "WHERE",
      "T1.template_type_description",
      "=",
      "``",
      "Presentation",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "where",
      "t1",
      ".",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "What are the template ids with template type description \"Presentation\".",
    "question_toks": [
      "What",
      "are",
      "the",
      "template",
      "ids",
      "with",
      "template",
      "type",
      "description",
      "``",
      "Presentation",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"template type description 'Presentation'\" refers to Ref_Template_Types.Template_Type_Description = 'Presentation'; \"template ids\" refers to Templates.Template_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "query_toks": [
      "SELECT",
      "T2.template_id",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "WHERE",
      "T1.template_type_description",
      "=",
      "``",
      "Presentation",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "where",
      "t1",
      ".",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "question_toks": [
      "Return",
      "the",
      "ids",
      "corresponding",
      "to",
      "templates",
      "with",
      "the",
      "description",
      "'Presentation",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Presentation' refers to Ref_Template_Types.Template_Type_Description = 'Presentation'; ids corresponds to Templates.Template_ID; the relationship is Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question": "How many paragraphs in total?",
    "question_toks": [
      "How",
      "many",
      "paragraphs",
      "in",
      "total",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total paragraphs refers to count(Paragraphs.Paragraph_ID)"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question": "Count the number of paragraphs.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of paragraphs refers to count(Paragraphs.Paragraph_ID)."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_ID",
      "=",
      "T2.document_ID",
      "WHERE",
      "T2.document_name",
      "=",
      "'Summer",
      "Show",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "question_toks": [
      "How",
      "many",
      "paragraphs",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'Summer",
      "Show",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Summer Show' refers to Documents.Document_Name = 'Summer Show'; number of paragraphs refers to count(Paragraphs.Paragraph_ID)"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_ID",
      "=",
      "T2.document_ID",
      "WHERE",
      "T2.document_name",
      "=",
      "'Summer",
      "Show",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "named",
      "'Summer",
      "Show",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Summer Show' refers to Documents.Document_Name = 'Summer Show'; count of paragraphs refers to the number of rows in Paragraphs where Paragraphs.Document_ID matches Documents.Document_ID for the document named 'Summer Show'."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "select other_details from paragraphs where paragraph_text like 'korea'",
    "query_toks": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "like",
      "\"korea\""
    ],
    "query_toks_no_value": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "like",
      "value"
    ],
    "question": "Show paragraph details for paragraph with text 'Korea ' .",
    "question_toks": [
      "Show",
      "paragraph",
      "details",
      "for",
      "paragraph",
      "with",
      "text",
      "'Korea",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"korea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'paragraph details' refers to all columns in the Paragraphs table; 'text Korea' refers to Paragraphs.Paragraph_Text = 'Korea'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "select other_details from paragraphs where paragraph_text like 'korea'",
    "query_toks": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "like",
      "\"korea\""
    ],
    "query_toks_no_value": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "like",
      "value"
    ],
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "details",
      "for",
      "the",
      "paragraph",
      "that",
      "includes",
      "the",
      "text",
      "'Korea",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"korea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "details for the paragraph refers to all columns in Paragraphs; includes the text 'Korea' refers to Paragraphs.Paragraph_Text LIKE '%Korea%'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "query_toks": [
      "SELECT",
      "T1.paragraph_id",
      ",",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.Document_Name",
      "=",
      "'Welcome",
      "to",
      "NY",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_id",
      ",",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "question_toks": [
      "Show",
      "all",
      "paragraph",
      "ids",
      "and",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'Welcome",
      "to",
      "NY",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "paragraph ids and texts refer to Paragraphs.Paragraph_ID and Paragraphs.Paragraph_Text; document with name 'Welcome to NY' refers to Documents.Document_Name = 'Welcome to NY'; join Paragraphs and Documents on Paragraphs.Document_ID = Documents.Document_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "query_toks": [
      "SELECT",
      "T1.paragraph_id",
      ",",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.Document_Name",
      "=",
      "'Welcome",
      "to",
      "NY",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_id",
      ",",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "texts",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "titled",
      "'Welcome",
      "to",
      "NY",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids of paragraphs refers to Paragraphs.Paragraph_ID; texts of paragraphs refers to Paragraphs.Paragraph_Text; document titled 'Welcome to NY' refers to Documents.Document_Name = 'Welcome to NY'"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "query_toks": [
      "SELECT",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Customer",
      "reviews",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Show all paragraph texts for the document \"Customer reviews\".",
    "question_toks": [
      "Show",
      "all",
      "paragraph",
      "texts",
      "for",
      "the",
      "document",
      "``",
      "Customer",
      "reviews",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"Customer reviews\" refers to `Documents`.`Document_Name`; \"Paragraph texts\" refers to `Paragraphs`.`Paragraph_Text`; The relationship between `Documents` and `Paragraphs` is through `Document_ID`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "query_toks": [
      "SELECT",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Customer",
      "reviews",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "paragraph",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "'Customer",
      "reviews",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "paragraph texts refer to `Paragraphs`.`Paragraph_Text`; document with the name 'Customer reviews' refers to filtering `Documents`.`Document_Name` = 'Customer reviews'; the relationship between `Documents` and `Paragraphs` is established via `Document_ID`."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "document_id"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "document_id"
    ],
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "question_toks": [
      "Show",
      "all",
      "document",
      "ids",
      "and",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "document",
      ".",
      "Order",
      "by",
      "document",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Document ids refers to Documents.Document_ID; number of paragraphs in each document refers to COUNT(Paragraphs.Paragraph_ID) grouped by Paragraphs.Document_ID; order by document id refers to ORDER BY Documents.Document_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "document_id"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "document_id"
    ],
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "question_toks": [
      "Return",
      "the",
      "different",
      "document",
      "ids",
      "along",
      "with",
      "the",
      "number",
      "of",
      "paragraphs",
      "corresponding",
      "to",
      "each",
      ",",
      "ordered",
      "by",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different document ids refers to DISTINCT Paragraphs.Document_ID; number of paragraphs refers to COUNT(Paragraphs.Paragraph_ID); ordered by id refers to ORDER BY Paragraphs.Document_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id"
    ],
    "question": "Show all document ids, names and the number of paragraphs in each document.",
    "question_toks": [
      "Show",
      "all",
      "document",
      "ids",
      ",",
      "names",
      "and",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "document",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Document ids refers to Documents.Document_ID; Names refers to Documents.Document_Name; Number of paragraphs refers to count(Paragraphs.Paragraph_ID); Relationship between tables is Documents.Document_ID = Paragraphs.Document_ID;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id"
    ],
    "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "each",
      "document",
      ",",
      "as",
      "well",
      "as",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids and names of each document refer to Documents.Document_ID and Documents.Document_Name; number of paragraphs in each refers to count(Paragraphs.Paragraph_ID) grouped by Paragraphs.Document_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "List all document ids with at least two paragraphs.",
    "question_toks": [
      "List",
      "all",
      "document",
      "ids",
      "with",
      "at",
      "least",
      "two",
      "paragraphs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "document ids refers to Documents.Document_ID; at least two paragraphs refers to count(Paragraphs.Paragraph_ID) >= 2; relationship between Documents and Paragraphs is Paragraphs.Document_ID = Documents.Document_ID;"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "have",
      "2",
      "or",
      "more",
      "paragraphs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "2 or more paragraphs refers to COUNT(Paragraphs.Paragraph_ID) >= 2 and IDs of documents refers to Documents.Document_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the document id and name with greatest number of paragraphs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "id",
      "and",
      "name",
      "with",
      "greatest",
      "number",
      "of",
      "paragraphs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "greatest number of paragraphs refers to max(count(Paragraphs.Document_ID))"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the id and name of the document with the most paragraphs.",
    "question_toks": [
      "Return",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "document",
      "with",
      "the",
      "most",
      "paragraphs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most paragraphs refers to max(count(Paragraphs.Paragraph_ID)); id and name of the document refers to Documents.Document_ID and Documents.Document_Name."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the document id with least number of paragraphs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "id",
      "with",
      "least",
      "number",
      "of",
      "paragraphs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "least number of paragraphs refers to min(count(Paragraphs.Paragraph_ID)) grouped by Paragraphs.Document_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Return the id of the document with the fewest paragraphs.",
    "question_toks": [
      "Return",
      "the",
      "id",
      "of",
      "the",
      "document",
      "with",
      "the",
      "fewest",
      "paragraphs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "fewest paragraphs refers to min(count(Paragraph_ID)) grouped by Document_ID"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "BETWEEN",
      "1",
      "AND",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What is the document id with 1 to 2 paragraphs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "id",
      "with",
      "1",
      "to",
      "2",
      "paragraphs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          1,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          2.0
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "1 to 2 paragraphs refers to COUNT(Paragraphs.Paragraph_ID) grouped by Paragraphs.Document_ID and filtered for COUNT between 1 and 2"
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "BETWEEN",
      "1",
      "AND",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "Give the ids of documents that have between one and two paragraphs.",
    "question_toks": [
      "Give",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "have",
      "between",
      "one",
      "and",
      "two",
      "paragraphs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          1,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          2.0
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "documents refers to Documents.Document_ID, paragraphs refers to Paragraphs.Paragraph_ID, and between one and two paragraphs refers to COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Brazil",
      "'",
      "INTERSECT",
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Ireland",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "question_toks": [
      "Show",
      "the",
      "document",
      "id",
      "with",
      "paragraph",
      "text",
      "'Brazil",
      "'",
      "and",
      "'Ireland",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "paragraph text 'Brazil' and 'Ireland' refers to Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland'); document id refers to Paragraphs.Document_ID."
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Brazil",
      "'",
      "INTERSECT",
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Ireland",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "contain",
      "the",
      "paragraph",
      "text",
      "'Brazil",
      "'",
      "and",
      "'Ireland",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "'Brazil' and 'Ireland' refer to Paragraph_Text = 'Brazil' and Paragraph_Text = 'Ireland'; document IDs refer to Document_ID in the Paragraphs table."
  },
  {
    "db_id": "course_teach",
    "query": "SELECT count(*) FROM teacher",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question": "How many teachers are there?",
    "question_toks": [
      "How",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "teachers refers to teacher.Teacher_ID; count the distinct teacher.Teacher_ID to determine how many teachers are there"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT count(*) FROM teacher",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question": "What is the total count of teachers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "count",
      "of",
      "teachers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total count of teachers refers to COUNT(teacher.Teacher_ID)"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "List the names of teachers in ascending order of age.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "teachers",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of teachers refers to teacher.Name; ascending order of age refers to ORDER BY CAST(teacher.Age AS INTEGER) ASC"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "What are the names of the teachers ordered by ascending age?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "ordered",
      "by",
      "ascending",
      "age",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the teachers refers to teacher.Name; ordered by ascending age refers to ORDER BY CAST(teacher.Age AS INTEGER) ASC"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Age ,  Hometown FROM teacher",
    "query_toks": [
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question": "What are the age and hometown of teachers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "teachers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "teachers refers to teacher; age refers to teacher.Age; hometown refers to teacher.Hometown"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Age ,  Hometown FROM teacher",
    "query_toks": [
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question": "What is the age and hometown of every teacher?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "hometown",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "age refers to teacher.Age; hometown refers to teacher.Hometown; every teacher refers to selecting all rows from the teacher table"
  },
  {
    "db_id": "course_teach",
    "query": "select name from teacher where hometown != \"little lever urban district\"",
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!=",
      "\"little lever urban district\""
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!",
      "=",
      "value"
    ],
    "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "teachers",
      "whose",
      "hometown",
      "is",
      "not",
      "``",
      "Little",
      "Lever",
      "Urban",
      "District",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"little lever urban district\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of teachers refers to teacher.Name; hometown is not 'Little Lever Urban District' refers to teacher.Hometown != 'Little Lever Urban District'"
  },
  {
    "db_id": "course_teach",
    "query": "select name from teacher where hometown != \"little lever urban district\"",
    "query_toks": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!=",
      "\"little lever urban district\""
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "whose",
      "hometown",
      "is",
      "not",
      "``",
      "Little",
      "Lever",
      "Urban",
      "District",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"little lever urban district\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the teachers refers to teacher.Name; hometown is not 'Little Lever Urban District' refers to teacher.Hometown != 'Little Lever Urban District'"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Age",
      "=",
      "32",
      "OR",
      "Age",
      "=",
      "33"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "value",
      "or",
      "age",
      "=",
      "value"
    ],
    "question": "Show the name of teachers aged either 32 or 33?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "teachers",
      "aged",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of teachers refers to teacher.Name; aged either 32 or 33 refers to teacher.Age = '32' OR teacher.Age = '33'"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Age",
      "=",
      "32",
      "OR",
      "Age",
      "=",
      "33"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "value",
      "or",
      "age",
      "=",
      "value"
    ],
    "question": "What are the names of the teachers who are aged either 32 or 33?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "who",
      "are",
      "aged",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the teachers refers to teacher.Name; aged either 32 or 33 refers to the condition teacher.Age = '32' OR teacher.Age = '33'"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the hometown of the youngest teacher?",
    "question_toks": [
      "What",
      "is",
      "the",
      "hometown",
      "of",
      "the",
      "youngest",
      "teacher",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "youngest teacher refers to MIN(CAST(teacher.Age AS INTEGER)); hometown of the youngest teacher refers to teacher.Hometown"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "Where is the youngest teacher from?",
    "question_toks": [
      "Where",
      "is",
      "the",
      "youngest",
      "teacher",
      "from",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Where is the youngest teacher from refers to teacher.Hometown where MIN(teacher.Age);"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "query_toks": [
      "SELECT",
      "Hometown",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher",
      "group",
      "by",
      "hometown"
    ],
    "question": "Show different hometown of teachers and the number of teachers from each hometown.",
    "question_toks": [
      "Show",
      "different",
      "hometown",
      "of",
      "teachers",
      "and",
      "the",
      "number",
      "of",
      "teachers",
      "from",
      "each",
      "hometown",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different hometown of teachers refers to DISTINCT teacher.Hometown; number of teachers from each hometown refers to COUNT(teacher.Teacher_ID); grouping is done by teacher.Hometown"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "query_toks": [
      "SELECT",
      "Hometown",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher",
      "group",
      "by",
      "hometown"
    ],
    "question": "For each hometown, how many teachers are there?",
    "question_toks": [
      "For",
      "each",
      "hometown",
      ",",
      "how",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Hometown refers to `teacher`.`Hometown`; number of teachers refers to COUNT(`teacher`.`Teacher_ID`)."
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the most common hometown of teachers.",
    "question_toks": [
      "List",
      "the",
      "most",
      "common",
      "hometown",
      "of",
      "teachers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Most common hometown refers to counting occurrences in `teacher`.`Hometown`."
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most commmon hometowns for teachers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "commmon",
      "hometowns",
      "for",
      "teachers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most common hometowns refers to teacher.Hometown; most common refers to MAX(COUNT(teacher.Hometown));"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the hometowns shared by at least two teachers.",
    "question_toks": [
      "Show",
      "the",
      "hometowns",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "teachers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Hometowns refers to teacher.Hometown; shared by at least two teachers refers to count(teacher.Teacher_ID) >= 2"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the towns from which at least two teachers come from?",
    "question_toks": [
      "What",
      "are",
      "the",
      "towns",
      "from",
      "which",
      "at",
      "least",
      "two",
      "teachers",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Towns refers to teacher.Hometown; at least two teachers refers to count(teacher.Teacher_ID) >= 2"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id"
    ],
    "question": "Show names of teachers and the courses they are arranged to teach.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of teachers refers to teacher.Name; courses they are arranged to teach refers to course.Course; the relationship is established through course_arrange, which links teacher.Teacher_ID and course.Course_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id"
    ],
    "question": "What is the name of each teacher and what course they teach?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "teacher",
      "and",
      "what",
      "course",
      "they",
      "teach",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of each teacher refers to teacher.Name; what course they teach refers to course.Course; the relationship is established through course_arrange, which links teacher.Teacher_ID to course.Course_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "ORDER",
      "BY",
      "T3.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "order",
      "by",
      "t3",
      ".",
      "name"
    ],
    "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "the",
      "teacher",
      "'s",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of teachers refers to teacher.Name; courses they are arranged to teach refers to course.Course; the relationship is established through course_arrange using course_arrange.Teacher_ID = teacher.Teacher_ID and course_arrange.Course_ID = course.Course_ID; ascending alphabetical order of the teacher's name refers to ORDER BY teacher.Name ASC"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "ORDER",
      "BY",
      "T3.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "order",
      "by",
      "t3",
      ".",
      "name"
    ],
    "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "the",
      "courses",
      "they",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "by",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the teachers refers to teacher.Name; courses they teach refers to course.Course; ascending alphabetical order by the name of the teacher refers to ORDER BY teacher.Name ASC; the relationship between teachers and courses is established through course_arrange, linking teacher.Teacher_ID to course.Course_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "query_toks": [
      "SELECT",
      "T3.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "WHERE",
      "T2.Course",
      "=",
      "``",
      "Math",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "where",
      "t2",
      ".",
      "course",
      "=",
      "value"
    ],
    "question": "Show the name of the teacher for the math course.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "for",
      "the",
      "math",
      "course",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the teacher refers to teacher.Name; math course refers to course.Course = 'Math'; Course_ID for the math course is retrieved from course.Course_ID; Teacher_ID associated with this Course_ID is retrieved from course_arrange.Teacher_ID; teacher.Name is retrieved using teacher.Teacher_ID = course_arrange.Teacher_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "query_toks": [
      "SELECT",
      "T3.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "WHERE",
      "T2.Course",
      "=",
      "``",
      "Math",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "where",
      "t2",
      ".",
      "course",
      "=",
      "value"
    ],
    "question": "What are the names of the people who teach math courses?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "people",
      "who",
      "teach",
      "math",
      "courses",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the people refers to teacher.Name; teach refers to the relationship through course_arrange; math courses refers to course.Course = 'Math'"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "query_toks": [
      "SELECT",
      "T2.Name",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "Show names of teachers and the number of courses they teach.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "and",
      "the",
      "number",
      "of",
      "courses",
      "they",
      "teach",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of teachers refers to teacher.Name; number of courses they teach refers to COUNT(course_arrange.Course_ID); the relationship is established through teacher.Teacher_ID = course_arrange.Teacher_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "query_toks": [
      "SELECT",
      "T2.Name",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "What are the names of the teachers and how many courses do they teach?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "how",
      "many",
      "courses",
      "do",
      "they",
      "teach",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of the teachers refers to teacher.Name; how many courses do they teach refers to count(course_arrange.Course_ID); teacher and course_arrange are linked by teacher.Teacher_ID = course_arrange.Teacher_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show names of teachers that teach at least two courses.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "that",
      "teach",
      "at",
      "least",
      "two",
      "courses",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of teachers refers to teacher.Name; teach at least two courses refers to grouping by course_arrange.Teacher_ID, counting course_arrange.Course_ID, and filtering where count(course_arrange.Course_ID) >= 2"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of the teachers who teach at least two courses?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "who",
      "teach",
      "at",
      "least",
      "two",
      "courses",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of the teachers refers to teacher.Name; teach at least two courses refers to COUNT(course_arrange.Course_ID) >= 2; the relationship between teachers and courses is established through course_arrange.Teacher_ID and teacher.Teacher_ID"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Teacher_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Teacher_id",
      "FROM",
      "course_arrange",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "teacher_id",
      "not",
      "in",
      "(",
      "select",
      "teacher_id",
      "from",
      "course_arrange",
      ")"
    ],
    "question": "List the names of teachers who have not been arranged to teach courses.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "teachers",
      "who",
      "have",
      "not",
      "been",
      "arranged",
      "to",
      "teach",
      "courses",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of teachers refers to teacher.Name; not been arranged to teach courses refers to teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)"
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Teacher_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Teacher_id",
      "FROM",
      "course_arrange",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "teacher_id",
      "not",
      "in",
      "(",
      "select",
      "teacher_id",
      "from",
      "course_arrange",
      ")"
    ],
    "question": "What are the names of the teachers whose courses have not been arranged?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "whose",
      "courses",
      "have",
      "not",
      "been",
      "arranged",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"Names of teachers\" refers to teacher.Name; \"Courses have not been arranged\" refers to teacher.Teacher_ID NOT IN course_arrange.Teacher_ID"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT count(*) FROM visitor WHERE age  <  30",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "age",
      "<",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "age",
      "<",
      "value"
    ],
    "question": "How many visitors below age 30 are there?",
    "question_toks": [
      "How",
      "many",
      "visitors",
      "below",
      "age",
      "30",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "visitors below age 30 refer to visitor.Age < 30;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Level_of_membership",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "value",
      "order",
      "by",
      "level_of_membership",
      "desc"
    ],
    "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "order",
      "the",
      "results",
      "by",
      "the",
      "level",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of the visitors refers to visitor.Name; membership level higher than 4 refers to visitor.Level_of_membership > 4; order the results by the level from high to low refers to ORDER BY visitor.Level_of_membership DESC;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      "<",
      "=",
      "4"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      "<",
      "=",
      "value"
    ],
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "not",
      "higher",
      "than",
      "4",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          6,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "membership level not higher than 4 refers to Level_of_membership <= 4; average age refers to AVG(Age);"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "level_of_membership",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "value",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "sort",
      "by",
      "their",
      "age",
      "from",
      "old",
      "to",
      "young",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "membership level higher than 4 refers to visitor.Level_of_membership > 4; sort by their age from old to young refers to ORDER BY visitor.Age DESC;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "museum_id",
      ",",
      "name",
      "FROM",
      "museum",
      "ORDER",
      "BY",
      "num_of_staff",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "museum_id",
      ",",
      "name",
      "from",
      "museum",
      "order",
      "by",
      "num_of_staff",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the id and name of the museum that has the most staff members?",
    "question_toks": [
      "Find",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "museum",
      "that",
      "has",
      "the",
      "most",
      "staff",
      "members",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to museum.Museum_ID; name refers to museum.Name; most staff members refers to max(museum.Num_of_Staff)"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      "<",
      "2009"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      "<",
      "value"
    ],
    "question": "Find the average number of staff working for the museums that were open before 2009.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "number",
      "of",
      "staff",
      "working",
      "for",
      "the",
      "museums",
      "that",
      "were",
      "open",
      "before",
      "2009",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average number of staff refers to avg(Num_of_Staff); open before 2009 refers to CAST(Open_Year AS INTEGER) < 2009"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "query_toks": [
      "SELECT",
      "Num_of_Staff",
      ",",
      "Open_Year",
      "FROM",
      "museum",
      "WHERE",
      "name",
      "=",
      "'Plaza",
      "Museum",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "num_of_staff",
      ",",
      "open_year",
      "from",
      "museum",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question_toks": [
      "What",
      "are",
      "the",
      "opening",
      "year",
      "and",
      "staff",
      "number",
      "of",
      "the",
      "museum",
      "named",
      "Plaza",
      "Museum",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Plaza Museum\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Opening year' refers to `museum`.`Open_Year`; 'staff number' refers to `museum`.`Num_of_Staff`; 'Plaza Museum' refers to `museum`.`Name = 'Plaza Museum'`"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "museum",
      "WHERE",
      "num_of_staff",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "num_of_staff",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      ">",
      "2010",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "museum",
      "where",
      "num_of_staff",
      ">",
      "(",
      "select",
      "min",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "value",
      ")"
    ],
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "question_toks": [
      "find",
      "the",
      "names",
      "of",
      "museums",
      "which",
      "have",
      "more",
      "staff",
      "than",
      "the",
      "minimum",
      "staff",
      "number",
      "of",
      "all",
      "museums",
      "opened",
      "after",
      "2010",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      3,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                2010.0,
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of museums refers to `museum`.`Name`; more staff than the minimum staff number refers to `museum`.`Num_of_Staff` > MIN(`museum`.`Num_of_Staff`); all museums opened after 2010 refers to `museum`.`Open_Year` > '2010'."
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "t1.id",
      ",",
      "t1.name",
      ",",
      "t1.age",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "GROUP",
      "BY",
      "t1.id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "find the id, name and age for visitors who visited some museums more than once.",
    "question_toks": [
      "find",
      "the",
      "id",
      ",",
      "name",
      "and",
      "age",
      "for",
      "visitors",
      "who",
      "visited",
      "some",
      "museums",
      "more",
      "than",
      "once",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id, name, and age refer to visitor.ID, visitor.Name, and visitor.Age; visited some museums more than once refers to COUNT(visit.visitor_ID) > 1 grouped by visit.visitor_ID;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.visitor_id",
      ",",
      "t1.name",
      ",",
      "t1.Level_of_membership",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "GROUP",
      "BY",
      "t2.visitor_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "t2.Total_spent",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "visitor_id",
      ",",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "level_of_membership",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "group",
      "by",
      "t2",
      ".",
      "visitor_id",
      "order",
      "by",
      "sum",
      "(",
      "t2",
      ".",
      "total_spent",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      ",",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "visitors",
      "who",
      "have",
      "spent",
      "the",
      "largest",
      "amount",
      "of",
      "money",
      "in",
      "total",
      "in",
      "all",
      "museum",
      "tickets",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id, name, and membership level refer to visitor.ID, visitor.Name, and visitor.Level_of_membership; spent the largest amount of money in total refers to SUM(visit.Total_spent) GROUP BY visitor.ID; find the largest total spending refers to ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.Museum_ID",
      ",",
      "t1.name",
      "FROM",
      "museum",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.Museum_ID",
      "=",
      "t2.Museum_ID",
      "GROUP",
      "BY",
      "t2.Museum_ID",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "museum_id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "museum",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "group",
      "by",
      "t2",
      ".",
      "museum_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the id and name of the museum visited most times?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "museum",
      "visited",
      "most",
      "times",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id and name of the museum refers to museum.Museum_ID and museum.Name; visited most times refers to max(count(visit.Museum_ID))"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "museum",
      "WHERE",
      "Museum_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "museum_id",
      "FROM",
      "visit",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "museum",
      "where",
      "museum_id",
      "not",
      "in",
      "(",
      "select",
      "museum_id",
      "from",
      "visit",
      ")"
    ],
    "question": "What is the name of the museum that had no visitor yet?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "museum",
      "that",
      "had",
      "no",
      "visitor",
      "yet",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the museum refers to `museum`.`Name`; no visitor yet refers to `museum`.`Museum_ID` values that are not present in `visit`.`Museum_ID`."
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      ",",
      "t1.age",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "ORDER",
      "BY",
      "t2.num_of_ticket",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "order",
      "by",
      "t2",
      ".",
      "num_of_ticket",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name and age of the visitor who bought the most tickets at once.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "age",
      "of",
      "the",
      "visitor",
      "who",
      "bought",
      "the",
      "most",
      "tickets",
      "at",
      "once",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name and age of the visitor refer to visitor.Name and visitor.Age; most tickets at once refers to MAX(visit.Num_of_Ticket); join visit and visitor on visit.visitor_ID = visitor.ID;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "FROM",
      "visit"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "from",
      "visit"
    ],
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "and",
      "maximum",
      "number",
      "of",
      "tickets",
      "bought",
      "in",
      "all",
      "visits",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average number of tickets corresponds to AVG(visit.Num_of_Ticket); maximum number of tickets corresponds to MAX(visit.Num_of_Ticket);"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "t2.Total_spent",
      ")",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "WHERE",
      "t1.Level_of_membership",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "total_spent",
      ")",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "where",
      "t1",
      ".",
      "level_of_membership",
      "=",
      "value"
    ],
    "question": "What is the total ticket expense of the visitors whose membership level is 1?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "ticket",
      "expense",
      "of",
      "the",
      "visitors",
      "whose",
      "membership",
      "level",
      "is",
      "1",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "membership level is 1 refers to visitor.Level_of_membership = 1; total ticket expense refers to SUM(visit.Total_spent); join visitor and visit tables using visitor.ID = visit.visitor_ID;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "JOIN",
      "museum",
      "AS",
      "t3",
      "ON",
      "t3.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t3.open_year",
      "<",
      "2009",
      "INTERSECT",
      "SELECT",
      "t1.name",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "JOIN",
      "museum",
      "AS",
      "t3",
      "ON",
      "t3.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t3.open_year",
      ">",
      "2011"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t3",
      ".",
      "open_year",
      "<",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t3",
      ".",
      "open_year",
      ">",
      "value"
    ],
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "visitor",
      "who",
      "visited",
      "both",
      "a",
      "museum",
      "opened",
      "before",
      "2009",
      "and",
      "a",
      "museum",
      "opened",
      "after",
      "2011",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            2011.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "museum opened before 2009 refers to museum.Open_Year < 2009; museum opened after 2011 refers to museum.Open_Year > 2011; visitor who visited both refers to visit.visitor_ID linked to museums satisfying both conditions; name of the visitor refers to visitor.Name;"
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "t2.visitor_id",
      "FROM",
      "museum",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t1.open_year",
      ">",
      "2010",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t2",
      ".",
      "visitor_id",
      "from",
      "museum",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t1",
      ".",
      "open_year",
      ">",
      "value",
      ")"
    ],
    "question": "Find the number of visitors who did not visit any museum opened after 2010.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "visitors",
      "who",
      "did",
      "not",
      "visit",
      "any",
      "museum",
      "opened",
      "after",
      "2010",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      10,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                2010.0,
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Visitors who did not visit any museum opened after 2010 refers to visitor.ID who are NOT in (visit.visitor_ID WHERE visit.Museum_ID IN (museum.Museum_ID WHERE museum.Open_Year > '2010'))."
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      ">",
      "2013",
      "OR",
      "open_year",
      "<",
      "2008"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "value",
      "or",
      "open_year",
      "<",
      "value"
    ],
    "question": "How many museums were opened after 2013 or before 2008?",
    "question_toks": [
      "How",
      "many",
      "museums",
      "were",
      "opened",
      "after",
      "2013",
      "or",
      "before",
      "2008",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'opened after 2013' refers to museum.Open_Year > '2013'; 'before 2008' refers to museum.Open_Year < '2008'"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question": "Find the total number of players.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total number of players refers to count(distinct players.player_id)"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question": "How many players are there?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of players refers to the count of unique player_id in the players table."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the total number of matches.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total number of matches refers to COUNT(match_num)"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question": "Count the number of matches.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of matches refers to counting the unique values in matches.match_num."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "birth_date",
      "FROM",
      "players",
      "WHERE",
      "country_code",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "value"
    ],
    "question": "List the first name and birth date of all players from the country with code USA.",
    "question_toks": [
      "List",
      "the",
      "first",
      "name",
      "and",
      "birth",
      "date",
      "of",
      "all",
      "players",
      "from",
      "the",
      "country",
      "with",
      "code",
      "USA",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First name refers to players.first_name; birth date refers to players.birth_date; country with code USA refers to players.country_code = 'USA'."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "birth_date",
      "FROM",
      "players",
      "WHERE",
      "country_code",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "value"
    ],
    "question": "What are the first names and birth dates of players from the USA?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "players",
      "from",
      "the",
      "USA",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first names refer to `players`.`first_name`; birth dates refer to `players`.`birth_date`; from the USA refers to `players`.`country_code = 'USA'`"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the average age of losers and winners of all matches.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "losers",
      "and",
      "winners",
      "of",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(matches.loser_age) as avg_loser_age, AVG(matches.winner_age) as avg_winner_age;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question": "What are the average ages of losers and winners across matches?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "ages",
      "of",
      "losers",
      "and",
      "winners",
      "across",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(matches.loser_age) as avg_loser_age, AVG(matches.winner_age) as avg_winner_age;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(winner_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the average rank of winners in all matches.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "rank",
      "of",
      "winners",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(winner_rank)"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(winner_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "What is the average rank for winners in all matches?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "rank",
      "for",
      "winners",
      "in",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"average rank\" refers to Avg(matches.winner_rank)"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT min(loser_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the highest rank of losers in all matches.",
    "question_toks": [
      "Find",
      "the",
      "highest",
      "rank",
      "of",
      "losers",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "highest rank refers to MAX(matches.loser_rank)."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT min(loser_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "What is the best rank of losers across all matches?",
    "question_toks": [
      "What",
      "is",
      "the",
      "best",
      "rank",
      "of",
      "losers",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The best rank of losers refers to Min(matches.loser_rank)."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question": "find the number of distinct country codes of all players.",
    "question_toks": [
      "find",
      "the",
      "number",
      "of",
      "distinct",
      "country",
      "codes",
      "of",
      "all",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct country codes refers to DISTINCT(players.country_code);"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question": "How many distinct countries do players come from?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "countries",
      "do",
      "players",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct countries refers to count(distinct players.country_code); players come from refers to players.country_code"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the number of distinct name of losers.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "name",
      "of",
      "losers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Distinct name of losers refers to distinct values in matches.loser_name."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question": "How many different loser names are there?",
    "question_toks": [
      "How",
      "many",
      "different",
      "loser",
      "names",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different loser names refers to COUNT(DISTINCT matches.loser_name)"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "tourney_name",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "tourney_name",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "tourney_name",
      "from",
      "matches",
      "group",
      "by",
      "tourney_name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the name of tourney that has more than 10 matches.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "tourney",
      "that",
      "has",
      "more",
      "than",
      "10",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          27,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the tourney refers to matches.tourney_name; more than 10 matches refers to COUNT(matches.match_num) > 10;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "tourney_name",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "tourney_name",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "tourney_name",
      "from",
      "matches",
      "group",
      "by",
      "tourney_name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of tournaments that have more than 10 matches?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "tournaments",
      "that",
      "have",
      "more",
      "than",
      "10",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          27,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of tournaments refer to tourney_name; more than 10 matches refer to COUNT(match_num) > 10;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "INTERSECT",
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "all",
      "winners",
      "who",
      "played",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "`winner_name` refers to the names of winners; `played in both 2013 and 2016` refers to filtering `year = 2013` and `year = 2016` and finding common `winner_name` values."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "INTERSECT",
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names of players who won in both 2013 and 2016?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "players",
      "who",
      "won",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "`winner_name` refers to the names of players; `year` refers to the year of the match; won in both 2013 and 2016 refers to filtering `year = 2013` and `year = 2016` and finding common `winner_name`."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "OR",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "all",
      "matches",
      "who",
      "played",
      "in",
      "years",
      "of",
      "2013",
      "or",
      "2016",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"Number of all matches\" refers to COUNT(*) from the matches table; \"Played in years of 2013 or 2016\" refers to filtering rows where matches.year IN (2013, 2016)."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "OR",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "How many matches were played in 2013 or 2016?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "2013",
      "or",
      "2016",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "matches is the table; year refers to the year of the match; 2013 or 2016 means year = 2013 OR year = 2016;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'Australian",
      "Open",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value"
    ],
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "code",
      "and",
      "first",
      "name",
      "of",
      "the",
      "players",
      "who",
      "won",
      "in",
      "both",
      "tourney",
      "WTA",
      "Championships",
      "and",
      "Australian",
      "Open",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Country code refers to players.country_code; First name refers to players.first_name; Players who won refers to matches.winner_id linking to players.player_id; Tournaments refer to matches.tourney_name = 'WTA Championships' and matches.tourney_name = 'Australian Open'; Both tournaments imply the same winner_id must exist for both conditions."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'Australian",
      "Open",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value"
    ],
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "country",
      "codes",
      "for",
      "players",
      "who",
      "won",
      "both",
      "the",
      "WTA",
      "Championships",
      "and",
      "the",
      "Australian",
      "Open",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "First names and country codes refer to players.first_name and players.country_code; players who won both the WTA Championships and the Australian Open refer to matches.winner_id where matches.tourney_name = 'WTA Championships' and matches.tourney_name = 'Australian Open'."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question": "Find the first name and country code of the oldest player.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "oldest player refers to MIN(birth_date); retrieve first_name and country_code from players."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question": "What is the first name and country code of the oldest player?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "oldest player refers to MIN(players.birth_date);"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question": "List the first and last name of all players in the order of birth date.",
    "question_toks": [
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"first and last name\" refers to `players`.`first_name` and `players`.`last_name`; \"order of birth date\" refers to ordering by `players`.`birth_date`;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question": "What are the full names of all players, sorted by birth date?",
    "question_toks": [
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "players",
      ",",
      "sorted",
      "by",
      "birth",
      "date",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "full names of players refers to concatenation of players.first_name and players.last_name; sorted by birth date refers to ordering by players.birth_date;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "WHERE",
      "hand",
      "=",
      "'L",
      "'",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "value",
      "order",
      "by",
      "birth_date"
    ],
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "question_toks": [
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "who",
      "are",
      "left",
      "/",
      "L",
      "hand",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first and last name refers to players.first_name and players.last_name; left / L hand refers to players.hand = 'L'; order of birth date refers to ORDER BY players.birth_date;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "WHERE",
      "hand",
      "=",
      "'L",
      "'",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "value",
      "order",
      "by",
      "birth_date"
    ],
    "question": "What are the full names of all left handed players, in order of birth date?",
    "question_toks": [
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "left",
      "handed",
      "players",
      ",",
      "in",
      "order",
      "of",
      "birth",
      "date",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "full names refers to CONCAT(players.first_name, ' ', players.last_name); left-handed players refers to players.hand = 'L'; order of birth date refers to ORDER BY players.birth_date ASC;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "ORDER",
      "BY",
      "T2.tours",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "order",
      "by",
      "t2",
      ".",
      "tours",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "who",
      "did",
      "the",
      "most",
      "number",
      "of",
      "tours",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most number of tours refers to MAX(rankings.tours); first name refers to players.first_name; country code refers to players.country_code; the relationship between players and rankings is established through players.player_id = rankings.player_id;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "ORDER",
      "BY",
      "T2.tours",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "order",
      "by",
      "t2",
      ".",
      "tours",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the first name and country code of the player with the most tours?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "tours",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most tours refers to MAX(rankings.tours); first name refers to players.first_name; country code refers to players.country_code; join rankings and players on rankings.player_id = players.player_id;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the year that has the most number of matches.",
    "question_toks": [
      "Find",
      "the",
      "year",
      "that",
      "has",
      "the",
      "most",
      "number",
      "of",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Year refers to matches.year; most number of matches refers to COUNT(*) grouped by matches.year and finding the maximum count."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which year had the most matches?",
    "question_toks": [
      "Which",
      "year",
      "had",
      "the",
      "most",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The year refers to `matches`.`year`; the most matches refer to MAX(COUNT(`matches`.`match_num`)), where `match_num` is a unique identifier for matches."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "winner_rank_points",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "winner_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "winner_rank_points",
      "from",
      "matches",
      "group",
      "by",
      "winner_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name and rank points of the winner who won the most times.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "points",
      "of",
      "the",
      "winner",
      "who",
      "won",
      "the",
      "most",
      "times",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          34,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to matches.winner_name; rank points refer to matches.winner_rank_points; most times refers to COUNT(*) grouped by matches.winner_name and finding the maximum count."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "winner_rank_points",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "winner_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "winner_rank_points",
      "from",
      "matches",
      "group",
      "by",
      "winner_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "won",
      "the",
      "most",
      "matches",
      ",",
      "and",
      "how",
      "many",
      "rank",
      "points",
      "does",
      "this",
      "player",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          34,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Winner who has won the most matches refers to winner_id with Max(Count(winner_id)); Name of the winner refers to winner_name corresponding to the winner_id with the highest match count; Rank points refers to winner_rank_points for the same winner_id."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'Australian",
      "Open",
      "'",
      "ORDER",
      "BY",
      "winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "and",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tourney",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the winner refers to matches.winner_name; highest rank points refers to MAX(matches.winner_rank_points); participated in the Australian Open tourney refers to matches.tourney_name = 'Australian Open';"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'Australian",
      "Open",
      "'",
      "ORDER",
      "BY",
      "winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "with",
      "the",
      "most",
      "rank",
      "points",
      "who",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tournament",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the winner refers to matches.winner_name; most rank points refer to MAX(matches.winner_rank_points); Australian Open tournament refers to matches.tourney_name = 'Australian Open';"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "question_toks": [
      "find",
      "the",
      "names",
      "of",
      "loser",
      "and",
      "winner",
      "who",
      "played",
      "in",
      "the",
      "match",
      "with",
      "greatest",
      "number",
      "of",
      "minutes",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "greatest number of minutes refers to MAX(minutes); names of loser and winner refer to loser_name and winner_name;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the names of the winner and loser who played in the longest match?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "winner",
      "and",
      "loser",
      "who",
      "played",
      "in",
      "the",
      "longest",
      "match",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the winner and loser refer to winner_name and loser_name; longest match refers to MAX(minutes);"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "Find the average ranking for each player and their first name.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "ranking",
      "for",
      "each",
      "player",
      "and",
      "their",
      "first",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average ranking refers to AVG(rankings.ranking); for each player refers to GROUP BY rankings.player_id; first name refers to joining players table on rankings.player_id = players.player_id to get players.first_name"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "What are the first names of all players, and their average rankings?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "all",
      "players",
      ",",
      "and",
      "their",
      "average",
      "rankings",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The first names of players refer to players.first_name; the average rankings refer to AVG(rankings.ranking); the relationship between players and rankings is established through players.player_id = rankings.player_id;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "Find the total ranking points for each player and their first name.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "ranking",
      "points",
      "for",
      "each",
      "player",
      "and",
      "their",
      "first",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total ranking points refers to SUM(ranking_points); for each player refers to GROUP BY player_id; their first name refers to joining rankings with players on player_id to fetch first_name"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "What are the first names of all players, and their total ranking points?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "all",
      "players",
      ",",
      "and",
      "their",
      "total",
      "ranking",
      "points",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first names of all players refers to players.first_name; total ranking points refers to SUM(rankings.ranking_points);"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code"
    ],
    "question": "find the number of players for each country.",
    "question_toks": [
      "find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "country",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"number of players\" refers to Count(players.player_id); \"for each country\" refers to Group By(players.country_code)."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code"
    ],
    "question": "How many players are from each country?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "from",
      "each",
      "country",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "players refers to the players table; from each country refers to grouping by players.country_code; how many refers to counting players.player_id"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "find the code of the country where has the greatest number of players.",
    "question_toks": [
      "find",
      "the",
      "code",
      "of",
      "the",
      "country",
      "where",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "greatest number of players refers to MAX(COUNT(*)); code of the country refers to players.country_code;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the code of the country with the most players?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "the",
      "country",
      "with",
      "the",
      "most",
      "players",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Code of the country refers to players.country_code; most players refers to MAX(COUNT(*)) grouped by players.country_code;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "50"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the codes of countries that have more than 50 players.",
    "question_toks": [
      "Find",
      "the",
      "codes",
      "of",
      "countries",
      "that",
      "have",
      "more",
      "than",
      "50",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "more than 50 players refers to COUNT(player_id) > 50 grouped by country_code."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "50"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the codes of countries with more than 50 players?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "countries",
      "with",
      "more",
      "than",
      "50",
      "players",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "more than 50 players refers to COUNT(*) > 50 grouped by players.country_code;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "from",
      "rankings",
      "group",
      "by",
      "ranking_date"
    ],
    "question": "Find the total number of tours for each ranking date.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "tours",
      "for",
      "each",
      "ranking",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total number of tours refers to SUM(rankings.tours); for each ranking date refers to GROUP BY rankings.ranking_date."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "from",
      "rankings",
      "group",
      "by",
      "ranking_date"
    ],
    "question": "How many total tours were there for each ranking date?",
    "question_toks": [
      "How",
      "many",
      "total",
      "tours",
      "were",
      "there",
      "for",
      "each",
      "ranking",
      "date",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Total tours refers to SUM(rankings.tours); for each ranking date refers to GROUP BY rankings.ranking_date;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year"
    ],
    "question": "Find the number of matches happened in each year.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "matches",
      "happened",
      "in",
      "each",
      "year",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of matches refers to COUNT(matches.match_num); each year refers to GROUP BY matches.year;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year"
    ],
    "question": "How many matches were played in each year?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "played",
      "in",
      "each",
      "year",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`matches`.`year` refers to the year of the match; counting matches refers to COUNT(*); grouping by year refers to GROUP BY `matches`.`year`."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "the",
      "3",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to winner_name; rank refers to winner_rank; youngest refers to sorting by winner_age in ascending order; limit to 3 rows;"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ranks",
      "of",
      "the",
      "three",
      "youngest",
      "winners",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names refer to matches.winner_name; Ranks refer to matches.winner_rank; Three youngest winners refer to sorting matches.winner_age in ascending order and limiting the results to three."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "winner_name",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "AND",
      "winner_hand",
      "=",
      "'L",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "and",
      "winner_hand",
      "=",
      "value"
    ],
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "question_toks": [
      "How",
      "many",
      "different",
      "winners",
      "both",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "and",
      "were",
      "left",
      "handed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Participated in the WTA Championships refers to matches.tourney_name = 'WTA Championships'; left-handed refers to matches.winner_hand = 'L'; different winners refers to COUNT(DISTINCT matches.winner_id);"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "winner_name",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "AND",
      "winner_hand",
      "=",
      "'L",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "and",
      "winner_hand",
      "=",
      "value"
    ],
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "left",
      "handed",
      "winners",
      "who",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "left-handed winners refers to matches.winner_hand = 'L'; participated in the WTA Championships refers to matches.tourney_name = 'WTA Championships';"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.country_code",
      ",",
      "T1.birth_date",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "ORDER",
      "BY",
      "T2.winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "order",
      "by",
      "t2",
      ".",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      ",",
      "country",
      "code",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"highest rank points in all matches\" refers to MAX(matches.winner_rank_points); \"winner\" refers to matches.winner_id, which links to players.player_id; \"first name\" refers to players.first_name; \"country code\" refers to players.country_code; \"birth date\" refers to players.birth_date"
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.country_code",
      ",",
      "T1.birth_date",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "ORDER",
      "BY",
      "T2.winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "order",
      "by",
      "t2",
      ".",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      ",",
      "country",
      "code",
      ",",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "winner",
      "rank",
      "points",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most winner rank points refers to MAX(matches.winner_rank_points); player refers to players table; first name, country code, and birth date refer to players.first_name, players.country_code, and players.birth_date; matches.winner_id references players.player_id; join matches and players on matches.winner_id = players.player_id."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "from",
      "players",
      "group",
      "by",
      "hand"
    ],
    "question": "Find the number of players for each hand type.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "hand",
      "type",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The hand type refers to players.hand, and the number of players for each hand type is grouped by players.hand."
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "from",
      "players",
      "group",
      "by",
      "hand"
    ],
    "question": "How many players are there for each hand type?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "hand type refers to players.hand; the possible values are 'R' (right-handed), 'L' (left-handed), and 'U' (unknown); count the number of players grouped by players.hand."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "WHERE",
      "disposition_of_ship",
      "=",
      "'Captured",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "ship",
      "where",
      "disposition_of_ship",
      "=",
      "value"
    ],
    "question": "How many ships ended up being 'Captured'?",
    "question_toks": [
      "How",
      "many",
      "ships",
      "ended",
      "up",
      "being",
      "'Captured",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Captured\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The ships that ended up being 'Captured' refer to rows in the `ship` table where `ship`.`disposition_of_ship` = 'Captured'."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "tonnage",
      "FROM",
      "ship",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "tonnage",
      "from",
      "ship",
      "order",
      "by",
      "name",
      "desc"
    ],
    "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "tonnage",
      "ordered",
      "by",
      "in",
      "descending",
      "alphaetical",
      "order",
      "for",
      "the",
      "names",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"name\" and \"tonnage\" refer to `ship`.`name` and `ship`.`tonnage`; descending alphabetical order for the names refers to ORDER BY `ship`.`name` DESC."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  date FROM battle",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "date",
      "FROM",
      "battle"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "date",
      "from",
      "battle"
    ],
    "question": "List the name, date and result of each battle.",
    "question_toks": [
      "List",
      "the",
      "name",
      ",",
      "date",
      "and",
      "result",
      "of",
      "each",
      "battle",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to battle.name; date refers to battle.date; result refers to battle.result;"
  },
  {
    "db_id": "battle_death",
    "query": "SELECT max(killed) ,  min(killed) FROM death",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "from",
      "death"
    ],
    "question": "What is maximum and minimum death toll caused each time?",
    "question_toks": [
      "What",
      "is",
      "maximum",
      "and",
      "minimum",
      "death",
      "toll",
      "caused",
      "each",
      "time",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum death toll refers to max(death.killed); minimum death toll refers to min(death.killed)"
  },
  {
    "db_id": "battle_death",
    "query": "SELECT avg(injured) FROM death",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "injured",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "injured",
      ")",
      "from",
      "death"
    ],
    "question": "What is the average number of injuries caused each time?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "injuries",
      "caused",
      "each",
      "time",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average refers to AVG(); number of injuries refers to death.injured; each time refers to all records in the death table."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "query_toks": [
      "SELECT",
      "T1.killed",
      ",",
      "T1.injured",
      "FROM",
      "death",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "t2",
      "ON",
      "T1.caused_by_ship_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.tonnage",
      "=",
      "'t",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "killed",
      ",",
      "t1",
      ".",
      "injured",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "caused_by_ship_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "tonnage",
      "=",
      "value"
    ],
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "death",
      "and",
      "injury",
      "situations",
      "caused",
      "by",
      "the",
      "ship",
      "with",
      "tonnage",
      "'t",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"t\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`death.killed` and `death.injured` refer to the death and injury situations; `death.caused_by_ship_id` links to `ship.id`; filter on `ship.tonnage = 't'`."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "RESULT",
      "FROM",
      "battle",
      "WHERE",
      "bulgarian_commander",
      "!",
      "=",
      "'Boril",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "result",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "!",
      "=",
      "value"
    ],
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "results",
      "of",
      "the",
      "battles",
      "when",
      "the",
      "bulgarian",
      "commander",
      "is",
      "not",
      "'Boril",
      "'"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Boril\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Bulgarian commander refers to the `battle`.`bulgarian_commander` column, which contains the names of commanders leading Bulgarian forces in battles. The condition 'not Boril' means filtering out rows where `battle`.`bulgarian_commander` is exactly 'Boril'."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.id",
      ",",
      "T1.name",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.ship_type",
      "=",
      "'Brig",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "ship_type",
      "=",
      "value"
    ],
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "battles",
      "that",
      "lost",
      "any",
      "'Brig",
      "'",
      "type",
      "shipes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Brig\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'battles that lost any Brig type ships' refers to ship_type LIKE '%Brig%'; lost in battle refers to lost_in_battle; battle details refer to battle.id and battle.name"
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
    "query_toks": [
      "SELECT",
      "T1.id",
      ",",
      "T1.name",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "JOIN",
      "death",
      "AS",
      "T3",
      "ON",
      "T2.id",
      "=",
      "T3.caused_by_ship_id",
      "GROUP",
      "BY",
      "T1.id",
      "HAVING",
      "sum",
      "(",
      "T3.killed",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "join",
      "death",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "caused_by_ship_id",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "sum",
      "(",
      "t3",
      ".",
      "killed",
      ")",
      ">",
      "value"
    ],
    "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "battles",
      "that",
      "led",
      "to",
      "more",
      "than",
      "10",
      "people",
      "killed",
      "in",
      "total",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              4,
              17,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids and names of battles refer to battle.id and battle.name; more than 10 people killed in total refers to SUM(death.killed) > 10; death.id is used to join death and battle tables."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.id",
      ",",
      "T2.name",
      "FROM",
      "death",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "t2",
      "ON",
      "T1.caused_by_ship_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T2.id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "id",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "caused_by_ship_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the ship id and name that caused most total injuries?",
    "question_toks": [
      "What",
      "is",
      "the",
      "ship",
      "id",
      "and",
      "name",
      "that",
      "caused",
      "most",
      "total",
      "injuries",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ship id and name refers to ship.id and ship.name; caused most total injuries refers to SUM(death.injured) grouped by death.caused_by_ship_id; death.caused_by_ship_id links to ship.id"
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "battle",
      "WHERE",
      "bulgarian_commander",
      "=",
      "'Kaloyan",
      "'",
      "AND",
      "latin_commander",
      "=",
      "'Baldwin",
      "I",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "=",
      "value",
      "and",
      "latin_commander",
      "=",
      "value"
    ],
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "battle",
      "names",
      "which",
      "are",
      "between",
      "bulgarian",
      "commander",
      "'Kaloyan",
      "'",
      "and",
      "latin",
      "commander",
      "'Baldwin",
      "I",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Kaloyan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Baldwin I\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'distinct battle names' refers to battle.name; 'Bulgarian commander Kaloyan' refers to battle.bulgarian_commander = 'Kaloyan'; 'Latin commander Baldwin I' refers to battle.latin_commander = 'Baldwin I'"
  },
  {
    "db_id": "battle_death",
    "query": "SELECT count(DISTINCT RESULT) FROM battle",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "RESULT",
      ")",
      "FROM",
      "battle"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "result",
      ")",
      "from",
      "battle"
    ],
    "question": "How many different results are there for the battles?",
    "question_toks": [
      "How",
      "many",
      "different",
      "results",
      "are",
      "there",
      "for",
      "the",
      "battles",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different results refers to DISTINCT values in battle.result"
  },
  {
    "db_id": "battle_death",
    "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "battle",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "lost_in_battle",
      "FROM",
      "ship",
      "WHERE",
      "tonnage",
      "=",
      "'225",
      "'",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "battle",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "lost_in_battle",
      "from",
      "ship",
      "where",
      "tonnage",
      "=",
      "value",
      ")"
    ],
    "question": "How many battles did not lose any ship with tonnage '225'?",
    "question_toks": [
      "How",
      "many",
      "battles",
      "did",
      "not",
      "lose",
      "any",
      "ship",
      "with",
      "tonnage",
      "'225",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      7,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"225\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "battles refers to `battle`; did not lose any ship refers to battles where no ship with `tonnage = '225'` exists in `ship.lost_in_battle`; `tonnage` refers to `ship.tonnage`."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.name",
      "=",
      "'Lettice",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.name",
      "=",
      "'HMS",
      "Atalanta",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "date",
      "the",
      "battle",
      "that",
      "has",
      "lost",
      "the",
      "ship",
      "named",
      "'Lettice",
      "'",
      "and",
      "the",
      "ship",
      "named",
      "'HMS",
      "Atalanta",
      "'"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Lettice\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            "\"HMS Atalanta\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "'ship named Lettice' refers to `ship`.`name = 'Lettice'`; 'ship named HMS Atalanta' refers to `ship`.`name = 'HMS Atalanta'`; 'name and date the battle' refers to `battle`.`name` and `battle`.`date`; 'lost the ship' refers to `ship`.`lost_in_battle` = `battle`.`id`."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "RESULT",
      ",",
      "bulgarian_commander",
      "FROM",
      "battle",
      "EXCEPT",
      "SELECT",
      "T1.name",
      ",",
      "T1.result",
      ",",
      "T1.bulgarian_commander",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.location",
      "=",
      "'English",
      "Channel",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "result",
      ",",
      "bulgarian_commander",
      "from",
      "battle",
      "except",
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "result",
      ",",
      "t1",
      ".",
      "bulgarian_commander",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "location",
      "=",
      "value"
    ],
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "question_toks": [
      "Show",
      "names",
      ",",
      "results",
      "and",
      "bulgarian",
      "commanders",
      "of",
      "the",
      "battles",
      "with",
      "no",
      "ships",
      "lost",
      "in",
      "the",
      "'English",
      "Channel",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"English Channel\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Battles with no ships lost in the 'English Channel' means there are no records in the `ship` table where `ship`.`lost_in_battle` matches `battle`.`id` and `ship`.`location` is 'English Channel'. The required columns are `battle`.`name`, `battle`.`result`, and `battle`.`bulgarian_commander`."
  },
  {
    "db_id": "battle_death",
    "query": "SELECT note FROM death WHERE note LIKE '%East%'",
    "query_toks": [
      "SELECT",
      "note",
      "FROM",
      "death",
      "WHERE",
      "note",
      "LIKE",
      "'",
      "%",
      "East",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "note",
      "from",
      "death",
      "where",
      "note",
      "like",
      "value"
    ],
    "question": "What are the notes of the death events which has substring 'East'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "notes",
      "of",
      "the",
      "death",
      "events",
      "which",
      "has",
      "substring",
      "'East",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"%East%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The substring 'East' is used to filter the `death`.`note` column."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT line_1 ,  line_2 FROM addresses",
    "query_toks": [
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value": [
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question": "what are all the addresses including line 1 and line 2?",
    "question_toks": [
      "what",
      "are",
      "all",
      "the",
      "addresses",
      "including",
      "line",
      "1",
      "and",
      "line",
      "2",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The `Addresses` table contains the columns `line_1` and `line_2`, which represent the primary and secondary street address lines, respectively. The question asks for all rows from the `Addresses` table, specifically including the `line_1` and `line_2` columns."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT line_1 ,  line_2 FROM addresses",
    "query_toks": [
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value": [
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question": "What is the first and second line for all addresses?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "and",
      "second",
      "line",
      "for",
      "all",
      "addresses",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The first and second lines of all addresses are represented by the columns `Addresses.line_1` and `Addresses.line_2`, respectively. The question requires retrieving all rows from the `Addresses` table without any filtering conditions."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Courses",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question": "How many courses in total are listed?",
    "question_toks": [
      "How",
      "many",
      "courses",
      "in",
      "total",
      "are",
      "listed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total number of courses can be determined by counting the `course_id` column in the `Courses` table."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Courses",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question": "How many courses are there?",
    "question_toks": [
      "How",
      "many",
      "courses",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "courses refers to Courses.course_id; counting courses refers to count(distinct Courses.course_id)"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "query_toks": [
      "SELECT",
      "course_description",
      "FROM",
      "Courses",
      "WHERE",
      "course_name",
      "=",
      "'math",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "value"
    ],
    "question": "How is the math course described?",
    "question_toks": [
      "How",
      "is",
      "the",
      "math",
      "course",
      "described",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`math` refers to `Courses`.`course_name = 'math'`; `described` refers to `Courses`.`course_description`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "query_toks": [
      "SELECT",
      "course_description",
      "FROM",
      "Courses",
      "WHERE",
      "course_name",
      "=",
      "'math",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "value"
    ],
    "question": "What are the descriptions for all the math courses?",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "all",
      "the",
      "math",
      "courses",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Descriptions for all the math courses refers to Courses.course_description where Courses.course_name = 'math'"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "query_toks": [
      "SELECT",
      "zip_postcode",
      "FROM",
      "Addresses",
      "WHERE",
      "city",
      "=",
      "'Port",
      "Chelsea",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "question_toks": [
      "What",
      "is",
      "the",
      "zip",
      "code",
      "of",
      "the",
      "address",
      "in",
      "the",
      "city",
      "Port",
      "Chelsea",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "zip code refers to Addresses.zip_postcode; city Port Chelsea refers to Addresses.city = 'Port Chelsea'"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "query_toks": [
      "SELECT",
      "zip_postcode",
      "FROM",
      "Addresses",
      "WHERE",
      "city",
      "=",
      "'Port",
      "Chelsea",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What is the zip code for Port Chelsea?",
    "question_toks": [
      "What",
      "is",
      "the",
      "zip",
      "code",
      "for",
      "Port",
      "Chelsea",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Port Chelsea' is the city; the zip code is stored in `Addresses`.`zip_postcode`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.department_name",
      ",",
      "T1.department_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Departments",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "GROUP",
      "BY",
      "T1.department_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "department_name",
      ",",
      "t1",
      ".",
      "department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "group",
      "by",
      "t1",
      ".",
      "department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which department offers the most number of degrees? List department name and id.",
    "question_toks": [
      "Which",
      "department",
      "offers",
      "the",
      "most",
      "number",
      "of",
      "degrees",
      "?",
      "List",
      "department",
      "name",
      "and",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most number of degrees refers to MAX(COUNT(Degree_Programs.degree_program_id)); department name and id refer to Departments.department_name and Departments.department_id; relationship is Degree_Programs.department_id = Departments.department_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "query_toks": [
      "select",
      "t2.department_name",
      ",",
      "t1.department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1.department_id",
      "=",
      "t2.department_id",
      "group",
      "by",
      "t1.department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "department_name",
      ",",
      "t1",
      ".",
      "department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "group",
      "by",
      "t1",
      ".",
      "department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and id of the department with the most number of degrees ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "id",
      "of",
      "the",
      "department",
      "with",
      "the",
      "most",
      "number",
      "of",
      "degrees",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most number of degrees refers to MAX(COUNT(Degree_Programs.degree_program_id)); name and id of the department refers to Departments.department_name and Departments.department_id; relationship is Degree_Programs.department_id = Departments.department_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many departments offer any degree?",
    "question_toks": [
      "How",
      "many",
      "departments",
      "offer",
      "any",
      "degree",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "departments refers to Departments.department_id; offer any degree refers to Degree_Programs.department_id."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many different departments offer degrees?",
    "question_toks": [
      "How",
      "many",
      "different",
      "departments",
      "offer",
      "degrees",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "departments refers to Departments.department_id; offer degrees refers to Degree_Programs.department_id referencing Departments.department_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many different degree names are offered?",
    "question_toks": [
      "How",
      "many",
      "different",
      "degree",
      "names",
      "are",
      "offered",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "degree names refers to Degree_Programs.degree_summary_name; different degree names refers to COUNT(DISTINCT Degree_Programs.degree_summary_name)."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many different degrees are offered?",
    "question_toks": [
      "How",
      "many",
      "different",
      "degrees",
      "are",
      "offered",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different degrees refers to unique Degree_Programs.degree_program_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Departments",
      "AS",
      "T1",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "WHERE",
      "T1.department_name",
      "=",
      "'engineer",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "where",
      "t1",
      ".",
      "department_name",
      "=",
      "value"
    ],
    "question": "How many degrees does the engineering department offer?",
    "question_toks": [
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "department",
      "offer",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "engineering department refers to Departments.department_name = 'engineer'; degrees refers to Degree_Programs.degree_program_id; the relationship is established through Degree_Programs.department_id = Departments.department_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Departments",
      "AS",
      "T1",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "WHERE",
      "T1.department_name",
      "=",
      "'engineer",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "where",
      "t1",
      ".",
      "department_name",
      "=",
      "value"
    ],
    "question": "How many degrees does the engineering department have?",
    "question_toks": [
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "department",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'engineering department' refers to Departments.department_name = 'engineer'; the relationship between Departments and Degree_Programs is through the department_id foreign key; counting degrees involves COUNT(Degree_Programs.degree_program_id)."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name ,  section_description FROM Sections",
    "query_toks": [
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question": "What are the names and descriptions of all the sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "of",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names refers to Sections.section_name; descriptions refers to Sections.section_description"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name ,  section_description FROM Sections",
    "query_toks": [
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question": "What are the names and descriptions for all the sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "for",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names and descriptions for all the sections refers to Sections.section_name and Sections.section_description"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      ",",
      "T1.course_id",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Sections",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      ",",
      "t1",
      ".",
      "course_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "sections",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "value"
    ],
    "question": "What are the names and id of courses having at most 2 sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "id",
      "of",
      "courses",
      "having",
      "at",
      "most",
      "2",
      "sections",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          6,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names and IDs of courses refer to Courses.course_id and Courses.course_name; At most 2 sections refers to filtering courses where COUNT(Sections.section_id) <= 2; The relationship between Courses and Sections is established via Sections.course_id = Courses.course_id."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      ",",
      "T1.course_id",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Sections",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      ",",
      "t1",
      ".",
      "course_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "sections",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "value"
    ],
    "question": "What are the names and ids of every course with less than 2 sections?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "every",
      "course",
      "with",
      "less",
      "than",
      "2",
      "sections",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          6,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names and ids of every course refers to Courses.course_name and Courses.course_id; less than 2 sections refers to counting Sections.section_id grouped by Sections.course_id and filtering where the count is less than 2"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks": [
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question": "List the section_name in reversed lexicographical order.",
    "question_toks": [
      "List",
      "the",
      "section_name",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Reversed lexicographical order` refers to `ORDER BY section_name DESC`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks": [
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question": "What are the names of the sections in reverse alphabetical order?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "sections",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the sections refers to Sections.section_name; reverse alphabetical order refers to ORDER BY Sections.section_name DESC"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.semester_name",
      ",",
      "T1.semester_id",
      "FROM",
      "Semesters",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.semester_id",
      "=",
      "T2.semester_id",
      "GROUP",
      "BY",
      "T1.semester_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "semester_name",
      ",",
      "t1",
      ".",
      "semester_id",
      "from",
      "semesters",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "semester_id",
      "=",
      "t2",
      ".",
      "semester_id",
      "group",
      "by",
      "t1",
      ".",
      "semester_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "question_toks": [
      "What",
      "is",
      "the",
      "semester",
      "which",
      "most",
      "student",
      "registered",
      "in",
      "?",
      "Show",
      "both",
      "the",
      "name",
      "and",
      "the",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          28,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most students registered in refers to COUNT(student_id) grouped by Student_Enrolment.semester_id; semester refers to the Semesters table; name and id refer to Semesters.semester_name and Semesters.semester_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.semester_name",
      ",",
      "T1.semester_id",
      "FROM",
      "Semesters",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.semester_id",
      "=",
      "T2.semester_id",
      "GROUP",
      "BY",
      "T1.semester_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "semester_name",
      ",",
      "t1",
      ".",
      "semester_id",
      "from",
      "semesters",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "semester_id",
      "=",
      "t2",
      ".",
      "semester_id",
      "group",
      "by",
      "t1",
      ".",
      "semester_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "question_toks": [
      "For",
      "each",
      "semester",
      ",",
      "what",
      "is",
      "the",
      "name",
      "and",
      "id",
      "of",
      "the",
      "one",
      "with",
      "the",
      "most",
      "students",
      "registered",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          28,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "For each semester refers to grouping by Semesters.semester_id; name and id refers to selecting Semesters.semester_name and Semesters.semester_id; the most students registered refers to MAX(COUNT(Student_Enrolment.student_id)) after grouping by Semesters.semester_id; Semesters and Student_Enrolment are joined on Semesters.semester_id = Student_Enrolment.semester_id."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "query_toks": [
      "SELECT",
      "department_description",
      "FROM",
      "Departments",
      "WHERE",
      "department_name",
      "LIKE",
      "'",
      "%",
      "computer",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "department_description",
      "from",
      "departments",
      "where",
      "department_name",
      "like",
      "value"
    ],
    "question": "What is the description of the department whose name has the substring the computer?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "of",
      "the",
      "department",
      "whose",
      "name",
      "has",
      "the",
      "substring",
      "the",
      "computer",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%computer%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "description of the department refers to Departments.department_description; department whose name has the substring the computer refers to Departments.department_name LIKE '%the computer%'. However, no exact match exists for '%the computer%'. The closest match by edit distance is 'computer science'."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "query_toks": [
      "SELECT",
      "department_description",
      "FROM",
      "Departments",
      "WHERE",
      "department_name",
      "LIKE",
      "'",
      "%",
      "computer",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "department_description",
      "from",
      "departments",
      "where",
      "department_name",
      "like",
      "value"
    ],
    "question": "What is the department description for the one whose name has the word computer?",
    "question_toks": [
      "What",
      "is",
      "the",
      "department",
      "description",
      "for",
      "the",
      "one",
      "whose",
      "name",
      "has",
      "the",
      "word",
      "computer",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%computer%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "department description refers to Departments.department_description; name has the word computer refers to a LIKE '%computer%' condition on Departments.department_name;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "question_toks": [
      "Who",
      "are",
      "enrolled",
      "in",
      "2",
      "degree",
      "programs",
      "in",
      "one",
      "semester",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "and",
      "the",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Enrolled in 2 degree programs in one semester refers to COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 grouped by Student_Enrolment.student_id and Student_Enrolment.semester_id; first name, middle name, last name, and ID refer to Students.first_name, Students.middle_name, Students.last_name, and Students.student_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      ",",
      "along",
      "with",
      "the",
      "ids",
      ",",
      "of",
      "all",
      "students",
      "who",
      "enrolled",
      "in",
      "2",
      "degree",
      "programs",
      "in",
      "one",
      "semester",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first, middle, and last names refer to Students.first_name, Students.middle_name, and Students.last_name; ids refer to Students.student_id; enrolled in 2 degree programs in one semester refers to COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 for the same Student_Enrolment.semester_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T3",
      "ON",
      "T2.degree_program_id",
      "=",
      "T3.degree_program_id",
      "WHERE",
      "T3.degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "degree_program_id",
      "=",
      "t3",
      ".",
      "degree_program_id",
      "where",
      "t3",
      ".",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question_toks": [
      "Who",
      "is",
      "enrolled",
      "in",
      "a",
      "Bachelor",
      "degree",
      "program",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      ",",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Enrolled in a Bachelor degree program refers to Degree_Programs.degree_summary_name = 'Bachelor'; first name, middle name, last name refers to Students.first_name, Students.middle_name, Students.last_name"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T3",
      "ON",
      "T2.degree_program_id",
      "=",
      "T3.degree_program_id",
      "WHERE",
      "T3.degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "degree_program_id",
      "=",
      "t3",
      ".",
      "degree_program_id",
      "where",
      "t3",
      ".",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      "for",
      "everybody",
      "enrolled",
      "in",
      "a",
      "Bachelors",
      "program",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                45,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first name refers to Students.first_name; middle name refers to Students.middle_name; last name refers to Students.last_name; enrolled in a Bachelors program refers to Degree_Programs.degree_summary_name = 'Bachelor'; Students is linked to Degree_Programs through Student_Enrolment using Students.student_id = Student_Enrolment.student_id and Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_summary_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_summary_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the kind of program which most number of students are enrolled in?",
    "question_toks": [
      "Find",
      "the",
      "kind",
      "of",
      "program",
      "which",
      "most",
      "number",
      "of",
      "students",
      "are",
      "enrolled",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          20,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kind of program refers to Degree_Programs.degree_summary_name; most number of students are enrolled in refers to MAX(COUNT(Student_Enrolment.student_id)) grouped by Student_Enrolment.degree_program_id; Degree_Programs.degree_program_id links to Student_Enrolment.degree_program_id."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_summary_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_summary_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "degree",
      "summary",
      "name",
      "that",
      "has",
      "the",
      "most",
      "number",
      "of",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          20,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "degree summary name refers to Degree_Programs.degree_summary_name; most number of students enrolled refers to COUNT(Student_Enrolment.student_id); the relationship between students and degree programs is through Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id; the degree summary name with the most students is determined using MAX(COUNT(Student_Enrolment.student_id)) grouped by Degree_Programs.degree_summary_name."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_program_id",
      ",",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_program_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_program_id",
      ",",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_program_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "question_toks": [
      "Find",
      "the",
      "program",
      "which",
      "most",
      "number",
      "of",
      "students",
      "are",
      "enrolled",
      "in",
      ".",
      "List",
      "both",
      "the",
      "id",
      "and",
      "the",
      "summary",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most number of students are enrolled in refers to COUNT(Student_Enrolment.degree_program_id) and finding the maximum; List both the id and the summary refers to selecting Degree_Programs.degree_program_id and Degree_Programs.degree_summary_name; the tables Student_Enrolment and Degree_Programs are joined on degree_program_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_program_id",
      ",",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_program_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_program_id",
      ",",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_program_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the program id and the summary of the degree that has the most students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "program",
      "id",
      "and",
      "the",
      "summary",
      "of",
      "the",
      "degree",
      "that",
      "has",
      "the",
      "most",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "program id refers to Degree_Programs.degree_program_id; summary of the degree refers to Degree_Programs.degree_summary_description; most students enrolled refers to the degree program with the highest COUNT(Student_Enrolment.degree_program_id)"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.student_id",
      ",",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "student_id",
      ",",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "question_toks": [
      "Which",
      "student",
      "has",
      "enrolled",
      "for",
      "the",
      "most",
      "times",
      "in",
      "any",
      "program",
      "?",
      "List",
      "the",
      "id",
      ",",
      "first",
      "name",
      ",",
      "middle",
      "name",
      ",",
      "last",
      "name",
      ",",
      "the",
      "number",
      "of",
      "enrollments",
      "and",
      "student",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The student enrolled for the most times refers to COUNT(Student_Enrolment.student_enrolment_id); id refers to Students.student_id; first name refers to Students.first_name; middle name refers to Students.middle_name; last name refers to Students.last_name; the number of enrollments refers to COUNT(Student_Enrolment.student_enrolment_id); join Students and Student_Enrolment on Students.student_id = Student_Enrolment.student_id; order by COUNT(Student_Enrolment.student_enrolment_id) DESC; limit to 1."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.student_id",
      ",",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "student_id",
      ",",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      ",",
      "along",
      "with",
      "the",
      "id",
      "and",
      "number",
      "of",
      "enrollments",
      ",",
      "for",
      "the",
      "student",
      "who",
      "enrolled",
      "the",
      "most",
      "in",
      "any",
      "program",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First name refers to Students.first_name; middle name refers to Students.middle_name; last name refers to Students.last_name; ID refers to Students.student_id; number of enrollments refers to COUNT(Student_Enrolment.student_enrolment_id); student who enrolled the most refers to MAX(COUNT(Student_Enrolment.student_enrolment_id)); Students and Student_Enrolment are joined on Students.student_id = Student_Enrolment.student_id."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "query_toks": [
      "SELECT",
      "semester_name",
      "FROM",
      "Semesters",
      "WHERE",
      "semester_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "semester_id",
      "FROM",
      "Student_Enrolment",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "semester_name",
      "from",
      "semesters",
      "where",
      "semester_id",
      "not",
      "in",
      "(",
      "select",
      "semester_id",
      "from",
      "student_enrolment",
      ")"
    ],
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "question_toks": [
      "Which",
      "semesters",
      "do",
      "not",
      "have",
      "any",
      "student",
      "enrolled",
      "?",
      "List",
      "the",
      "semester",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Semesters without any student enrolled refers to `semester_id` in `Semesters` that do not exist in `Student_Enrolment`.`semester_id`; the output is `semester_name` from `Semesters`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "query_toks": [
      "SELECT",
      "semester_name",
      "FROM",
      "Semesters",
      "WHERE",
      "semester_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "semester_id",
      "FROM",
      "Student_Enrolment",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "semester_name",
      "from",
      "semesters",
      "where",
      "semester_id",
      "not",
      "in",
      "(",
      "select",
      "semester_id",
      "from",
      "student_enrolment",
      ")"
    ],
    "question": "What is the name of the semester with no students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "semester",
      "with",
      "no",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "No students enrolled refers to `semester_id` in `Semesters` not in `Student_Enrolment`, and the name of the semester is `semester_name`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id"
    ],
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "course",
      "names",
      "of",
      "the",
      "courses",
      "which",
      "ever",
      "have",
      "students",
      "enrolled",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Courses which ever have students enrolled in refers to courses where course_id exists in Student_Enrolment_Courses; course names refers to Courses.course_name;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id"
    ],
    "question": "What are the names of all courses that have some students enrolled?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "courses",
      "that",
      "have",
      "some",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Courses with enrolled students are identified by checking if `course_id` in `Courses` exists in `Student_Enrolment_Courses`. The `course_name` column in `Courses` provides the names of these courses."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What's the name of the course with most number of enrollments?",
    "question_toks": [
      "What",
      "'s",
      "the",
      "name",
      "of",
      "the",
      "course",
      "with",
      "most",
      "number",
      "of",
      "enrollments",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The name of the course refers to Courses.course_name; the number of enrollments for a course is calculated using COUNT(Student_Enrolment_Courses.student_course_id); the course with the most enrollments is identified by finding the MAX(COUNT(Student_Enrolment_Courses.student_course_id)) grouped by Student_Enrolment_Courses.course_id."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the course with the most students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "course",
      "with",
      "the",
      "most",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the course refers to Courses.course_name; most students enrolled refers to max(count(Student_Enrolment_Courses.student_enrolment_id)) grouped by Student_Enrolment_Courses.course_id"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.current_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.state_province_county",
      "=",
      "'NorthCarolina",
      "'",
      "EXCEPT",
      "SELECT",
      "DISTINCT",
      "T3.last_name",
      "FROM",
      "Students",
      "AS",
      "T3",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T4",
      "ON",
      "T3.student_id",
      "=",
      "T4.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "current_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "state_province_county",
      "=",
      "value",
      "except",
      "select",
      "distinct",
      "t3",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "student_id",
      "=",
      "t4",
      ".",
      "student_id"
    ],
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "question_toks": [
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "currently",
      "live",
      "in",
      "the",
      "state",
      "of",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "program",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Last name of the students refers to Students.last_name; currently live in the state of North Carolina refers to Addresses.state_province_county = 'NorthCarolina'; have not registered in any degree program refers to Students.student_id NOT IN Student_Enrolment.student_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.current_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.state_province_county",
      "=",
      "'NorthCarolina",
      "'",
      "EXCEPT",
      "SELECT",
      "DISTINCT",
      "T3.last_name",
      "FROM",
      "Students",
      "AS",
      "T3",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T4",
      "ON",
      "T3.student_id",
      "=",
      "T4.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "current_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "state_province_county",
      "=",
      "value",
      "except",
      "select",
      "distinct",
      "t3",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "student_id",
      "=",
      "t4",
      ".",
      "student_id"
    ],
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "programs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "last name of the students refers to Students.last_name; live in North Carolina refers to Addresses.state_province_county = 'NorthCarolina' and Students.current_address_id = Addresses.address_id; not registered in any degree programs refers to Students.student_id NOT IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment);"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the date and id of the transcript with at least 2 course results.",
    "question_toks": [
      "Show",
      "the",
      "date",
      "and",
      "id",
      "of",
      "the",
      "transcript",
      "with",
      "at",
      "least",
      "2",
      "course",
      "results",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "date and id of the transcript refer to Transcripts.transcript_date and Transcripts.transcript_id; at least 2 course results means counting Transcript_Contents.student_course_id for each Transcript_Contents.transcript_id and filtering where the count is >= 2;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What is the date and id of the transcript with at least 2 courses listed?",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      "and",
      "id",
      "of",
      "the",
      "transcript",
      "with",
      "at",
      "least",
      "2",
      "courses",
      "listed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Transcripts`.`transcript_id` refers to the unique identifier of each transcript; `Transcripts`.`transcript_date` refers to the date the transcript was generated; `Transcript_Contents`.`transcript_id` links to `Transcripts`.`transcript_id`; at least 2 courses listed means COUNT(`Transcript_Contents`.`student_course_id`) >= 2 for each `transcript_id`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "query_toks": [
      "SELECT",
      "cell_mobile_number",
      "FROM",
      "Students",
      "WHERE",
      "first_name",
      "=",
      "'Timmothy",
      "'",
      "AND",
      "last_name",
      "=",
      "'Ward",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "question_toks": [
      "What",
      "is",
      "the",
      "phone",
      "number",
      "of",
      "the",
      "man",
      "with",
      "the",
      "first",
      "name",
      "Timmothy",
      "and",
      "the",
      "last",
      "name",
      "Ward",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"phone number\" refers to `Students`.`cell_mobile_number`; \"first name Timmothy\" refers to `Students`.`first_name = 'Timmothy'`; \"last name Ward\" refers to `Students`.`last_name = 'Ward'`;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "query_toks": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "\"timmothy\"",
      "and",
      "last_name",
      "=",
      "\"ward\""
    ],
    "query_toks_no_value": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question": "What is the mobile phone number of the student named Timmothy Ward ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "mobile",
      "phone",
      "number",
      "of",
      "the",
      "student",
      "named",
      "Timmothy",
      "Ward",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"ward\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The first name refers to Students.first_name; the last name refers to Students.last_name; the mobile phone number refers to Students.cell_mobile_number."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "question_toks": [
      "Who",
      "is",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First student to register refers to MIN(Students.date_first_registered); first name refers to Students.first_name; middle name refers to Students.middle_name; last name refers to Students.last_name;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the first, middle, and last name of the first student to register?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first name refers to first_name; middle name refers to middle_name; last name refers to last_name; first student to register refers to MIN(date_first_registered);"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "question_toks": [
      "Who",
      "is",
      "the",
      "earliest",
      "graduate",
      "of",
      "the",
      "school",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The earliest graduate is determined by MIN(date_left); first name refers to Students.first_name; middle name refers to Students.middle_name; last name refers to Students.last_name."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      "of",
      "the",
      "earliest",
      "school",
      "graduate",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First name refers to `Students`.`first_name`; middle name refers to `Students`.`middle_name`; last name refers to `Students`.`last_name`; earliest school graduate refers to the student with the minimum value in `Students`.`date_first_registered`, which can be found using MIN(`Students`.`date_first_registered`)."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "question_toks": [
      "Whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "address",
      "?",
      "List",
      "his",
      "or",
      "her",
      "first",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "permanent address refers to Students.permanent_address_id; current address refers to Students.current_address_id; different refers to Students.permanent_address_id != Students.current_address_id; first name refers to Students.first_name"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "the",
      "student",
      "whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "one",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Students`.`first_name` refers to the first name of the student; `Students`.`permanent_address_id` and `Students`.`current_address_id` refer to the permanent and current addresses of the student, respectively; the condition `Students`.`permanent_address_id` != `Students`.`current_address_id` is used to find students whose permanent address is different from their current address."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.address_id",
      ",",
      "T1.line_1",
      ",",
      "T1.line_2",
      "FROM",
      "Addresses",
      "AS",
      "T1",
      "JOIN",
      "Students",
      "AS",
      "T2",
      "ON",
      "T1.address_id",
      "=",
      "T2.current_address_id",
      "GROUP",
      "BY",
      "T1.address_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "address_id",
      ",",
      "t1",
      ".",
      "line_1",
      ",",
      "t1",
      ".",
      "line_2",
      "from",
      "addresses",
      "as",
      "t1",
      "join",
      "students",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "address_id",
      "=",
      "t2",
      ".",
      "current_address_id",
      "group",
      "by",
      "t1",
      ".",
      "address_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "question_toks": [
      "Which",
      "address",
      "holds",
      "the",
      "most",
      "number",
      "of",
      "students",
      "currently",
      "?",
      "List",
      "the",
      "address",
      "id",
      "and",
      "all",
      "lines",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most number of students currently refers to COUNT(Students.student_id) grouped by Students.current_address_id; address id refers to Addresses.address_id; all lines refers to Addresses.line_1, Addresses.line_2, Addresses.line_3"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.address_id",
      ",",
      "T1.line_1",
      ",",
      "T1.line_2",
      "FROM",
      "Addresses",
      "AS",
      "T1",
      "JOIN",
      "Students",
      "AS",
      "T2",
      "ON",
      "T1.address_id",
      "=",
      "T2.current_address_id",
      "GROUP",
      "BY",
      "T1.address_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "address_id",
      ",",
      "t1",
      ".",
      "line_1",
      ",",
      "t1",
      ".",
      "line_2",
      "from",
      "addresses",
      "as",
      "t1",
      "join",
      "students",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "address_id",
      "=",
      "t2",
      ".",
      "current_address_id",
      "group",
      "by",
      "t1",
      ".",
      "address_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      ",",
      "line",
      "1",
      ",",
      "and",
      "line",
      "2",
      "of",
      "the",
      "address",
      "with",
      "the",
      "most",
      "students",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to Addresses.address_id; line 1 refers to Addresses.line_1; line 2 refers to Addresses.line_2; most students refers to counting occurrences of Addresses.address_id in both Students.current_address_id and Students.permanent_address_id and finding the maximum."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question": "On average, when were the transcripts printed?",
    "question_toks": [
      "On",
      "average",
      ",",
      "when",
      "were",
      "the",
      "transcripts",
      "printed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "On average, when were the transcripts printed refers to AVG(`transcript_date`) in the `Transcripts` table."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question": "What is the average transcript date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "transcript",
      "date",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average transcript date refers to AVG(transcript_date); transcript_date is in DATETIME format in the Transcripts table; to calculate the average, convert transcript_date to a numeric format using UNIX_TIMESTAMP(transcript_date), calculate AVG, and convert back to DATETIME using FROM_UNIXTIME();"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question": "When is the first transcript released? List the date and details.",
    "question_toks": [
      "When",
      "is",
      "the",
      "first",
      "transcript",
      "released",
      "?",
      "List",
      "the",
      "date",
      "and",
      "details",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First transcript released refers to MIN(Transcripts.transcript_date); date refers to Transcripts.transcript_date; details refer to Transcripts.other_details"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "question_toks": [
      "What",
      "is",
      "the",
      "earliest",
      "date",
      "of",
      "a",
      "transcript",
      "release",
      ",",
      "and",
      "what",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The earliest date of a transcript release refers to MIN(Transcripts.transcript_date); details refer to Transcripts.other_details."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question": "How many transcripts are released?",
    "question_toks": [
      "How",
      "many",
      "transcripts",
      "are",
      "released",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "transcripts are released refers to count(Transcripts.transcript_id)"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question": "How many transcripts are listed?",
    "question_toks": [
      "How",
      "many",
      "transcripts",
      "are",
      "listed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "transcripts are listed refers to counting rows in the `Transcripts` table."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the last transcript release date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "transcript",
      "release",
      "date",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The last transcript release date refers to the most recent value in Transcripts.transcript_date; use MAX(Transcripts.transcript_date) to find it."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "When was the last transcript released?",
    "question_toks": [
      "When",
      "was",
      "the",
      "last",
      "transcript",
      "released",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            9
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "last transcript refers to MAX(Transcripts.transcript_date); released refers to Transcripts.transcript_date"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "FROM",
      "Transcript_Contents",
      "GROUP",
      "BY",
      "student_course_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "from",
      "transcript_contents",
      "group",
      "by",
      "student_course_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "question_toks": [
      "How",
      "many",
      "times",
      "at",
      "most",
      "can",
      "a",
      "course",
      "enrollment",
      "result",
      "show",
      "in",
      "different",
      "transcripts",
      "?",
      "Also",
      "show",
      "the",
      "course",
      "enrollment",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          55,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`course enrollment result` refers to `Transcript_Contents`.`student_course_id`; `show in different transcripts` refers to counting `Transcript_Contents`.`transcript_id` grouped by `Transcript_Contents`.`student_course_id`; `how many times at most` refers to finding the maximum count of `Transcript_Contents`.`transcript_id`; `also show the course enrollment id` refers to including `Transcript_Contents`.`student_course_id` in the result."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "FROM",
      "Transcript_Contents",
      "GROUP",
      "BY",
      "student_course_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "from",
      "transcript_contents",
      "group",
      "by",
      "student_course_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "times",
      "that",
      "a",
      "course",
      "shows",
      "up",
      "in",
      "different",
      "transcripts",
      "and",
      "what",
      "is",
      "that",
      "course",
      "'s",
      "enrollment",
      "id",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          55,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "To find the maximum number of times a course shows up in different transcripts, count the occurrences of each `student_course_id` in `Transcript_Contents` grouped by `student_course_id`. The course's enrollment ID corresponds to the `student_course_id` with the maximum count."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "question_toks": [
      "Show",
      "the",
      "date",
      "of",
      "the",
      "transcript",
      "which",
      "shows",
      "the",
      "least",
      "number",
      "of",
      "results",
      ",",
      "also",
      "list",
      "the",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "least number of results refers to MIN(COUNT(transcript_id)) in Transcript_Contents; date of the transcript refers to Transcripts.transcript_date; id refers to Transcripts.transcript_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the date and id of the transcript with the least number of results?",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      "and",
      "id",
      "of",
      "the",
      "transcript",
      "with",
      "the",
      "least",
      "number",
      "of",
      "results",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "date of the transcript refers to Transcripts.transcript_date; id of the transcript refers to Transcripts.transcript_id; least number of results refers to MIN(COUNT(Transcript_Contents.transcript_id)); the relationship between Transcripts and Transcript_Contents is through transcript_id;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Master",
      "'",
      "INTERSECT",
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value",
      "intersect",
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "question_toks": [
      "Find",
      "the",
      "semester",
      "when",
      "both",
      "Master",
      "students",
      "and",
      "Bachelor",
      "students",
      "got",
      "enrolled",
      "in",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Master students refers to Degree_Programs.degree_summary_name = 'Master'; Bachelor students refers to Degree_Programs.degree_summary_name = 'Bachelor'; got enrolled in refers to Student_Enrolment linking Degree_Programs.degree_program_id to Semesters.semester_id; semester refers to Semesters.semester_name; the condition requires finding semesters where both Degree_Programs.degree_summary_name = 'Master' and Degree_Programs.degree_summary_name = 'Bachelor' are present."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Master",
      "'",
      "INTERSECT",
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value",
      "intersect",
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "of",
      "the",
      "semester",
      "that",
      "had",
      "both",
      "Masters",
      "and",
      "Bachelors",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "'Masters students' refers to Degree_Programs.degree_summary_name = 'Master'; 'Bachelors students' refers to Degree_Programs.degree_summary_name = 'Bachelor'; 'Semester that had both' refers to the intersection of semester_id values in Student_Enrolment where both conditions are true."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question": "How many different addresses do the students currently live?",
    "question_toks": [
      "How",
      "many",
      "different",
      "addresses",
      "do",
      "the",
      "students",
      "currently",
      "live",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different addresses refers to distinct `Students`.`current_address_id`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question": "What are the different addresses that have students living there?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "addresses",
      "that",
      "have",
      "students",
      "living",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Addresses that have students living there refers to joining `Students.current_address_id` and `Students.permanent_address_id` with `Addresses.address_id`; different addresses refers to DISTINCT values of `Addresses.line_1`, `Addresses.line_2`, `Addresses.line_3`, `Addresses.city`, `Addresses.zip_postcode`, `Addresses.state_province_county`, `Addresses.country`."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks": [
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question": "List all the student details in reversed lexicographical order.",
    "question_toks": [
      "List",
      "all",
      "the",
      "student",
      "details",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Student details refer to all columns in the Students table; reversed lexicographical order refers to ORDER BY last_name DESC."
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks": [
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "question_toks": [
      "What",
      "other",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "students",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "other details refers to Students.other_student_details; reverse alphabetical order refers to ordering by Students.last_name DESC, Students.first_name DESC;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "query_toks": [
      "SELECT",
      "section_description",
      "FROM",
      "Sections",
      "WHERE",
      "section_name",
      "=",
      "'h",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "value"
    ],
    "question": "Describe the section h.",
    "question_toks": [
      "Describe",
      "the",
      "section",
      "h",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "section h refers to Sections.section_name = 'h' and description refers to Sections.section_description"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "query_toks": [
      "SELECT",
      "section_description",
      "FROM",
      "Sections",
      "WHERE",
      "section_name",
      "=",
      "'h",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "value"
    ],
    "question": "What is the description for the section named h?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "for",
      "the",
      "section",
      "named",
      "h",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "section named h refers to Sections.section_name = 'h'; description refers to Sections.section_description"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "query_toks": [
      "select",
      "t1.first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1.permanent_address_id",
      "=",
      "t2.address_id",
      "where",
      "t2.country",
      "=",
      "\"haiti\"",
      "or",
      "t1.cell_mobile_number",
      "=",
      "\"09700166582\""
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "permanent_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "country",
      "=",
      "value",
      "or",
      "t1",
      ".",
      "cell_mobile_number",
      "=",
      "value"
    ],
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "the",
      "students",
      "who",
      "permanently",
      "live",
      "in",
      "the",
      "country",
      "Haiti",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"haiti\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"09700166582\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Permanently live in the country Haiti refers to Addresses.country = 'Haiti' and the relationship between Students and Addresses is through Students.permanent_address_id = Addresses.address_id; cell phone number 09700166582 refers to Students.cell_mobile_number = '09700166582'; the result should retrieve Students.first_name;"
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "query_toks": [
      "select",
      "t1.first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1.permanent_address_id",
      "=",
      "t2.address_id",
      "where",
      "t2.country",
      "=",
      "\"haiti\"",
      "or",
      "t1.cell_mobile_number",
      "=",
      "\"09700166582\""
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "permanent_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "country",
      "=",
      "value",
      "or",
      "t1",
      ".",
      "cell_mobile_number",
      "=",
      "value"
    ],
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "Haiti",
      "permanently",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"haiti\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"09700166582\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Students who live permanently in Haiti refers to Students.permanent_address_id linking to Addresses.address_id where Addresses.country = 'Haiti'; Students with the cell phone number '09700166582' refers to Students.cell_mobile_number = '09700166582'; The required output is Students.first_name for students meeting either condition."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question": "List the title of all cartoons in alphabetical order.",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoons",
      "in",
      "alphabetical",
      "order",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "alphabetical order refers to ORDER BY Title ASC"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "question_toks": [
      "What",
      "are",
      "the",
      "titles",
      "of",
      "the",
      "cartoons",
      "sorted",
      "alphabetically",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "titles of the cartoons sorted alphabetically refers to SELECT `Cartoon`.`Title` ORDER BY `Cartoon`.`Title` ASC"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "List all cartoon directed by \"Ben Jones\".",
    "question_toks": [
      "List",
      "all",
      "cartoon",
      "directed",
      "by",
      "``",
      "Ben",
      "Jones",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Ben Jones refers to Cartoon.Directed_by = 'Ben Jones';"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"Ben Jones\" refers to Directed_by = 'Ben Jones'; names of all cartoons refer to Title;"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Cartoon",
      "WHERE",
      "Written_by",
      "=",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "value"
    ],
    "question": "How many cartoons were written by \"Joseph Kuhr\"?",
    "question_toks": [
      "How",
      "many",
      "cartoons",
      "were",
      "written",
      "by",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "written by 'Joseph Kuhr' refers to Cartoon.Written_by = 'Joseph Kuhr'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Cartoon",
      "WHERE",
      "Written_by",
      "=",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "value"
    ],
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cartoones",
      "written",
      "by",
      "Joseph",
      "Kuhr",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of cartoons refers to COUNT(*); written by Joseph Kuhr refers to Cartoon.Written_by LIKE '%Joseph Kuhr%'."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks": [
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question": "list all cartoon titles and their directors ordered by their air date",
    "question_toks": [
      "list",
      "all",
      "cartoon",
      "titles",
      "and",
      "their",
      "directors",
      "ordered",
      "by",
      "their",
      "air",
      "date"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "cartoon titles refers to Cartoon.Title; directors refers to Cartoon.Directed_by; air date refers to Cartoon.Original_air_date; ordered by their air date refers to sorting by Cartoon.Original_air_date in ascending order"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks": [
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question": "What is the name and directors of all the cartoons that are ordered by air date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "directors",
      "of",
      "all",
      "the",
      "cartoons",
      "that",
      "are",
      "ordered",
      "by",
      "air",
      "date",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to Cartoon.Title; directors refers to Cartoon.Directed_by; ordered by air date refers to sorting by Cartoon.Original_air_date"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      "OR",
      "Directed_by",
      "=",
      "``",
      "Brandon",
      "Vietti",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      "or",
      "directed_by",
      "=",
      "value"
    ],
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoon",
      "directed",
      "by",
      "``",
      "Ben",
      "Jones",
      "''",
      "or",
      "``",
      "Brandon",
      "Vietti",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Ben Jones and Brandon Vietti refer to Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; title refers to Title;"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      "OR",
      "Directed_by",
      "=",
      "``",
      "Brandon",
      "Vietti",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      "or",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "question_toks": [
      "What",
      "are",
      "the",
      "titles",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "or",
      "Brandon",
      "Vietti",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Ben Jones or Brandon Vietti refers to Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'; titles of all cartoons refer to Title;"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "question_toks": [
      "Which",
      "country",
      "has",
      "the",
      "most",
      "of",
      "TV",
      "Channels",
      "?",
      "List",
      "the",
      "country",
      "and",
      "number",
      "of",
      "TV",
      "Channels",
      "it",
      "has",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most of TV Channels refers to MAX(COUNT(id)) grouped by Country."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the country with the most number of TV Channels and how many does it have?",
    "question_toks": [
      "What",
      "is",
      "the",
      "country",
      "with",
      "the",
      "most",
      "number",
      "of",
      "TV",
      "Channels",
      "and",
      "how",
      "many",
      "does",
      "it",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Country refers to `TV_Channel`.`Country`; Number of TV Channels refers to COUNT(`TV_Channel`.`id`); Most number of TV Channels refers to MAX(COUNT(`TV_Channel`.`id`));"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question": "List the number of different series names and contents in the TV Channel table.",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "different",
      "series",
      "names",
      "and",
      "contents",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of different series names refers to COUNT(DISTINCT TV_Channel.series_name); number of different contents refers to COUNT(DISTINCT TV_Channel.Content)"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question": "How many different series and contents are listed in the TV Channel table?",
    "question_toks": [
      "How",
      "many",
      "different",
      "series",
      "and",
      "contents",
      "are",
      "listed",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different series refers to distinct TV_Channel.series_name; contents refers to distinct TV_Channel.Content"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Content",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "content",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"serial name\" refers to `TV_Channel`.`series_name`; \"Sky Radio\" is the value in `TV_Channel`.`series_name`; \"content\" refers to `TV_Channel`.`Content`"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Content",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the content of the series Sky Radio?",
    "question_toks": [
      "What",
      "is",
      "the",
      "content",
      "of",
      "the",
      "series",
      "Sky",
      "Radio",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "content refers to TV_Channel.Content; Sky Radio refers to TV_Channel.series_name = 'Sky Radio'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Package_Option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "Package",
      "Option",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Sky Radio refers to series_name = 'Sky Radio'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Package_Option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "question_toks": [
      "What",
      "are",
      "the",
      "Package",
      "Options",
      "of",
      "the",
      "TV",
      "Channels",
      "whose",
      "series",
      "names",
      "are",
      "Sky",
      "Radio",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "series names are Sky Radio refers to TV_Channel.series_name = 'Sky Radio'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "How many TV Channel using language English?",
    "question_toks": [
      "How",
      "many",
      "TV",
      "Channel",
      "using",
      "language",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "TV Channel refers to the `TV_Channel` table; using language English refers to `TV_Channel`.`Language` = 'English';"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "How many TV Channels use the English language?",
    "question_toks": [
      "How",
      "many",
      "TV",
      "Channels",
      "use",
      "the",
      "English",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "TV Channels refers to the `TV_Channel` table; use the English language refers to `TV_Channel`.`Language` = 'English';"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "question_toks": [
      "List",
      "the",
      "language",
      "used",
      "least",
      "number",
      "of",
      "TV",
      "Channel",
      ".",
      "List",
      "language",
      "and",
      "number",
      "of",
      "TV",
      "Channel",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Language` refers to `TV_Channel`.`Language`. The number of TV channels for each language is determined using `COUNT(*)` grouped by `TV_Channel`.`Language`. The least number of TV channels is identified using `MIN(COUNT(*))`."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "question_toks": [
      "What",
      "are",
      "the",
      "languages",
      "used",
      "by",
      "the",
      "least",
      "number",
      "of",
      "TV",
      "Channels",
      "and",
      "how",
      "many",
      "channels",
      "use",
      "it",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Languages refers to TV_Channel.Language; least number of TV Channels refers to MIN(COUNT(TV_Channel.id)); how many channels use it refers to COUNT(TV_Channel.id);"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language"
    ],
    "question": "List each language and the number of TV Channels using it.",
    "question_toks": [
      "List",
      "each",
      "language",
      "and",
      "the",
      "number",
      "of",
      "TV",
      "Channels",
      "using",
      "it",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Group by `TV_Channel`.`Language` and count the number of rows for each language."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language"
    ],
    "question": "For each language, list the number of TV Channels that use it.",
    "question_toks": [
      "For",
      "each",
      "language",
      ",",
      "list",
      "the",
      "number",
      "of",
      "TV",
      "Channels",
      "that",
      "use",
      "it",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Group by `TV_Channel`.`Language` and count `TV_Channel`.`id`."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Title",
      "=",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "``",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "question_toks": [
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "''",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'The Rise of the Blue Beetle!' refers to Cartoon.Title = 'The Rise of the Blue Beetle!'; TV Channel's series name refers to TV_Channel.series_name; the relationship between Cartoon and TV_Channel is established via Cartoon.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Title",
      "=",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "``",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "series",
      "name",
      "of",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'The Rise of the Blue Beetle' refers to Cartoon.Title = 'The Rise of the Blue Beetle!'; 'series name of the TV Channel' refers to TV_Channel.series_name; 'shows the cartoon' indicates a relationship between Cartoon.Channel and TV_Channel.id."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Title",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      "Cartoons",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Cartoons refers to the Cartoon table; title refers to Cartoon.Title; TV Channel with series name 'Sky Radio' refers to TV_Channel.series_name = 'Sky Radio'; the relationship between Cartoon and TV_Channel is Cartoon.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Title",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "title",
      "of",
      "all",
      "the",
      "cartools",
      "that",
      "are",
      "on",
      "the",
      "TV",
      "Channel",
      "with",
      "the",
      "series",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Sky Radio' refers to TV_Channel.series_name = 'Sky Radio'; titles of cartoons are in Cartoon.Title; the relationship is established via Cartoon.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks": [
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question": "List the Episode of all TV series sorted by rating.",
    "question_toks": [
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "sorted",
      "by",
      "rating",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "sorted by rating refers to order by cast(`TV_series`.`Rating` as real)"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks": [
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question": "What are all of the episodes ordered by ratings?",
    "question_toks": [
      "What",
      "are",
      "all",
      "of",
      "the",
      "episodes",
      "ordered",
      "by",
      "ratings",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ordered by cast(real as float, Rating) desc"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks": [
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "question_toks": [
      "List",
      "top",
      "3",
      "highest",
      "Rating",
      "TV",
      "series",
      ".",
      "List",
      "the",
      "TV",
      "series",
      "'s",
      "Episode",
      "and",
      "Rating",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Top 3 highest Rating refers to ORDER BY CAST(Rating AS REAL) DESC LIMIT 3; List the TV series's Episode and Rating refers to SELECT Episode, Rating"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks": [
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "question_toks": [
      "What",
      "are",
      "3",
      "most",
      "highly",
      "rated",
      "episodes",
      "in",
      "the",
      "TV",
      "series",
      "table",
      "and",
      "what",
      "were",
      "those",
      "ratings",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "3 most highly rated episodes refers to ORDER BY TV_series.Rating DESC LIMIT 3; ratings refers to TV_series.Rating; episodes refers to TV_series.Episode"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question": "What is minimum and maximum share of TV series?",
    "question_toks": [
      "What",
      "is",
      "minimum",
      "and",
      "maximum",
      "share",
      "of",
      "TV",
      "series",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "minimum and maximum share refers to MIN(TV_series.Share) and MAX(TV_series.Share)"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question": "What is the maximum and minimum share for the TV series?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "for",
      "the",
      "TV",
      "series",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Maximum share refers to MAX(TV_series.Share); Minimum share refers to MIN(TV_series.Share)."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Air_Date",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "air",
      "date",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Episode \"A Love of a Lifetime\" refers to TV_series.Episode = 'A Love of a Lifetime'; air date refers to TV_series.Air_Date"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Air_Date",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "question_toks": [
      "When",
      "did",
      "the",
      "episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "air",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"A Love of a Lifetime\" refers to TV_series.Episode = 'A Love of a Lifetime'; air date refers to TV_series.Air_Date"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Weekly_Rank",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "Weekly",
      "Rank",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"Weekly Rank\" refers to TV_series.Weekly_Rank; Episode \"A Love of a Lifetime\" refers to TV_series.Episode = 'A Love of a Lifetime'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Weekly_Rank",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "weekly",
      "rank",
      "for",
      "the",
      "episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "weekly rank refers to TV_series.Weekly_Rank; 'A Love of a Lifetime' refers to TV_series.Episode = 'A Love of a Lifetime'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "question_toks": [
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"A Love of a Lifetime\" refers to TV_series.Episode = 'A Love of a Lifetime'; TV Channel's series name refers to TV_Channel.series_name."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "series",
      "that",
      "has",
      "the",
      "episode",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"A Love of a Lifetime\" refers to TV_series.Episode = 'A Love of a Lifetime'; the series name refers to TV_Channel.series_name; the relationship is established via TV_series.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Episode",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "question_toks": [
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "``",
      "Sky",
      "Radio",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "TV Channel with series name 'Sky Radio' refers to series_name = 'Sky Radio' and TV_series.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Episode",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the episode for the TV series named \"Sky Radio\"?",
    "question_toks": [
      "What",
      "is",
      "the",
      "episode",
      "for",
      "the",
      "TV",
      "series",
      "named",
      "``",
      "Sky",
      "Radio",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Sky Radio' refers to TV_Channel.series_name = 'Sky Radio'; Episode refers to TV_series.Episode; the relationship is established via TV_series.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "Directed_by",
      "FROM",
      "cartoon",
      "GROUP",
      "BY",
      "Directed_by"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "group",
      "by",
      "directed_by"
    ],
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "cartoons",
      "directed",
      "by",
      "each",
      "of",
      "the",
      "listed",
      "directors",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of cartoons refers to COUNT(Cartoon.id); directed by each of the listed directors refers to GROUP BY Cartoon.Directed_by."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "Directed_by",
      "FROM",
      "cartoon",
      "GROUP",
      "BY",
      "Directed_by"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "group",
      "by",
      "directed_by"
    ],
    "question": "How many cartoons did each director create?",
    "question_toks": [
      "How",
      "many",
      "cartoons",
      "did",
      "each",
      "director",
      "create",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Each director refers to unique values in `Cartoon`.`Directed_by`; cartoons refer to rows in the `Cartoon` table."
  },
  {
    "db_id": "tvshow",
    "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "query_toks": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "desc",
      "limit",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the production code and channel of the most recently aired cartoon .",
    "question_toks": [
      "Find",
      "the",
      "production",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recently",
      "aired",
      "cartoon",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most recently aired refers to MAX(Original_air_date); production code refers to Production_code; channel refers to Channel"
  },
  {
    "db_id": "tvshow",
    "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "query_toks": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "desc",
      "limit",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the produdction code and channel of the most recent cartoon ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "produdction",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recent",
      "cartoon",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most recent cartoon refers to MAX(Cartoon.Original_air_date)"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "query_toks": [
      "SELECT",
      "package_option",
      ",",
      "series_name",
      "FROM",
      "TV_Channel",
      "WHERE",
      "hight_definition_TV",
      "=",
      "``",
      "yes",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "value"
    ],
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "question_toks": [
      "Find",
      "the",
      "package",
      "choice",
      "and",
      "series",
      "name",
      "of",
      "the",
      "TV",
      "channel",
      "that",
      "has",
      "high",
      "definition",
      "TV",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "high-definition TV refers to TV_Channel.Hight_definition_TV = 'yes'; package choice and series name refer to TV_Channel.Package_Option and TV_Channel.series_name"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "query_toks": [
      "SELECT",
      "package_option",
      ",",
      "series_name",
      "FROM",
      "TV_Channel",
      "WHERE",
      "hight_definition_TV",
      "=",
      "``",
      "yes",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "value"
    ],
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "question_toks": [
      "What",
      "are",
      "the",
      "package",
      "options",
      "and",
      "the",
      "name",
      "of",
      "the",
      "series",
      "for",
      "the",
      "TV",
      "Channel",
      "that",
      "supports",
      "high",
      "definition",
      "TV",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "package options refers to TV_Channel.Package_Option; name of the series refers to TV_Channel.series_name; supports high-definition TV refers to TV_Channel.Hight_definition_TV = 'yes';"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question_toks": [
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "playing",
      "some",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'written by Todd Casey' refers to Cartoon.Written_by = 'Todd Casey'; 'playing some cartoon' implies a join between Cartoon and TV_Channel on Cartoon.Channel = TV_Channel.id; 'countries' TV channels' refers to selecting TV_Channel.Country"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "cartoons",
      "on",
      "TV",
      "that",
      "were",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Cartoons on TV' refers to the Cartoon table; 'written by Todd Casey' refers to Cartoon.Written_by = 'Todd Casey'; 'countries' refers to TV_Channel.Country; the relationship between Cartoon and TV_Channel is established via Cartoon.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "question_toks": [
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "not",
      "playing",
      "any",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "countries' TV channels refers to TV_Channel.Country; not playing any cartoon refers to excluding countries where Cartoon.Channel = TV_Channel.id and Cartoon.Written_by = 'Todd Casey'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "are",
      "not",
      "playing",
      "cartoons",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "countries refers to TV_Channel.Country; not playing cartoons refers to excluding countries where Cartoon.Channel = TV_Channel.id AND Cartoon.Written_by = 'Todd Casey';"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Michael",
      "Chang",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value"
    ],
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question_toks": [
      "Find",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "the",
      "tv",
      "channel",
      "that",
      "is",
      "playing",
      "some",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "Michael",
      "Chang",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Cartoons directed by Ben Jones and Michael Chang refers to Cartoon.Directed_by LIKE '%Ben Jones%' OR Cartoon.Directed_by LIKE '%Michael Chang%'; TV channel playing cartoons refers to joining Cartoon and TV_Channel on Cartoon.Channel = TV_Channel.id; series name and country refers to TV_Channel.series_name and TV_Channel.Country"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Michael",
      "Chang",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question_toks": [
      "What",
      "is",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "all",
      "TV",
      "channels",
      "that",
      "are",
      "playing",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "cartoons",
      "directed",
      "by",
      "Michael",
      "Chang",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "'cartoons directed by Ben Jones' refers to Cartoon.Directed_by = 'Ben Jones'; 'cartoons directed by Michael Chang' refers to Cartoon.Directed_by = 'Michael Chang'; the relationship between Cartoon and TV_Channel is Cartoon.Channel = TV_Channel.id; the required columns are TV_Channel.series_name and TV_Channel.Country"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query_toks": [
      "SELECT",
      "Pixel_aspect_ratio_PAR",
      ",",
      "country",
      "FROM",
      "tv_channel",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "'English",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "question_toks": [
      "find",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "nation",
      "of",
      "the",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Pixel aspect ratio' refers to TV_Channel.Pixel_aspect_ratio_PAR; 'Nation' refers to TV_Channel.Country; 'Do not use English' refers to TV_Channel.Language != 'English'"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query_toks": [
      "SELECT",
      "Pixel_aspect_ratio_PAR",
      ",",
      "country",
      "FROM",
      "tv_channel",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "'English",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "question_toks": [
      "What",
      "is",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "country",
      "of",
      "origin",
      "for",
      "all",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Pixel aspect ratio refers to TV_Channel.Pixel_aspect_ratio_PAR; country of origin refers to TV_Channel.Country; do not use English refers to TV_Channel.Language != 'English'."
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "tv_channel",
      "GROUP",
      "BY",
      "country",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "question_toks": [
      "find",
      "id",
      "of",
      "the",
      "tv",
      "channels",
      "that",
      "from",
      "the",
      "countries",
      "where",
      "have",
      "more",
      "than",
      "two",
      "tv",
      "channels",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "more than two tv channels refers to HAVING COUNT(TV_Channel.id) > 2; id of the tv channels refers to TV_Channel.id;"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "tv_channel",
      "GROUP",
      "BY",
      "country",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "all",
      "tv",
      "channels",
      "that",
      "have",
      "more",
      "than",
      "2",
      "TV",
      "channels",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ids of all TV channels refers to TV_Channel.id; have more than 2 TV channels refers to counting occurrences of TV_Channel.id in Cartoon.Channel and TV_series.Channel and filtering for counts > 2"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "question_toks": [
      "find",
      "the",
      "id",
      "of",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "play",
      "any",
      "cartoon",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "TV channels refers to TV_Channel.id; do not play any cartoon refers to excluding TV_Channel.id values linked to Cartoon rows; cartoon directed by Ben Jones refers to Cartoon.Directed_by = 'Ben Jones'; the relationship is established via Cartoon.Channel = TV_Channel.id"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "have",
      "any",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "do not have any cartoons directed by Ben Jones refers to TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "query_toks": [
      "SELECT",
      "package_option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      ")"
    ],
    "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "question_toks": [
      "find",
      "the",
      "package",
      "option",
      "of",
      "the",
      "tv",
      "channel",
      "that",
      "do",
      "not",
      "have",
      "any",
      "cartoon",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    21,
                    false
                  ],
                  null
                ],
                "\"Ben Jones\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "do not have any cartoon directed by Ben Jones refers to excluding TV channels where Cartoon.Directed_by = 'Ben Jones'; package option refers to TV_Channel.Package_Option"
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "query_toks": [
      "SELECT",
      "package_option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      ")"
    ],
    "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "question_toks": [
      "What",
      "are",
      "the",
      "package",
      "options",
      "of",
      "all",
      "tv",
      "channels",
      "that",
      "are",
      "not",
      "playing",
      "any",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    21,
                    false
                  ],
                  null
                ],
                "\"Ben Jones\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "not playing any cartoons directed by Ben Jones refers to `Cartoon`.`Directed_by != 'Ben Jones'`"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(*) FROM poker_player",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question": "How many poker players are there?",
    "question_toks": [
      "How",
      "many",
      "poker",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of poker players corresponds to the count of unique Poker_Player_ID values in the poker_player table."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(*) FROM poker_player",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question": "Count the number of poker players.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of poker players refers to counting the distinct values in `poker_player`.`Poker_Player_ID`."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks": [
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question": "List the earnings of poker players in descending order.",
    "question_toks": [
      "List",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Earnings refers to poker_player.Earnings; descending order refers to ORDER BY poker_player.Earnings DESC"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks": [
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question": "What are the earnings of poker players, ordered descending by value?",
    "question_toks": [
      "What",
      "are",
      "the",
      "earnings",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "descending",
      "by",
      "value",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Earnings refers to poker_player.Earnings; ordered descending by value refers to ORDER BY poker_player.Earnings DESC"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks": [
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question": "List the final tables made and the best finishes of poker players.",
    "question_toks": [
      "List",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "the",
      "best",
      "finishes",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'final tables made' refers to `poker_player`.`Final_Table_Made`; 'best finishes' refers to `poker_player`.`Best_Finish`;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks": [
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question": "What are the final tables made and best finishes for all poker players?",
    "question_toks": [
      "What",
      "are",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "best",
      "finishes",
      "for",
      "all",
      "poker",
      "players",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Final tables made' refers to `poker_player`.`Final_Table_Made`; 'Best finishes' refers to `poker_player`.`Best_Finish`."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(Earnings) FROM poker_player",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question": "What is the average earnings of poker players?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average earnings refers to AVG(Earnings); poker players are in the poker_player table."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(Earnings) FROM poker_player",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question": "Return the average earnings across all poker players.",
    "question_toks": [
      "Return",
      "the",
      "average",
      "earnings",
      "across",
      "all",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average earnings refers to AVG(poker_player.Earnings)"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the money rank of the poker player with the highest earnings?",
    "question_toks": [
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "highest",
      "earnings",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "highest earnings refers to MAX(poker_player.Earnings); money rank refers to poker_player.Money_Rank"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the money rank of the player with the greatest earnings.",
    "question_toks": [
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "player",
      "with",
      "the",
      "greatest",
      "earnings",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Greatest earnings refers to MAX(Earnings); money rank refers to Money_Rank."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Final_Table_Made",
      ")",
      "FROM",
      "poker_player",
      "WHERE",
      "Earnings",
      "<",
      "200000"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "value"
    ],
    "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "final",
      "tables",
      "made",
      "among",
      "poker",
      "players",
      "with",
      "earnings",
      "less",
      "than",
      "200000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum number of final tables made refers to MAX(poker_player.Final_Table_Made); earnings less than 200000 refers to poker_player.Earnings < 200000"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Final_Table_Made",
      ")",
      "FROM",
      "poker_player",
      "WHERE",
      "Earnings",
      "<",
      "200000"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "value"
    ],
    "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "question_toks": [
      "Return",
      "the",
      "maximum",
      "final",
      "tables",
      "made",
      "across",
      "all",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "below",
      "200000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum final tables made refers to MAX(Final_Table_Made); earnings below 200000 refers to Earnings < 200000;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id"
    ],
    "question": "What are the names of poker players?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of poker players refers to `people`.`Name`; poker players refers to `poker_player`.`People_ID` linked to `people`.`People_ID`;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id"
    ],
    "question": "Return the names of all the poker players.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "all",
      "the",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of poker players refer to people.Name; poker players are identified by joining poker_player.People_ID with people.People_ID;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T2.Earnings",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t2",
      ".",
      "earnings",
      ">",
      "value"
    ],
    "question": "What are the names of poker players whose earnings is higher than 300000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "whose",
      "earnings",
      "is",
      "higher",
      "than",
      "300000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of poker players refers to people.Name; earnings higher than 300000 refers to poker_player.Earnings > 300000; join poker_player and people on poker_player.People_ID = people.People_ID"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T2.Earnings",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t2",
      ".",
      "earnings",
      ">",
      "value"
    ],
    "question": "Give the names of poker players who have earnings above 300000.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "above",
      "300000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of poker players refers to people.Name; earnings above 300000 refers to poker_player.Earnings > 300000; the poker_player table is joined with the people table using the People_ID column"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Final_Table_Made"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "final_table_made"
    ],
    "question": "List the names of poker players ordered by the final tables made in ascending order.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "ordered",
      "by",
      "the",
      "final",
      "tables",
      "made",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of poker players refers to people.Name; ordered by the final tables made refers to poker_player.Final_Table_Made in ascending order; join people and poker_player on people.People_ID = poker_player.People_ID;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Final_Table_Made"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "final_table_made"
    ],
    "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "ascending",
      "by",
      "the",
      "number",
      "of",
      "final",
      "tables",
      "they",
      "have",
      "made",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of poker players refers to people.Name; number of final tables they have made refers to poker_player.Final_Table_Made; ordered ascending by refers to ORDER BY poker_player.Final_Table_Made ASC;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Birth_Date",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the birth date of the poker player with the lowest earnings?",
    "question_toks": [
      "What",
      "is",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "birth date refers to people.Birth_Date; the lowest earnings refers to min(poker_player.Earnings)"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Birth_Date",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "asc",
      "limit",
      "value"
    ],
    "question": "Return the birth date of the poker player with the lowest earnings.",
    "question_toks": [
      "Return",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "birth date refers to people.Birth_Date; the lowest earnings refers to MIN(poker_player.Earnings); the relationship between poker_player and people is through People_ID"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Money_Rank",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Height",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "height",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the money rank of the tallest poker player?",
    "question_toks": [
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "tallest",
      "poker",
      "player",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "money rank refers to poker_player.Money_Rank; tallest poker player refers to MAX(people.Height); link between poker_player and people is people.People_ID = poker_player.People_ID;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Money_Rank",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Height",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "height",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the money rank of the poker player with the greatest height.",
    "question_toks": [
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "greatest",
      "height",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Money rank refers to poker_player.Money_Rank; greatest height refers to MAX(people.Height); linkage is through poker_player.People_ID = people.People_ID"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.Earnings",
      ")",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T1.Height",
      ">",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "height",
      ">",
      "value"
    ],
    "question": "What is the average earnings of poker players with height higher than 200?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "with",
      "height",
      "higher",
      "than",
      "200",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average earnings refers to AVG(poker_player.Earnings); height higher than 200 refers to people.Height > 200; poker players refers to the join between poker_player and people on poker_player.People_ID = people.People_ID;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.Earnings",
      ")",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T1.Height",
      ">",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "height",
      ">",
      "value"
    ],
    "question": "Give average earnings of poker players who are taller than 200.",
    "question_toks": [
      "Give",
      "average",
      "earnings",
      "of",
      "poker",
      "players",
      "who",
      "are",
      "taller",
      "than",
      "200",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average earnings refers to AVG(Earnings); poker players refers to poker_player; taller than 200 refers to Height > 200; Height refers to people.Height; Earnings refers to poker_player.Earnings; join condition refers to poker_player.People_ID = people.People_ID;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "desc"
    ],
    "question": "What are the names of poker players in descending order of earnings?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "of",
      "earnings",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of poker players refers to people.Name; descending order of earnings refers to ORDER BY poker_player.Earnings DESC; join people and poker_player on people.People_ID = poker_player.People_ID"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "desc"
    ],
    "question": "Return the names of poker players sorted by their earnings descending.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "sorted",
      "by",
      "their",
      "earnings",
      "descending",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of poker players are stored in people.Name; earnings are stored in poker_player.Earnings; descending order refers to ORDER BY poker_player.Earnings DESC; join people and poker_player using people.People_ID = poker_player.People_ID;"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "query_toks": [
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "nationality"
    ],
    "question": "What are different nationalities of people and the corresponding number of people from each nation?",
    "question_toks": [
      "What",
      "are",
      "different",
      "nationalities",
      "of",
      "people",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "people",
      "from",
      "each",
      "nation",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different nationalities refer to unique values in the `people`.`Nationality` column. The number of people from each nation can be calculated by counting the rows (using COUNT(`people`.`People_ID`)) for each unique nationality."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "query_toks": [
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "nationality"
    ],
    "question": "How many people are there of each nationality?",
    "question_toks": [
      "How",
      "many",
      "people",
      "are",
      "there",
      "of",
      "each",
      "nationality",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of people for each nationality can be calculated by grouping the `people` table by the `Nationality` column and counting the rows in each group."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most common nationality of people?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "common",
      "nationality",
      "of",
      "people",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most common nationality refers to max(count(people.Nationality))"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the nationality that is most common across all people.",
    "question_toks": [
      "Give",
      "the",
      "nationality",
      "that",
      "is",
      "most",
      "common",
      "across",
      "all",
      "people",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most common nationality refers to Nationality where MAX(COUNT(people.Nationality))"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the nationalities that are shared by at least two people?",
    "question_toks": [
      "What",
      "are",
      "the",
      "nationalities",
      "that",
      "are",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "people",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "To find nationalities shared by at least two people, group the data by `people.Nationality`, count the occurrences of each nationality, and filter for counts greater than or equal to 2."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Return the nationalities for which there are two or more people.",
    "question_toks": [
      "Return",
      "the",
      "nationalities",
      "for",
      "which",
      "there",
      "are",
      "two",
      "or",
      "more",
      "people",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Nationality` for which there are two or more people refers to GROUP BY `people`.`Nationality` HAVING COUNT(`people`.`People_ID`) >= 2"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question": "List the names and birth dates of people in ascending alphabetical order of name.",
    "question_toks": [
      "List",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names refers to people.Name; birth dates refers to people.Birth_Date; ascending alphabetical order of name refers to ORDER BY people.Name ASC"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "people",
      ",",
      "ordered",
      "by",
      "their",
      "names",
      "in",
      "alphabetical",
      "order",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names refers to people.Name; birth dates refers to people.Birth_Date; ordered by their names in alphabetical order refers to sorting by people.Name in ascending order"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "``",
      "Russia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "Show names of people whose nationality is not \"Russia\".",
    "question_toks": [
      "Show",
      "names",
      "of",
      "people",
      "whose",
      "nationality",
      "is",
      "not",
      "``",
      "Russia",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of people refers to people.Name; nationality is not 'Russia' refers to people.Nationality != 'Russia';"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "``",
      "Russia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of people who are not from Russia?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "people",
      "who",
      "are",
      "not",
      "from",
      "Russia",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of people refers to `people`.`Name`; not from Russia refers to `people`.`Nationality` != 'Russia';"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "People_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "People_ID",
      "FROM",
      "poker_player",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "people_id",
      "not",
      "in",
      "(",
      "select",
      "people_id",
      "from",
      "poker_player",
      ")"
    ],
    "question": "List the names of people that are not poker players.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "people",
      "that",
      "are",
      "not",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      2,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of people refers to `people`.`Name`; not poker players refers to `People_ID` values in `people` that are not in `poker_player`.`People_ID`."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "People_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "People_ID",
      "FROM",
      "poker_player",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "people_id",
      "not",
      "in",
      "(",
      "select",
      "people_id",
      "from",
      "poker_player",
      ")"
    ],
    "question": "What are the names of people who do not play poker?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "people",
      "who",
      "do",
      "not",
      "play",
      "poker",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      2,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of people refers to people.Name; do not play poker refers to people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)"
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question": "How many distinct nationalities are there?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "nationalities",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of distinct nationalities is determined by counting unique values in the `people`.`Nationality` column using the `DISTINCT` keyword."
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question": "Count the number of different nationalities.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The count of different nationalities is determined by counting the distinct values in the `Nationality` column of the `people` table."
  },
  {
    "db_id": "voter_1",
    "query": "SELECT count(*) FROM area_code_state",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "area_code_state"
    ],
    "question": "How many states are there?",
    "question_toks": [
      "How",
      "many",
      "states",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "states refers to counting rows in AREA_CODE_STATE;"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "query_toks": [
      "SELECT",
      "contestant_number",
      ",",
      "contestant_name",
      "FROM",
      "contestants",
      "ORDER",
      "BY",
      "contestant_name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "contestant_number",
      ",",
      "contestant_name",
      "from",
      "contestants",
      "order",
      "by",
      "contestant_name",
      "desc"
    ],
    "question": "List the contestant numbers and names, ordered by contestant name descending.",
    "question_toks": [
      "List",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      ",",
      "ordered",
      "by",
      "contestant",
      "name",
      "descending",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "contestant numbers and names refer to CONTESTANTS.contestant_number and CONTESTANTS.contestant_name; ordered by contestant name descending refers to ORDER BY CONTESTANTS.contestant_name DESC"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "query_toks": [
      "SELECT",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "FROM",
      "votes"
    ],
    "query_toks_no_value": [
      "select",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "from",
      "votes"
    ],
    "question": "List the vote ids, phone numbers and states of all votes.",
    "question_toks": [
      "List",
      "the",
      "vote",
      "ids",
      ",",
      "phone",
      "numbers",
      "and",
      "states",
      "of",
      "all",
      "votes",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "vote ids refers to VOTES.vote_id; phone numbers refers to VOTES.phone_number; states refers to VOTES.state;"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "from",
      "area_code_state"
    ],
    "question": "What are the maximum and minimum values of area codes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "values",
      "of",
      "area",
      "codes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum and minimum values refer to Max(AREA_CODE_STATE.area_code) and Min(AREA_CODE_STATE.area_code)"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "created",
      ")",
      "FROM",
      "votes",
      "WHERE",
      "state",
      "=",
      "'CA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "created",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "value"
    ],
    "question": "What is last date created of votes from the state 'CA'?",
    "question_toks": [
      "What",
      "is",
      "last",
      "date",
      "created",
      "of",
      "votes",
      "from",
      "the",
      "state",
      "'CA",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "last date created refers to MAX(VOTES.created); votes from the state 'CA' refers to VOTES.state = 'CA';"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "query_toks": [
      "SELECT",
      "contestant_name",
      "FROM",
      "contestants",
      "WHERE",
      "contestant_name",
      "!",
      "=",
      "'Jessie",
      "Alloway",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "contestants",
      "whose",
      "names",
      "are",
      "not",
      "'Jessie",
      "Alloway",
      "'"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Jessie Alloway\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of contestants refers to CONTESTANTS.contestant_name; not 'Jessie Alloway' refers to CONTESTANTS.contestant_name != 'Jessie Alloway'"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT DISTINCT state ,  created FROM votes",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "state",
      ",",
      "created",
      "FROM",
      "votes"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "state",
      ",",
      "created",
      "from",
      "votes"
    ],
    "question": "What are the distinct states and create time of all votes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "states",
      "and",
      "create",
      "time",
      "of",
      "all",
      "votes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct states refer to VOTES.state; create time refers to VOTES.created;"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.contestant_number",
      ",",
      "T1.contestant_name",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "GROUP",
      "BY",
      "T1.contestant_number",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contestant_number",
      ",",
      "t1",
      ".",
      "contestant_name",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "group",
      "by",
      "t1",
      ".",
      "contestant_number",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      "of",
      "the",
      "contestants",
      "who",
      "had",
      "at",
      "least",
      "two",
      "votes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "At least two votes refers to COUNT(VOTES.vote_id) >= 2; contestant numbers and names refer to CONTESTANTS.contestant_number and CONTESTANTS.contestant_name; the relationship between VOTES and CONTESTANTS is established through VOTES.contestant_number = CONTESTANTS.contestant_number"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.contestant_number",
      ",",
      "T1.contestant_name",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "GROUP",
      "BY",
      "T1.contestant_number",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contestant_number",
      ",",
      "t1",
      ".",
      "contestant_name",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "group",
      "by",
      "t1",
      ".",
      "contestant_number",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "question_toks": [
      "Of",
      "all",
      "the",
      "contestants",
      "who",
      "got",
      "voted",
      ",",
      "what",
      "is",
      "the",
      "contestant",
      "number",
      "and",
      "name",
      "of",
      "the",
      "contestant",
      "who",
      "got",
      "least",
      "votes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "contestants who got voted refers to VOTES.contestant_number; least votes refers to MIN(COUNT(VOTES.vote_id)); contestant number and name refers to CONTESTANTS.contestant_number and CONTESTANTS.contestant_name; join VOTES and CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "votes",
      "WHERE",
      "state",
      "=",
      "'NY",
      "'",
      "OR",
      "state",
      "=",
      "'CA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question": "What are the number of votes from state 'NY' or 'CA'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "votes",
      "from",
      "state",
      "'NY",
      "'",
      "or",
      "'CA",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NY\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of votes refers to COUNT(*); from state 'NY' or 'CA' refers to VOTES.state = 'NY' OR VOTES.state = 'CA';"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "contestants",
      "WHERE",
      "contestant_number",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "contestant_number",
      "FROM",
      "votes",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "contestants",
      "where",
      "contestant_number",
      "not",
      "in",
      "(",
      "select",
      "contestant_number",
      "from",
      "votes",
      ")"
    ],
    "question": "How many contestants did not get voted?",
    "question_toks": [
      "How",
      "many",
      "contestants",
      "did",
      "not",
      "get",
      "voted",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"contestants\" refers to the CONTESTANTS table; \"did not get voted\" refers to CONTESTANTS.contestant_number NOT IN (SELECT VOTES.contestant_number FROM VOTES)"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.area_code",
      "FROM",
      "area_code_state",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.state",
      "=",
      "T2.state",
      "GROUP",
      "BY",
      "T1.area_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "area_code",
      "from",
      "area_code_state",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "state",
      "=",
      "t2",
      ".",
      "state",
      "group",
      "by",
      "t1",
      ".",
      "area_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the area code in which the most voters voted?",
    "question_toks": [
      "What",
      "is",
      "the",
      "area",
      "code",
      "in",
      "which",
      "the",
      "most",
      "voters",
      "voted",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most voters voted refers to MAX(COUNT(VOTES.vote_id)); area code refers to AREA_CODE_STATE.area_code; the relationship between VOTES and AREA_CODE_STATE is through the state column."
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "query_toks": [
      "SELECT",
      "T2.created",
      ",",
      "T2.state",
      ",",
      "T2.phone_number",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Tabatha",
      "Gehling",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "created",
      ",",
      "t2",
      ".",
      "state",
      ",",
      "t2",
      ".",
      "phone_number",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value"
    ],
    "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "create",
      "dates",
      ",",
      "states",
      ",",
      "and",
      "phone",
      "numbers",
      "of",
      "the",
      "votes",
      "that",
      "were",
      "for",
      "the",
      "contestant",
      "named",
      "'Tabatha",
      "Gehling",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Tabatha Gehling' refers to CONTESTANTS.contestant_name = 'Tabatha Gehling'"
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "query_toks": [
      "SELECT",
      "T3.area_code",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "JOIN",
      "area_code_state",
      "AS",
      "T3",
      "ON",
      "T2.state",
      "=",
      "T3.state",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Tabatha",
      "Gehling",
      "'",
      "INTERSECT",
      "SELECT",
      "T3.area_code",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "JOIN",
      "area_code_state",
      "AS",
      "T3",
      "ON",
      "T2.state",
      "=",
      "T3.state",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Kelly",
      "Clauss",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "state",
      "=",
      "t3",
      ".",
      "state",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value",
      "intersect",
      "select",
      "t3",
      ".",
      "area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "state",
      "=",
      "t3",
      ".",
      "state",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value"
    ],
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "question_toks": [
      "List",
      "the",
      "area",
      "codes",
      "in",
      "which",
      "voters",
      "voted",
      "both",
      "for",
      "the",
      "contestant",
      "'Tabatha",
      "Gehling",
      "'",
      "and",
      "the",
      "contestant",
      "'Kelly",
      "Clauss",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                8,
                false
              ],
              null
            ],
            "and",
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            "\"Kelly Clauss\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "'Tabatha Gehling' and 'Kelly Clauss' refer to CONTESTANTS.contestant_name; area codes refer to AREA_CODE_STATE.area_code; voters voted both refers to intersection of area codes where VOTES.contestant_number matches both contestants."
  },
  {
    "db_id": "voter_1",
    "query": "select contestant_name from contestants where contestant_name like \"%al%\"",
    "query_toks": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "like",
      "\"%al%\""
    ],
    "query_toks_no_value": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "like",
      "value"
    ],
    "question": "Return the names of the contestants whose names contain the substring 'Al' .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "contestants",
      "whose",
      "names",
      "contain",
      "the",
      "substring",
      "'Al'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"%al%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the contestants refers to CONTESTANTS.contestant_name; contain the substring 'Al' refers to CONTESTANTS.contestant_name LIKE '%Al%'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "IndepYear",
      ">",
      "1950"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "value"
    ],
    "question": "What are the names of all the countries that became independent after 1950?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "countries",
      "that",
      "became",
      "independent",
      "after",
      "1950",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Country refers to `country`.`Name`; Independence year refers to `country`.`IndepYear`; Filter rows where `country`.`IndepYear > 1950` and exclude rows where `country`.`IndepYear` is NULL."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "IndepYear",
      ">",
      "1950"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "value"
    ],
    "question": "Give the names of the nations that were founded after 1950.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "that",
      "were",
      "founded",
      "after",
      "1950",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`IndepYear > 1950` refers to countries founded after 1950; `Name` refers to the names of the nations."
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "How many countries have a republic as their form of government?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "have",
      "a",
      "republic",
      "as",
      "their",
      "form",
      "of",
      "government",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "republic as their form of government refers to `country`.`GovernmentForm` LIKE '%republic%';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "How many countries have governments that are republics?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "have",
      "governments",
      "that",
      "are",
      "republics",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "governments that are republics refers to `country`.`GovernmentForm` LIKE '%republic%';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Caribbean",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "What is the total surface area of the countries in the Caribbean region?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "countries",
      "in",
      "the",
      "Caribbean",
      "region",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total surface area = SUM(country.SurfaceArea) where country.Region = 'Caribbean';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Caribbean",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "How much surface area do the countires in the Carribean cover together?",
    "question_toks": [
      "How",
      "much",
      "surface",
      "area",
      "do",
      "the",
      "countires",
      "in",
      "the",
      "Carribean",
      "cover",
      "together",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total surface area = SUM(country.SurfaceArea) where country.Region = 'Caribbean';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "query_toks": [
      "SELECT",
      "Continent",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Anguilla",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Which continent is Anguilla in?",
    "question_toks": [
      "Which",
      "continent",
      "is",
      "Anguilla",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Anguilla' is a country, and its continent is stored in the `country`.`Continent` column."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "query_toks": [
      "SELECT",
      "Continent",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Anguilla",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What is the continent name which Anguilla belongs to?",
    "question_toks": [
      "What",
      "is",
      "the",
      "continent",
      "name",
      "which",
      "Anguilla",
      "belongs",
      "to",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Anguilla` is a country name in the `country`.`Name` column, and its continent name is stored in the `country`.`Continent` column."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "query_toks": [
      "SELECT",
      "Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Name",
      "=",
      "``",
      "Kabul",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Which region is the city Kabul located in?",
    "question_toks": [
      "Which",
      "region",
      "is",
      "the",
      "city",
      "Kabul",
      "located",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kabul is a city; Region is determined by the country it belongs to."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "query_toks": [
      "SELECT",
      "Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Name",
      "=",
      "``",
      "Kabul",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "What region is Kabul in?",
    "question_toks": [
      "What",
      "region",
      "is",
      "Kabul",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kabul is a city; Region refers to `country`.`Region`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''",
      "ORDER",
      "BY",
      "Percentage",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which language is the most popular in Aruba?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "the",
      "most",
      "popular",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Aruba is a country; most popular language refers to the language with the maximum percentage in `countrylanguage`.`Percentage` for the country with `country`.`Name` = 'Aruba'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''",
      "ORDER",
      "BY",
      "Percentage",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "value"
    ],
    "question": "What language is predominantly spoken in Aruba?",
    "question_toks": [
      "What",
      "language",
      "is",
      "predominantly",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Aruba' is a country, and its predominant language is the one with the highest `Percentage` in the `countrylanguage` table for the corresponding `CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Brazil",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What are the population and life expectancies in Brazil?",
    "question_toks": [
      "What",
      "are",
      "the",
      "population",
      "and",
      "life",
      "expectancies",
      "in",
      "Brazil",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Population refers to country.Population; Life expectancies refer to country.LifeExpectancy; Brazil refers to country.Name = 'Brazil';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Brazil",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Give me Brazil\u2019s population and life expectancies.",
    "question_toks": [
      "Give",
      "me",
      "Brazil\u2019s",
      "population",
      "and",
      "life",
      "expectancies",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Brazil' refers to `country`.`Name = 'Brazil'`; population refers to `country`.`Population`; life expectancy refers to `country`.`LifeExpectancy`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "Region",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Angola",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What are the region and population of Angola?",
    "question_toks": [
      "What",
      "are",
      "the",
      "region",
      "and",
      "population",
      "of",
      "Angola",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "region refers to country.Region; population refers to country.Population; Angola refers to country.Name = 'Angola';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "Region",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Angola",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What region does Angola belong to and what is its population?",
    "question_toks": [
      "What",
      "region",
      "does",
      "Angola",
      "belong",
      "to",
      "and",
      "what",
      "is",
      "its",
      "population",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Angola refers to `country`.`Name` = 'Angola'; region refers to `country`.`Region`; population refers to `country`.`Population`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Central",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "expected",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "the",
      "region",
      "of",
      "Central",
      "Africa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Average expected life expectancy refers to AVG(country.LifeExpectancy); countries in the region of Central Africa refers to country.Region = 'Central Africa'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Central",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "How long is the people\u2019s average life expectancy in Central Africa?",
    "question_toks": [
      "How",
      "long",
      "is",
      "the",
      "people\u2019s",
      "average",
      "life",
      "expectancy",
      "in",
      "Central",
      "Africa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The average life expectancy corresponds to AVG(country.LifeExpectancy); Central Africa corresponds to country.Region = 'Central Africa'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "LifeExpectancy",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "value"
    ],
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "country",
      "that",
      "has",
      "the",
      "shortest",
      "life",
      "expectancy",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "shortest life expectancy refers to MIN(country.LifeExpectancy); in Asia refers to country.Continent = 'Asia'; name of the country refers to country.Name;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "LifeExpectancy",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "value"
    ],
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "country",
      "in",
      "Asia",
      "with",
      "the",
      "lowest",
      "life",
      "expectancy",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "lowest life expectancy refers to MIN(LifeExpectancy); in Asia refers to Continent = 'Asia'; name of the country refers to Name;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "max",
      "(",
      "GNP",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "What is the total population and maximum GNP in Asia?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "maximum",
      "GNP",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Asia refers to country.Continent = 'Asia'; total population refers to SUM(country.Population); maximum GNP refers to MAX(country.GNP);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "max",
      "(",
      "GNP",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "Asia",
      ",",
      "and",
      "what",
      "is",
      "the",
      "largest",
      "GNP",
      "among",
      "them",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Asia refers to Continent = 'Asia'; total population refers to SUM(Population); largest GNP refers to MAX(GNP)."
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "governmentform",
      "=",
      "value"
    ],
    "question": "What is the average life expectancy in African countries that are republics?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "life",
      "expectancy",
      "in",
      "African",
      "countries",
      "that",
      "are",
      "republics",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average life expectancy = AVG(LifeExpectancy); African countries refers to `country`.`Continent` = 'Africa'; republics refers to `country`.`GovernmentForm` LIKE '%republic%';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "governmentform",
      "=",
      "value"
    ],
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "question_toks": [
      "Give",
      "the",
      "average",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "Africa",
      "which",
      "are",
      "republics",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average life expectancy = AVG(LifeExpectancy); countries in Africa refers to `Continent` = 'Africa'; republics refers to `GovernmentForm` LIKE '%Republic%';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "OR",
      "Continent",
      "=",
      "``",
      "Europe",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "or",
      "continent",
      "=",
      "value"
    ],
    "question": "What is the total surface area of the continents Asia and Europe?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "continents",
      "Asia",
      "and",
      "Europe",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`country`.`SurfaceArea` measures the size of countries, and `country`.`Continent` can be used to filter for Asia and Europe."
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "OR",
      "Continent",
      "=",
      "``",
      "Europe",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "or",
      "continent",
      "=",
      "value"
    ],
    "question": "Give the total surface area covered by countries in Asia or Europe.",
    "question_toks": [
      "Give",
      "the",
      "total",
      "surface",
      "area",
      "covered",
      "by",
      "countries",
      "in",
      "Asia",
      "or",
      "Europe",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total surface area = SUM(country.SurfaceArea WHERE country.Continent IN ('Asia', 'Europe'));"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      "WHERE",
      "District",
      "=",
      "``",
      "Gelderland",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "value"
    ],
    "question": "How many people live in Gelderland district?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "Gelderland",
      "district",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The total population of Gelderland district is the sum of the `city`.`Population` column for rows where `city`.`District` is 'Gelderland'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      "WHERE",
      "District",
      "=",
      "``",
      "Gelderland",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "value"
    ],
    "question": "What is the total population of Gelderland district?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "of",
      "Gelderland",
      "district",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total population refers to sum(city.Population); Gelderland district refers to city.District = 'Gelderland'"
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "GNP",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "US",
      "Territory",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "GNP",
      "and",
      "total",
      "population",
      "in",
      "all",
      "nations",
      "whose",
      "government",
      "is",
      "US",
      "territory",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average GNP = AVG(GNP); total population = SUM(Population); government is US territory refers to GovernmentForm = 'US Territory';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "GNP",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "US",
      "Territory",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "question_toks": [
      "Give",
      "the",
      "mean",
      "GNP",
      "and",
      "total",
      "population",
      "of",
      "nations",
      "which",
      "are",
      "considered",
      "US",
      "territory",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "mean GNP refers to AVG(GNP); total population refers to SUM(Population); US territory is ambiguous and requires clarification as it is not directly present in the `Region` column or other columns."
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question": "How many unique languages are spoken in the world?",
    "question_toks": [
      "How",
      "many",
      "unique",
      "languages",
      "are",
      "spoken",
      "in",
      "the",
      "world",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "unique languages refers to DISTINCT values in `countrylanguage`.`Language`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question": "What is the number of distinct languages used around the world?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "languages",
      "used",
      "around",
      "the",
      "world",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of distinct languages refers to COUNT(DISTINCT `countrylanguage`.`Language`);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "GovernmentForm",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "How many type of governments are in Africa?",
    "question_toks": [
      "How",
      "many",
      "type",
      "of",
      "governments",
      "are",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`country`.`GovernmentForm` refers to type of government; `country`.`Continent` refers to continent; Africa refers to `country`.`Continent` = 'Africa'; count distinct `country`.`GovernmentForm` where `country`.`Continent` = 'Africa'"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "GovernmentForm",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "How many different forms of governments are there in Africa?",
    "question_toks": [
      "How",
      "many",
      "different",
      "forms",
      "of",
      "governments",
      "are",
      "there",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different forms of governments refers to DISTINCT(`country`.`GovernmentForm`); in Africa refers to `country`.`Continent` = 'Africa';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "What is the total number of languages used in Aruba?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "languages",
      "used",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Language` refers to `countrylanguage`.`Language`; Aruba refers to `country`.`Name` = 'Aruba'; total number of languages refers to COUNT(`countrylanguage`.`Language`);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How many languages are spoken in Aruba?",
    "question_toks": [
      "How",
      "many",
      "languages",
      "are",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Aruba' is a name of a country; count of languages refers to COUNT(`countrylanguage`.`Language`);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Afghanistan",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "How many official languages does Afghanistan have?",
    "question_toks": [
      "How",
      "many",
      "official",
      "languages",
      "does",
      "Afghanistan",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Official languages refers to countrylanguage.IsOfficial = 'T'; Afghanistan is a name of country, so it maps to country.Name = 'Afghanistan'; The relationship between country and countrylanguage is through country.Code = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Afghanistan",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "How many official languages are spoken in Afghanistan?",
    "question_toks": [
      "How",
      "many",
      "official",
      "languages",
      "are",
      "spoken",
      "in",
      "Afghanistan",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Official languages refers to countrylanguage.IsOfficial = 'T'; Afghanistan is identified as country.Name = 'Afghanistan'; The relationship between country and countrylanguage is established through country.Code = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is name of the country that speaks the largest number of languages?",
    "question_toks": [
      "What",
      "is",
      "name",
      "of",
      "the",
      "country",
      "that",
      "speaks",
      "the",
      "largest",
      "number",
      "of",
      "languages",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "speaks the largest number of languages refers to MAX(COUNT(Language)); join `country` and `countrylanguage` on `country`.`Code` = `countrylanguage`.`CountryCode`; name of the country refers to `country`.`Name`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "nation",
      "that",
      "uses",
      "the",
      "greatest",
      "amount",
      "of",
      "languages",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "uses the greatest amount of languages refers to MAX(COUNT(`countrylanguage`.`Language`)); name of the nation refers to `country`.`Name`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Continent",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "continent",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which continent has the most diverse languages?",
    "question_toks": [
      "Which",
      "continent",
      "has",
      "the",
      "most",
      "diverse",
      "languages",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most diverse languages refers to MAX(COUNT(DISTINCT countrylanguage.Language)); continent refers to `country`.`Continent`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Continent",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "continent",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which continent speaks the most languages?",
    "question_toks": [
      "Which",
      "continent",
      "speaks",
      "the",
      "most",
      "languages",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most languages refers to MAX(COUNT(DISTINCT countrylanguage.Language)); continent refers to country.Continent;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "How many countries speak both English and Dutch?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "speak",
      "both",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "sql",
            {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ],
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": {
                "from": {
                  "table_units": [
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ],
                  "conds": [
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ]
                },
                "select": [
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "where": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
              },
              "union": null,
              "except": null
            }
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "speak both English and Dutch refers to `CountryCode` where `Language` = 'English' AND `Language` = 'Dutch';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "What is the number of nations that use English and Dutch?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "nations",
      "that",
      "use",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "sql",
            {
              "from": {
                "table_units": [
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ],
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              },
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "where": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ],
              "groupBy": [],
              "having": [],
              "orderBy": [],
              "limit": null,
              "intersect": {
                "from": {
                  "table_units": [
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ],
                  "conds": [
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ]
                },
                "select": [
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "where": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
              },
              "union": null,
              "except": null
            }
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "use English refers to `countrylanguage`.`Language` = 'English'; use Dutch refers to `countrylanguage`.`Language` = 'Dutch'; nations refers to distinct `country`.`Code` linked via `countrylanguage`.`CountryCode`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "What are the names of nations speak both English and French?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "nations",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "names of nations refers to `country`.`Name`; speak both English and French refers to `countrylanguage`.`Language` = 'English' and `countrylanguage`.`Language` = 'French'; the relationship between `country` and `countrylanguage` is established through `country`.`Code` = `countrylanguage`.`CountryCode`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "Give the names of nations that speak both English and French.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "nations",
      "that",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Speak both English and French refers to `Language = 'English'` and `Language = 'French'` for the same `CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What are the names of nations where both English and French are official languages?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "nations",
      "where",
      "both",
      "English",
      "and",
      "French",
      "are",
      "official",
      "languages",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "names of nations refers to `country`.`Name`; English and French are official languages refers to `countrylanguage`.`Language` = 'English' AND `countrylanguage`.`IsOfficial` = 'T' AND `countrylanguage`.`Language` = 'French' AND `countrylanguage`.`IsOfficial` = 'T'; relationship between `country` and `countrylanguage` is `country`.`Code` = `countrylanguage`.`CountryCode`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "Give the names of countries with English and French as official languages.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "countries",
      "with",
      "English",
      "and",
      "French",
      "as",
      "official",
      "languages",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Countries with English and French as official languages refers to `countrylanguage`.`Language` = 'English' AND `countrylanguage`.`IsOfficial` = 'T' AND `countrylanguage`.`Language` = 'French' AND `countrylanguage`.`IsOfficial` = 'T'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "Continent",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Chinese",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "continents",
      "where",
      "Chinese",
      "is",
      "spoken",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of distinct continents refers to COUNT(DISTINCT country.Continent); Chinese is spoken refers to filtering countrylanguage.Language for 'Chinese' (or related values like 'Canton Chinese' or 'Mandarin Chinese'); Join countrylanguage and country using countrylanguage.CountryCode = country.Code."
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "Continent",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Chinese",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "How many continents speak Chinese?",
    "question_toks": [
      "How",
      "many",
      "continents",
      "speak",
      "Chinese",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "speak Chinese refers to `countrylanguage`.`Language` = 'Chinese'; continents refers to `country`.`Continent`; the relationship is `countrylanguage`.`CountryCode` = `country`.`Code`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "OR",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "What are the regions that use English or Dutch?",
    "question_toks": [
      "What",
      "are",
      "the",
      "regions",
      "that",
      "use",
      "English",
      "or",
      "Dutch",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Regions refers to `country`.`Region`; use English or Dutch refers to `countrylanguage`.`Language` = 'English' OR `countrylanguage`.`Language` = 'Dutch'; the relationship between `countrylanguage` and `country` is `countrylanguage`.`CountryCode` = `country`.`Code`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "OR",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "Which regions speak Dutch or English?",
    "question_toks": [
      "Which",
      "regions",
      "speak",
      "Dutch",
      "or",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Regions refers to `country`.`Region`; speak Dutch or English refers to `countrylanguage`.`Language` IN ('Dutch', 'English'); `countrylanguage`.`CountryCode` links to `country`.`Code`."
  },
  {
    "db_id": "world_1",
    "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
    "query_toks": [
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"english\"",
      "and",
      "isofficial",
      "=",
      "\"t\"",
      "union",
      "select",
      "t1.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "where",
      "t2.language",
      "=",
      "\"dutch\"",
      "and",
      "isofficial",
      "=",
      "\"t\""
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What are the countries where either English or Dutch is the official language ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "where",
      "either",
      "English",
      "or",
      "Dutch",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"english\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"t\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"t\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "countries refers to `country`.`Name`; English or Dutch refers to `countrylanguage`.`Language` = 'English' OR `countrylanguage`.`Language` = 'Dutch'; official language refers to `countrylanguage`.`IsOfficial` = 'T'; relationship between `country` and `countrylanguage` is `country`.`Code` = `countrylanguage`.`CountryCode`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "UNION",
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "Which countries have either English or Dutch as an official language?",
    "question_toks": [
      "Which",
      "countries",
      "have",
      "either",
      "English",
      "or",
      "Dutch",
      "as",
      "an",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "English or Dutch as an official language refers to (`countrylanguage`.`Language` = 'English' OR `countrylanguage`.`Language` = 'Dutch') AND `countrylanguage`.`IsOfficial` = 'T'; countries refers to `country`.`Name`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which language is the most popular on the Asian continent?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "the",
      "most",
      "popular",
      "on",
      "the",
      "Asian",
      "continent",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The most popular language refers to the language with the highest total percentage of speakers in Asia. The total percentage is calculated by summing up `countrylanguage`.`Percentage` for all countries where `country`.`Continent` = 'Asia'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the language that is used by the largest number of Asian nations?",
    "question_toks": [
      "What",
      "is",
      "the",
      "language",
      "that",
      "is",
      "used",
      "by",
      "the",
      "largest",
      "number",
      "of",
      "Asian",
      "nations",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "To find the language used by the largest number of Asian nations, filter countries in the 'Asia' continent using `country`.`Continent = 'Asia'`. Join `country` and `countrylanguage` on `country`.`Code = countrylanguage`.`CountryCode`. Count the number of distinct countries (`country`.`Code`) for each language (`countrylanguage`.`Language`) and identify the language with the maximum count."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.GovernmentForm",
      "=",
      "``",
      "Republic",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "governmentform",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "Which languages are spoken by only one country in republic governments?",
    "question_toks": [
      "Which",
      "languages",
      "are",
      "spoken",
      "by",
      "only",
      "one",
      "country",
      "in",
      "republic",
      "governments",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Languages refers to `countrylanguage`.`Language`; Spoken by only one country refers to COUNT(DISTINCT `country`.`Code`) = 1; Republic governments refers to `country`.`GovernmentForm` LIKE '%Republic%'; The relationship between `countrylanguage` and `country` is established via `countrylanguage`.`CountryCode` = `country`.`Code`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.GovernmentForm",
      "=",
      "``",
      "Republic",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "governmentform",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "What languages are only used by a single country with a republic government?",
    "question_toks": [
      "What",
      "languages",
      "are",
      "only",
      "used",
      "by",
      "a",
      "single",
      "country",
      "with",
      "a",
      "republic",
      "government",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Languages are found in `countrylanguage`.`Language`; single country refers to COUNT(`countrylanguage`.`CountryCode`) = 1; republic government refers to `country`.`GovernmentForm` LIKE '%Republic%'."
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T1.Population",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.CountryCode",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "ORDER",
      "BY",
      "T1.Population",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countrycode",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the city with the largest population that uses English.",
    "question_toks": [
      "Find",
      "the",
      "city",
      "with",
      "the",
      "largest",
      "population",
      "that",
      "uses",
      "English",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest population refers to MAX(`city`.`Population`); uses English refers to `countrylanguage`.`Language` = 'English' AND `countrylanguage`.`IsOfficial` = 'T'; relationship between `city` and `countrylanguage` is established using `city`.`CountryCode` = `countrylanguage`.`CountryCode`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T1.Population",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.CountryCode",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "ORDER",
      "BY",
      "T1.Population",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countrycode",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most populace city that speaks English?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "populace",
      "city",
      "that",
      "speaks",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most populace city refers to MAX(city.Population); speaks English refers to countrylanguage.Language = 'English'; relationship is established through city.CountryCode = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "question_toks": [
      "Find",
      "the",
      "name",
      ",",
      "population",
      "and",
      "expected",
      "life",
      "length",
      "of",
      "asian",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Asian country refers to country.Continent = 'Asia'; largest area refers to MAX(country.SurfaceArea); name, population, and expected life length refer to country.Name, country.Population, and country.LifeExpectancy;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "life",
      "expectancy",
      "of",
      "the",
      "largest",
      "Asian",
      "country",
      "by",
      "land",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest Asian country by land refers to MAX(SurfaceArea) with Continent = 'Asia'; required columns are country.Name, country.Population, and country.LifeExpectancy."
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      ")"
    ],
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "question_toks": [
      "What",
      "is",
      "average",
      "life",
      "expectancy",
      "in",
      "the",
      "countries",
      "where",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average life expectancy = AVG(country.LifeExpectancy); English is not the official language refers to filtering out rows where `countrylanguage.Language = 'English'` and `countrylanguage.IsOfficial = 'T'; relationship between `country` and `countrylanguage` is established through `country.Code = countrylanguage.CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      ")"
    ],
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "question_toks": [
      "Give",
      "the",
      "mean",
      "life",
      "expectancy",
      "of",
      "countries",
      "in",
      "which",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "mean life expectancy refers to AVG(LifeExpectancy); English is not the official language refers to Language = 'English' AND IsOfficial = 'F'; join country and countrylanguage on country.Code = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "What is the total number of people living in the nations that do not use English?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "people",
      "living",
      "in",
      "the",
      "nations",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total population refers to SUM(`country`.`Population` WHERE `country`.`Code` NOT IN (SELECT `countrylanguage`.`CountryCode` FROM `countrylanguage` WHERE `countrylanguage`.`Language` = 'English')); nations that do not use English refers to `countrylanguage`.`Language` != 'English';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "How many people live in countries that do not speak English?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "do not speak English refers to `Language` != 'English'; population refers to SUM(`country`.`Population`); join `country` and `countrylanguage` on `country`.`Code` = `countrylanguage`.`CountryCode`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.HeadOfState",
      "=",
      "``",
      "Beatrix",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "headofstate",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "question_toks": [
      "What",
      "is",
      "the",
      "official",
      "language",
      "spoken",
      "in",
      "the",
      "country",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "official language refers to IsOfficial = 'T'; head of state is Beatrix refers to HeadOfState = 'Beatrix';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.HeadOfState",
      "=",
      "``",
      "Beatrix",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "headofstate",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "question_toks": [
      "What",
      "is",
      "the",
      "official",
      "language",
      "used",
      "in",
      "the",
      "country",
      "the",
      "name",
      "of",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "official language refers to `countrylanguage`.`IsOfficial = 'T'`; head of state is Beatrix refers to `country`.`HeadOfState = 'Beatrix'`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "IndepYear",
      "<",
      "1930",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "indepyear",
      "<",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "unique",
      "official",
      "languages",
      "spoken",
      "in",
      "the",
      "countries",
      "that",
      "are",
      "founded",
      "before",
      "1930",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "official language refers to IsOfficial = 'T'; founded before 1930 refers to IndepYear < 1930; unique languages refers to DISTINCT(Language); join condition is country.Code = countrylanguage.CountryCode."
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "IndepYear",
      "<",
      "1930",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "indepyear",
      "<",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "question_toks": [
      "For",
      "the",
      "countries",
      "founded",
      "before",
      "1930",
      ",",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "distinct",
      "official",
      "languages",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "countries founded before 1930 refers to country.IndepYear < 1930; official languages refers to countrylanguage.IsOfficial = 'T'; distinct official languages refers to COUNT(DISTINCT countrylanguage.Language); the relationship between country and countrylanguage is country.Code = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "SurfaceArea",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Europe",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "surfacearea",
      ">",
      "(",
      "select",
      "min",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "greater",
      "surface",
      "area",
      "than",
      "any",
      "country",
      "in",
      "Europe",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Europe\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "To find countries with greater surface area than any country in Europe, first calculate the maximum surface area of countries in Europe using MAX(SurfaceArea) with a filter on `country`.`Region` containing 'Europe'. Then, compare the `country`.`SurfaceArea` of all countries to this maximum value."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "SurfaceArea",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Europe",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "surfacearea",
      ">",
      "(",
      "select",
      "min",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "Which countries have greater area than that of any country in Europe?",
    "question_toks": [
      "Which",
      "countries",
      "have",
      "greater",
      "area",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Europe",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Europe\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "countries refers to `country`.`Name`; greater area refers to `SurfaceArea > MAX(SurfaceArea)`; any country in Europe refers to filtering `Continent = 'Europe'`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "population",
      "<",
      "(",
      "SELECT",
      "max",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "<",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "question_toks": [
      "What",
      "are",
      "the",
      "African",
      "countries",
      "that",
      "have",
      "a",
      "population",
      "less",
      "than",
      "any",
      "country",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Asia\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "African countries refer to country.Name where country.Continent = 'Africa'; population less than any country in Asia refers to country.Population < ALL (SELECT country.Population FROM country WHERE country.Continent = 'Asia');"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "population",
      "<",
      "(",
      "SELECT",
      "min",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "<",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "question_toks": [
      "Which",
      "African",
      "countries",
      "have",
      "a",
      "smaller",
      "population",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Asia\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "African countries refer to region LIKE '%Africa%'; Asian countries refer to region LIKE '%Asia%'; smaller population than that of any country in Asia refers to population < MIN(population where region LIKE '%Asia%')"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "AND",
      "population",
      ">",
      "(",
      "SELECT",
      "max",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      ">",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "question_toks": [
      "Which",
      "Asian",
      "countries",
      "have",
      "a",
      "population",
      "that",
      "is",
      "larger",
      "than",
      "any",
      "country",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Africa\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Asian countries refer to country.Name where country.Continent = 'Asia'; population larger than any country in Africa refers to country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = 'Africa');"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "AND",
      "population",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      ">",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "question_toks": [
      "What",
      "are",
      "the",
      "Asian",
      "countries",
      "which",
      "have",
      "a",
      "population",
      "larger",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Africa\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Asian countries refer to country.Name where country.Continent = 'Asia'; population larger than that of any country in Africa refers to country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');"
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "What are the country codes for countries that do not speak English?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "country codes refers to `country`.`Code`; do not speak English refers to excluding countries where `countrylanguage`.`Language` = 'English';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "Return the country codes for countries that do not speak English.",
    "question_toks": [
      "Return",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Country codes refer to `country`.`Code`; countries that do not speak English refer to the absence of 'English' in `countrylanguage`.`Language`; the relationship between `country` and `countrylanguage` is established via `country`.`Code` = `countrylanguage`.`CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "What are the country codes of countries where people use languages other than English?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "countries",
      "where",
      "people",
      "use",
      "languages",
      "other",
      "than",
      "English",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "languages other than English refers to `countrylanguage`.`Language` != 'English'; country codes refers to `countrylanguage`.`CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "question_toks": [
      "Give",
      "the",
      "country",
      "codes",
      "for",
      "countries",
      "in",
      "which",
      "people",
      "speak",
      "langauges",
      "that",
      "are",
      "not",
      "English",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Languages that are not English refers to `Language != 'English'`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "Code",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "!",
      "=",
      "``",
      "Republic",
      "''",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!",
      "=",
      "value",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "the",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "whose",
      "government",
      "forms",
      "are",
      "not",
      "Republic",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Do not speak English refers to Language != 'English' OR IsOfficial != 'T'; government forms are not Republic refers to GovernmentForm NOT LIKE '%Republic%'; country codes are retrieved from country.Code; join country and countrylanguage on country.Code = countrylanguage.CountryCode."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "Code",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "!",
      "=",
      "``",
      "Republic",
      "''",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!",
      "=",
      "value",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "question_toks": [
      "Return",
      "the",
      "codes",
      "of",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "do",
      "not",
      "have",
      "Republics",
      "for",
      "governments",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "codes of countries refers to `country`.`Code`; do not speak English refers to `Language` != 'English'; do not have Republics for governments refers to `GovernmentForm` NOT LIKE '%Republic%'; join `country` and `countrylanguage` on `country`.`Code` = `countrylanguage`.`CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T2.CountryCode",
      "=",
      "T1.Code",
      "WHERE",
      "T1.Continent",
      "=",
      "'Europe",
      "'",
      "AND",
      "T1.Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T3",
      "JOIN",
      "countrylanguage",
      "AS",
      "T4",
      "ON",
      "T3.Code",
      "=",
      "T4.CountryCode",
      "WHERE",
      "T4.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T4.Language",
      "=",
      "'English",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "countrycode",
      "=",
      "t1",
      ".",
      "code",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t3",
      "join",
      "countrylanguage",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "code",
      "=",
      "t4",
      ".",
      "countrycode",
      "where",
      "t4",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "Which cities are in European countries where English is not the official language?",
    "question_toks": [
      "Which",
      "cities",
      "are",
      "in",
      "European",
      "countries",
      "where",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Cities are in European countries refers to `city`.`CountryCode` = `country`.`Code` AND `country`.`Continent` = 'Europe'; English is not the official language refers to `countrylanguage`.`Language` = 'English' AND `countrylanguage`.`IsOfficial` = 'F';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T2.CountryCode",
      "=",
      "T1.Code",
      "WHERE",
      "T1.Continent",
      "=",
      "'Europe",
      "'",
      "AND",
      "T1.Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T3",
      "JOIN",
      "countrylanguage",
      "AS",
      "T4",
      "ON",
      "T3.Code",
      "=",
      "T4.CountryCode",
      "WHERE",
      "T4.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T4.Language",
      "=",
      "'English",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "countrycode",
      "=",
      "t1",
      ".",
      "code",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t3",
      "join",
      "countrylanguage",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "code",
      "=",
      "t4",
      ".",
      "countrycode",
      "where",
      "t4",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "cities",
      "in",
      "Europe",
      "for",
      "which",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "city names refers to `city`.`Name`; Europe refers to `country`.`Continent = 'Europe'`; English is not the official language refers to `countrylanguage`.`Language = 'English' AND countrylanguage`.`IsOfficial = 'F'`;"
  },
  {
    "db_id": "world_1",
    "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
    "query_toks": [
      "select",
      "distinct",
      "t3.name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1.code",
      "=",
      "t2.countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1.code",
      "=",
      "t3.countrycode",
      "where",
      "t2.isofficial",
      "=",
      "\"t\"",
      "and",
      "t2.language",
      "=",
      "\"chinese\"",
      "and",
      "t1.continent",
      "=",
      "\"asia\""
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t3",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "question_toks": [
      "Which",
      "unique",
      "cities",
      "are",
      "in",
      "Asian",
      "countries",
      "where",
      "Chinese",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"t\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "unique cities refers to DISTINCT city.Name; Asian countries refers to country.Continent = 'Asia'; Chinese is the official language refers to countrylanguage.Language = 'Chinese' and countrylanguage.IsOfficial = 'T'; city.CountryCode = country.Code; country.Code = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "JOIN",
      "city",
      "AS",
      "T3",
      "ON",
      "T1.Code",
      "=",
      "T3.CountryCode",
      "WHERE",
      "T2.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T2.Language",
      "=",
      "'Chinese",
      "'",
      "AND",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t3",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "question_toks": [
      "Return",
      "the",
      "different",
      "names",
      "of",
      "cities",
      "that",
      "are",
      "in",
      "Asia",
      "and",
      "for",
      "which",
      "Chinese",
      "is",
      "the",
      "official",
      "language",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different names of cities refers to DISTINCT city.Name; In Asia refers to country.Continent = 'Asia'; Chinese is the official language refers to countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'; city.CountryCode = country.Code AND country.Code = countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      ",",
      "independence",
      "year",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "with",
      "the",
      "smallest",
      "population",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Smallest population refers to the country with the minimum value in `country`.`Population`. The requested columns (`Name`, `IndepYear`, `SurfaceArea`) are retrieved from the `country` table."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "question_toks": [
      "Give",
      "the",
      "name",
      ",",
      "year",
      "of",
      "independence",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "country",
      "that",
      "has",
      "the",
      "lowest",
      "population",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name refers to country.Name; year of independence refers to country.IndepYear; surface area refers to country.SurfaceArea; lowest population refers to MIN(country.Population);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the population, name and leader of the country with the largest area?",
    "question_toks": [
      "What",
      "are",
      "the",
      "population",
      ",",
      "name",
      "and",
      "leader",
      "of",
      "the",
      "country",
      "with",
      "the",
      "largest",
      "area",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest area refers to MAX(SurfaceArea); population refers to `country`.`Population`; name refers to `country`.`Name`; leader refers to `country`.`HeadOfState`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "question_toks": [
      "Give",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "head",
      "of",
      "state",
      "for",
      "the",
      "country",
      "that",
      "has",
      "the",
      "largest",
      "area",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest area refers to MAX(SurfaceArea); required columns are `country`.`Name`, `country`.`Population`, and `country`.`HeadOfState`;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      ",",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "question_toks": [
      "Return",
      "the",
      "country",
      "name",
      "and",
      "the",
      "numbers",
      "of",
      "languages",
      "spoken",
      "for",
      "each",
      "country",
      "that",
      "speaks",
      "at",
      "least",
      "3",
      "languages",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "country name refers to `country`.`Name`; numbers of languages spoken refers to COUNT(`countrylanguage`.`Language`); speaks at least 3 languages refers to HAVING COUNT(`countrylanguage`.`Language`) >= 3;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      ",",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "countries",
      "that",
      "speak",
      "more",
      "than",
      "2",
      "languages",
      ",",
      "as",
      "well",
      "as",
      "how",
      "many",
      "languages",
      "they",
      "speak",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "speak more than 2 languages refers to HAVING COUNT(countrylanguage.Language) > 2; names of countries refers to country.Name; how many languages they speak refers to COUNT(countrylanguage.Language);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "District",
      "FROM",
      "city",
      "WHERE",
      "Population",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      ")",
      "GROUP",
      "BY",
      "District"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "district",
      "from",
      "city",
      "where",
      "population",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      "group",
      "by",
      "district"
    ],
    "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "cities",
      "in",
      "each",
      "district",
      "whose",
      "population",
      "is",
      "greater",
      "than",
      "the",
      "average",
      "population",
      "of",
      "cities",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      5,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of cities refers to COUNT(*); in each district refers to GROUP BY city.District; population greater than the average population refers to WHERE city.Population > (SELECT AVG(city.Population) FROM city)"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "District",
      "FROM",
      "city",
      "WHERE",
      "Population",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      ")",
      "GROUP",
      "BY",
      "District"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "district",
      "from",
      "city",
      "where",
      "population",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      "group",
      "by",
      "district"
    ],
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "question_toks": [
      "How",
      "many",
      "cities",
      "in",
      "each",
      "district",
      "have",
      "a",
      "population",
      "that",
      "is",
      "above",
      "the",
      "average",
      "population",
      "across",
      "all",
      "cities",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      5,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "group by `city`.`District`; filter cities where `city`.`Population` > avg(`city`.`Population`); count the number of such cities for each district"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "GovernmentForm",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ">",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "governmentform",
      "from",
      "country",
      "group",
      "by",
      "governmentform",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ">",
      "value"
    ],
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "life",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "government form name refers to country.GovernmentForm; total population refers to SUM(country.Population); average life expectancy refers to AVG(country.LifeExpectancy); condition: AVG(country.LifeExpectancy) > 72;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "GovernmentForm",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ">",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "governmentform",
      "from",
      "country",
      "group",
      "by",
      "governmentform",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ">",
      "value"
    ],
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different government forms refers to country.GovernmentForm; total population of each refers to SUM(country.Population) grouped by country.GovernmentForm; average life expectancy greater than 72 refers to AVG(country.LifeExpectancy) > 72;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ",",
      "Continent",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "<",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ",",
      "continent",
      "from",
      "country",
      "group",
      "by",
      "continent",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "<",
      "value"
    ],
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "question_toks": [
      "Find",
      "the",
      "average",
      "life",
      "expectancy",
      "and",
      "total",
      "population",
      "for",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average life expectancy refers to AVG(LifeExpectancy); total population refers to SUM(Population); filter condition refers to AVG(LifeExpectancy) < 72; grouping refers to GROUP BY Continent;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ",",
      "Continent",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "<",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ",",
      "continent",
      "from",
      "country",
      "group",
      "by",
      "continent",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "<",
      "value"
    ],
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "continents",
      "and",
      "the",
      "total",
      "popuation",
      "and",
      "average",
      "life",
      "expectancy",
      "corresponding",
      "to",
      "each",
      ",",
      "for",
      "continents",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "less",
      "than",
      "72",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different continents refers to grouping by `country`.`Continent`; total population refers to SUM(`country`.`Population`); average life expectancy refers to AVG(`country`.`LifeExpectancy`); average life expectancy less than 72 refers to HAVING AVG(`country`.`LifeExpectancy`) < 72;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "areas",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 5,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "top 5 largest area refers to sorting `SurfaceArea` in descending order and using LIMIT 5; names and areas refer to `country`.`Name` and `country`.`SurfaceArea`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the names and surface areas of the 5 largest countries.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "countries",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 5,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "5 largest countries refers to ORDER BY `country`.`SurfaceArea` DESC LIMIT 5;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are names of countries with the top 3 largest population?",
    "question_toks": [
      "What",
      "are",
      "names",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "3",
      "largest",
      "population",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of countries refers to country.Name; largest population refers to sorting by country.Population in descending order; top 3 refers to LIMIT 3;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the names of the 3 most populated countries.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "most",
      "populated",
      "countries",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "3 most populated countries refers to sorting `country`.`Population` in descending order and limiting the result to 3; names refers to `country`.`Name`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question": "What are the names of the nations with the 3 lowest populations?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "with",
      "the",
      "3",
      "lowest",
      "populations",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the nations refer to `country`.`Name`; 3 lowest populations refer to `country`.`Population` sorted in ascending order and limited to 3 rows."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question": "Return the names of the 3 countries with the fewest people.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "countries",
      "with",
      "the",
      "fewest",
      "people",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of countries refer to `country`.`Name`; fewest people refer to the minimum values in `country`.`Population` sorted in ascending order with a limit of 3."
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "how many countries are in Asia?",
    "question_toks": [
      "how",
      "many",
      "countries",
      "are",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "countries in Asia refer to COUNT(*) from `country` where `Continent` = 'Asia';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "Count the number of countries in Asia.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "countries",
      "in",
      "Asia",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of countries in Asia refers to COUNT(country.Code) WHERE country.Continent = 'Asia';"
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Europe",
      "''",
      "AND",
      "Population",
      "=",
      "``",
      "80000",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "=",
      "value"
    ],
    "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "countries",
      "that",
      "are",
      "in",
      "the",
      "continent",
      "of",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "of",
      "80000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of the countries refer to `country`.`Name`; continent of Europe refers to `country`.`Continent` = 'Europe'; population of 80000 refers to `country`.`Population` = 80000."
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Europe",
      "''",
      "AND",
      "Population",
      "=",
      "``",
      "80000",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "=",
      "value"
    ],
    "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "countries",
      "that",
      "are",
      "in",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "equal",
      "to",
      "80000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`country`.`Name` refers to the names of countries; `country`.`Continent` = 'Europe' refers to countries in Europe; `country`.`Population` = 80000 refers to countries with a population equal to 80000."
  },
  {
    "db_id": "world_1",
    "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"north america\"",
      "and",
      "surfacearea",
      ">",
      "3000"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "surfacearea",
      ">",
      "value"
    ],
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "average",
      "area",
      "of",
      "countries",
      "in",
      "the",
      "continent",
      "of",
      "North",
      "America",
      "whose",
      "area",
      "is",
      "bigger",
      "than",
      "3000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"north america\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total population = SUM(country.Population); average area = AVG(country.SurfaceArea); filter condition = WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;"
  },
  {
    "db_id": "world_1",
    "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "query_toks": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "\"north america\"",
      "and",
      "surfacearea",
      ">",
      "3000"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "surfacearea",
      ">",
      "value"
    ],
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "question_toks": [
      "Give",
      "the",
      "total",
      "population",
      "and",
      "average",
      "surface",
      "area",
      "corresponding",
      "to",
      "countries",
      "in",
      "North",
      "America",
      "that",
      "have",
      "a",
      "surface",
      "area",
      "greater",
      "than",
      "3000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"north america\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total population = SUM(country.Population); average surface area = AVG(country.SurfaceArea); countries in North America refers to country.Region = 'North America'; surface area greater than 3000 refers to country.SurfaceArea > 3000;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "900000"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What are the cities whose population is between 160000 and 900000?",
    "question_toks": [
      "What",
      "are",
      "the",
      "cities",
      "whose",
      "population",
      "is",
      "between",
      "160000",
      "and",
      "900000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Population between 160000 and 900000 refers to Population BETWEEN 160000 AND 900000."
  },
  {
    "db_id": "world_1",
    "query": "select name from city where population between 160000 and 900000",
    "query_toks": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "160000",
      "and",
      "900000"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "Return the names of cities that have a population between 160000 and 900000 .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "cities",
      "that",
      "have",
      "a",
      "population",
      "between",
      "160000",
      "and",
      "900000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "population between 160000 and 900000 refers to Population BETWEEN 160000 AND 900000;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      "from",
      "countrylanguage",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which language is spoken by the largest number of countries?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "number",
      "of",
      "countries",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "language refers to `countrylanguage`.`Language`; largest number of countries refers to MAX(COUNT(DISTINCT `countrylanguage`.`CountryCode`));"
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      "from",
      "countrylanguage",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the language that is spoken in the most countries.",
    "question_toks": [
      "Give",
      "the",
      "language",
      "that",
      "is",
      "spoken",
      "in",
      "the",
      "most",
      "countries",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "language spoken in the most countries refers to COUNT(DISTINCT `countrylanguage`.`CountryCode`) grouped by `countrylanguage`.`Language` and finding the `Language` with MAX(COUNT(DISTINCT `countrylanguage`.`CountryCode`));"
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "question_toks": [
      "What",
      "is",
      "the",
      "language",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "in",
      "each",
      "country",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest percentage refers to MAX(countrylanguage.Percentage); language spoken refers to countrylanguage.Language; in each country refers to GROUP BY countrylanguage.CountryCode; join with country table using country.Code = countrylanguage.CountryCode to retrieve country name;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "the",
      "different",
      "countries",
      ",",
      "and",
      "what",
      "are",
      "the",
      "languages",
      "spoken",
      "by",
      "the",
      "greatest",
      "percentage",
      "of",
      "people",
      "for",
      "each",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "greatest percentage of people refers to MAX(countrylanguage.Percentage); different countries implies GROUP BY countrylanguage.CountryCode; country codes and languages require joining country.Code with countrylanguage.CountryCode;"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Spanish' refers to `countrylanguage`.`Language = 'Spanish'`; 'largest percentage of people' refers to MAX(`countrylanguage`.`Percentage`); 'total number of countries' refers to COUNT(DISTINCT `country`.`Code`);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "countries",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "predominantly spoken language refers to MAX(Percentage) for each CountryCode; Spanish refers to `Language` = 'Spanish'; count the number of countries refers to COUNT(DISTINCT `CountryCode`);"
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Spanish refers to `countrylanguage`.`Language` = 'Spanish'; largest percentage refers to MAX(`countrylanguage`.`Percentage`); codes of countries refers to `country`.`Code` linked via `countrylanguage`.`CountryCode`."
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "question_toks": [
      "Return",
      "the",
      "codes",
      "of",
      "countries",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ],
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Spanish is the predominantly spoken language' refers to `countrylanguage`.`Language = 'Spanish'` and the highest `countrylanguage`.`Percentage` for that language in a country."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(*) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question": "How many conductors are there?",
    "question_toks": [
      "How",
      "many",
      "conductors",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of conductors refers to the count of rows in the `conductor` table, uniquely identified by `conductor.Conductor_ID`."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(*) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question": "Count the number of conductors.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "conductors",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "number of conductors refers to counting rows in the `conductor` table."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "List the names of conductors in ascending order of age.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "conductors",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of conductors refers to conductor.Name; ascending order of age refers to order by conductor.Age ASC"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "What are the names of conductors, ordered by age?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "ordered",
      "by",
      "age",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of conductors refers to conductor.Name; ordered by age refers to ORDER BY conductor.Age;"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of conductors whose nationalities are not \"USA\"?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "whose",
      "nationalities",
      "are",
      "not",
      "``",
      "USA",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"names of conductors\" refers to `conductor.Name`; \"nationalities are not 'USA'\" refers to `conductor.Nationality != 'USA'`"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "Return the names of conductors that do not have the nationality \"USA\".",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "conductors",
      "that",
      "do",
      "not",
      "have",
      "the",
      "nationality",
      "``",
      "USA",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of conductors refers to `conductor`.`Name`; do not have the nationality 'USA' refers to `conductor`.`Nationality` != 'USA'."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "question_toks": [
      "What",
      "are",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "record companies of orchestras refers to orchestra.Record_Company; descending order of years in which they were founded refers to orchestra.Year_of_Founded DESC"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "question_toks": [
      "Return",
      "the",
      "record",
      "companies",
      "of",
      "orchestras",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'record companies of orchestras' refers to `orchestra.Record_Company`; 'years in which they were founded' refers to `orchestra.Year_of_Founded`; 'sorted descending' refers to `ORDER BY orchestra.Year_of_Founded DESC`"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT avg(Attendance) FROM SHOW",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Attendance",
      ")",
      "FROM",
      "SHOW"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "attendance",
      ")",
      "from",
      "show"
    ],
    "question": "What is the average attendance of shows?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "attendance",
      "of",
      "shows",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average attendance refers to AVG(show.Attendance);"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT avg(Attendance) FROM SHOW",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Attendance",
      ")",
      "FROM",
      "SHOW"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "attendance",
      ")",
      "from",
      "show"
    ],
    "question": "Return the average attendance across all shows.",
    "question_toks": [
      "Return",
      "the",
      "average",
      "attendance",
      "across",
      "all",
      "shows",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average attendance refers to AVG(show.Attendance); across all shows means no filtering is applied;"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "performance",
      "WHERE",
      "TYPE",
      "!",
      "=",
      "``",
      "Live",
      "final",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!",
      "=",
      "value"
    ],
    "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "question_toks": [
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "of",
      "performances",
      "whose",
      "type",
      "is",
      "not",
      "``",
      "Live",
      "final",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum and minimum share refers to MAX(Share) and MIN(Share); type is not 'Live final' refers to Type != 'Live final';"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "performance",
      "WHERE",
      "TYPE",
      "!",
      "=",
      "``",
      "Live",
      "final",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!",
      "=",
      "value"
    ],
    "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "question_toks": [
      "Return",
      "the",
      "maximum",
      "and",
      "minimum",
      "shares",
      "for",
      "performances",
      "that",
      "do",
      "not",
      "have",
      "the",
      "type",
      "``",
      "Live",
      "final",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "maximum and minimum shares refer to Max(Share) and Min(Share); do not have the type 'Live final' refers to Type != 'Live final'"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question": "How many different nationalities do conductors have?",
    "question_toks": [
      "How",
      "many",
      "different",
      "nationalities",
      "do",
      "conductors",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different nationalities refers to COUNT(DISTINCT conductor.Nationality)"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question": "Count the number of different nationalities of conductors.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "conductors",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different nationalities refers to count(distinct conductor.Nationality)"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question": "List names of conductors in descending order of years of work.",
    "question_toks": [
      "List",
      "names",
      "of",
      "conductors",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "of",
      "work",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of conductors refers to conductor.Name; descending order of years of work refers to order by conductor.Year_of_Work desc"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "number",
      "of",
      "years",
      "they",
      "have",
      "worked",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of conductors refers to conductor.Name; number of years they have worked refers to conductor.Year_of_Work; sorted descending refers to ORDER BY Year_of_Work DESC"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the name of the conductor with the most years of work.",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "with",
      "the",
      "most",
      "years",
      "of",
      "work",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the conductor refers to `conductor`.`Name`; most years of work refers to finding the maximum value of `conductor`.`Year_of_Work`."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "who",
      "has",
      "worked",
      "the",
      "greatest",
      "number",
      "of",
      "years",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name refers to `conductor`.`Name`; greatest number of years refers to max(`conductor`.`Year_of_Work`)"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T2.Orchestra",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id"
    ],
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "conductors",
      "and",
      "the",
      "orchestras",
      "they",
      "have",
      "conducted",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Names of conductors' refers to `conductor.Name`; 'orchestras they have conducted' refers to `orchestra.Orchestra`; the relationship is established via `conductor.Conductor_ID = orchestra.Conductor_ID`"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T2.Orchestra",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id"
    ],
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "as",
      "well",
      "as",
      "the",
      "corresonding",
      "orchestras",
      "that",
      "they",
      "have",
      "conducted",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The names of conductors are in `conductor`.`Name`. The corresponding orchestras they have conducted are in `orchestra`.`Orchestra`. The relationship between the two is established through `conductor`.`Conductor_ID` and `orchestra`.`Conductor_ID`."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "conductors",
      "that",
      "have",
      "conducted",
      "more",
      "than",
      "one",
      "orchestras",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Conducted more than one orchestra refers to COUNT(orchestra.Orchestra) > 1; Join conductor and orchestra tables on conductor.Conductor_ID = orchestra.Conductor_ID to get conductor names."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of conductors who have conducted at more than one orchestra?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "who",
      "have",
      "conducted",
      "at",
      "more",
      "than",
      "one",
      "orchestra",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Conducted at more than one orchestra refers to COUNT(orchestra.Orchestra_ID) > 1; Names of conductors refers to conductor.Name; The relationship is established through orchestra.Conductor_ID = conductor.Conductor_ID."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "that",
      "has",
      "conducted",
      "the",
      "most",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The name of the conductor refers to `conductor`.`Name`. The most number of orchestras conducted refers to MAX(COUNT(`orchestra`.`Orchestra_ID`)). The relationship between `conductor` and `orchestra` is established via `orchestra`.`Conductor_ID` referencing `conductor`.`Conductor_ID`."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "who",
      "has",
      "conducted",
      "the",
      "most",
      "orchestras",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "name of the conductor refers to conductor.Name; conducted the most orchestras refers to MAX(COUNT(orchestra.Orchestra_ID)) grouped by orchestra.Conductor_ID;"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2008"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "name",
      "of",
      "the",
      "conductor",
      "that",
      "has",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "2008",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the conductor refers to `conductor`.`Name`; conducted orchestras refers to the relationship between `conductor`.`Conductor_ID` and `orchestra`.`Conductor_ID`; founded after 2008 refers to `orchestra`.`Year_of_Founded > 2008`."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2008"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "who",
      "have",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "the",
      "year",
      "2008",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of conductors refers to `conductor`.`Name`; conducted orchestras refers to the relationship between `conductor`.`Conductor_ID` and `orchestra`.`Conductor_ID`; founded after the year 2008 refers to `orchestra`.`Year_of_Founded` > 2008."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "query_toks": [
      "SELECT",
      "Record_Company",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company"
    ],
    "question": "Please show the different record companies and the corresponding number of orchestras.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "different",
      "record",
      "companies",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "different record companies refers to orchestra.Record_Company; number of orchestras refers to COUNT(orchestra.Orchestra_ID); group by orchestra.Record_Company"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "query_toks": [
      "SELECT",
      "Record_Company",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company"
    ],
    "question": "How many orchestras does each record company manage?",
    "question_toks": [
      "How",
      "many",
      "orchestras",
      "does",
      "each",
      "record",
      "company",
      "manage",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "how many orchestras refers to COUNT(*); each record company refers to GROUP BY orchestra.Record_Company"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "query_toks": [
      "SELECT",
      "Major_Record_Format",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Major_Record_Format",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "major_record_format",
      "from",
      "orchestra",
      "group",
      "by",
      "major_record_format",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc"
    ],
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "record",
      "formats",
      "of",
      "orchestras",
      "in",
      "ascending",
      "order",
      "of",
      "count",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "record formats of orchestras refers to `orchestra`.`Major_Record_Format`; ascending order of count refers to GROUP BY `orchestra`.`Major_Record_Format` and ORDER BY COUNT(`orchestra`.`Major_Record_Format`) ASC"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "query_toks": [
      "SELECT",
      "Major_Record_Format",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Major_Record_Format",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "major_record_format",
      "from",
      "orchestra",
      "group",
      "by",
      "major_record_format",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc"
    ],
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "question_toks": [
      "What",
      "are",
      "the",
      "major",
      "record",
      "formats",
      "of",
      "orchestras",
      ",",
      "sorted",
      "by",
      "their",
      "frequency",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Major record formats refer to orchestra.Major_Record_Format; sorted by their frequency refers to COUNT(orchestra.Major_Record_Format) and ORDER BY COUNT(orchestra.Major_Record_Format) DESC"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the record company shared by the most number of orchestras.",
    "question_toks": [
      "List",
      "the",
      "record",
      "company",
      "shared",
      "by",
      "the",
      "most",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "record company refers to `orchestra`.`Record_Company`; shared by the most number of orchestras refers to GROUP BY `orchestra`.`Record_Company` and ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the record company used by the greatest number of orchestras?",
    "question_toks": [
      "What",
      "is",
      "the",
      "record",
      "company",
      "used",
      "by",
      "the",
      "greatest",
      "number",
      "of",
      "orchestras",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The greatest number of orchestras refers to COUNT(`orchestra`.`Orchestra_ID`) grouped by `orchestra`.`Record_Company`."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "query_toks": [
      "SELECT",
      "Orchestra",
      "FROM",
      "orchestra",
      "WHERE",
      "Orchestra_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Orchestra_ID",
      "FROM",
      "performance",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "orchestra",
      "from",
      "orchestra",
      "where",
      "orchestra_id",
      "not",
      "in",
      "(",
      "select",
      "orchestra_id",
      "from",
      "performance",
      ")"
    ],
    "question": "List the names of orchestras that have no performance.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "orchestras",
      "that",
      "have",
      "no",
      "performance",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "orchestras that have no performance refers to orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "query_toks": [
      "SELECT",
      "Orchestra",
      "FROM",
      "orchestra",
      "WHERE",
      "Orchestra_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Orchestra_ID",
      "FROM",
      "performance",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "orchestra",
      "from",
      "orchestra",
      "where",
      "orchestra_id",
      "not",
      "in",
      "(",
      "select",
      "orchestra_id",
      "from",
      "performance",
      ")"
    ],
    "question": "What are the orchestras that do not have any performances?",
    "question_toks": [
      "What",
      "are",
      "the",
      "orchestras",
      "that",
      "do",
      "not",
      "have",
      "any",
      "performances",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "orchestras that do not have any performances refers to orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      "<",
      "2003",
      "INTERSECT",
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2003"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "value",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "question_toks": [
      "Show",
      "the",
      "record",
      "companies",
      "shared",
      "by",
      "orchestras",
      "founded",
      "before",
      "2003",
      "and",
      "after",
      "2003",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Record companies refer to orchestra.Record_Company; founded before 2003 refers to orchestra.Year_of_Founded < 2003; founded after 2003 refers to orchestra.Year_of_Founded > 2003; shared by refers to the intersection of orchestra.Record_Company values for these two conditions."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      "<",
      "2003",
      "INTERSECT",
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2003"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "value",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "question_toks": [
      "What",
      "are",
      "the",
      "record",
      "companies",
      "that",
      "are",
      "used",
      "by",
      "both",
      "orchestras",
      "founded",
      "before",
      "2003",
      "and",
      "those",
      "founded",
      "after",
      "2003",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Founded before 2003 refers to orchestra.Year_of_Founded < 2003; Founded after 2003 refers to orchestra.Year_of_Founded > 2003; Record companies used by both refers to the intersection of orchestra.Record_Company values for these two groups."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "WHERE",
      "Major_Record_Format",
      "=",
      "``",
      "CD",
      "''",
      "OR",
      "Major_Record_Format",
      "=",
      "``",
      "DVD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "value",
      "or",
      "major_record_format",
      "=",
      "value"
    ],
    "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "orchestras",
      "whose",
      "record",
      "format",
      "is",
      "``",
      "CD",
      "''",
      "or",
      "``",
      "DVD",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "CD or DVD refers to exact matches in orchestra.Major_Record_Format; number of orchestras refers to COUNT(DISTINCT orchestra.Orchestra_ID)."
  },
  {
    "db_id": "orchestra",
    "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "WHERE",
      "Major_Record_Format",
      "=",
      "``",
      "CD",
      "''",
      "OR",
      "Major_Record_Format",
      "=",
      "``",
      "DVD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "value",
      "or",
      "major_record_format",
      "=",
      "value"
    ],
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "orchestras",
      "that",
      "have",
      "CD",
      "or",
      "DVD",
      "as",
      "their",
      "record",
      "format",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Major_Record_Format` refers to the primary format used for recording; `Major_Record_Format` LIKE '%CD%' OR `Major_Record_Format` LIKE '%DVD%';"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "Year_of_Founded",
      "FROM",
      "orchestra",
      "AS",
      "T1",
      "JOIN",
      "performance",
      "AS",
      "T2",
      "ON",
      "T1.Orchestra_ID",
      "=",
      "T2.Orchestra_ID",
      "GROUP",
      "BY",
      "T2.Orchestra_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year_of_founded",
      "from",
      "orchestra",
      "as",
      "t1",
      "join",
      "performance",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "orchestra_id",
      "=",
      "t2",
      ".",
      "orchestra_id",
      "group",
      "by",
      "t2",
      ".",
      "orchestra_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "question_toks": [
      "Show",
      "the",
      "years",
      "in",
      "which",
      "orchestras",
      "that",
      "have",
      "given",
      "more",
      "than",
      "one",
      "performance",
      "are",
      "founded",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "orchestras that have given more than one performance refers to COUNT(performance.Performance_ID) > 1; years in which orchestras are founded refers to orchestra.Year_of_Founded"
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "Year_of_Founded",
      "FROM",
      "orchestra",
      "AS",
      "T1",
      "JOIN",
      "performance",
      "AS",
      "T2",
      "ON",
      "T1.Orchestra_ID",
      "=",
      "T2.Orchestra_ID",
      "GROUP",
      "BY",
      "T2.Orchestra_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year_of_founded",
      "from",
      "orchestra",
      "as",
      "t1",
      "join",
      "performance",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "orchestra_id",
      "=",
      "t2",
      ".",
      "orchestra_id",
      "group",
      "by",
      "t2",
      ".",
      "orchestra_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "question_toks": [
      "What",
      "are",
      "years",
      "of",
      "founding",
      "for",
      "orchestras",
      "that",
      "have",
      "had",
      "more",
      "than",
      "a",
      "single",
      "performance",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Years of founding` refers to `orchestra`.`Year_of_Founded`; `orchestras` refers to the `orchestra` table; `more than a single performance` refers to `COUNT(performance.Performance_ID) > 1` grouped by `performance.Orchestra_ID`; `performance.Orchestra_ID` links the `performance` table to the `orchestra` table."
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question": "How many high schoolers are there?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of high schoolers corresponds to the count of rows in the `Highschooler` table."
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question": "Count the number of high schoolers.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of high schoolers refers to counting the rows in the Highschooler table; ID uniquely identifies each high schooler."
  },
  {
    "db_id": "network_1",
    "query": "SELECT name ,  grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "Show the names and grades of each high schooler.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "grades",
      "of",
      "each",
      "high",
      "schooler",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names refers to Highschooler.name; grades refers to Highschooler.grade"
  },
  {
    "db_id": "network_1",
    "query": "SELECT name ,  grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "What are the names and grades for each high schooler?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "grades",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of high schoolers refers to Highschooler.name; grades of high schoolers refers to Highschooler.grade;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "Show all the grades of the high schoolers.",
    "question_toks": [
      "Show",
      "all",
      "the",
      "grades",
      "of",
      "the",
      "high",
      "schoolers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "grades refer to Highschooler.grade;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "What is the grade of each high schooler?",
    "question_toks": [
      "What",
      "is",
      "the",
      "grade",
      "of",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Grade of each high schooler refers to Highschooler.grade; each high schooler refers to all rows in Highschooler, specifically Highschooler.name and Highschooler.grade;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What grade is Kyle in?",
    "question_toks": [
      "What",
      "grade",
      "is",
      "Kyle",
      "in",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The name 'Kyle' is found in Highschooler.name; the grade of 'Kyle' can be retrieved from Highschooler.grade."
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Return the grade for the high schooler named Kyle.",
    "question_toks": [
      "Return",
      "the",
      "grade",
      "for",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Highschooler`.`name` = 'Kyle' is used to filter the student named Kyle; `Highschooler`.`grade` is the column that contains the grade level of the student."
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler WHERE grade  =  10",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value"
    ],
    "question": "Show the names of all high schoolers in grade 10.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "grade",
      "10",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "grade 10 refers to Highschooler.grade = 10; names refers to Highschooler.name"
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler WHERE grade  =  10",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value"
    ],
    "question": "What are the names of all high schoolers in grade 10?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "grade",
      "10",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The names of high schoolers are stored in `Highschooler`.`name`; grade 10 corresponds to `Highschooler`.`grade` = 10."
  },
  {
    "db_id": "network_1",
    "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "ID",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Show the ID of the high schooler named Kyle.",
    "question_toks": [
      "Show",
      "the",
      "ID",
      "of",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "high schooler named Kyle refers to Highschooler.name = 'Kyle'; ID refers to Highschooler.ID;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "ID",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What is Kyle's id?",
    "question_toks": [
      "What",
      "is",
      "Kyle",
      "'s",
      "id",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kyle refers to Highschooler.name; id refers to Highschooler.ID"
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "9",
      "OR",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value",
      "or",
      "grade",
      "=",
      "value"
    ],
    "question": "How many high schoolers are there in grade 9 or 10?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "in",
      "grade",
      "9",
      "or",
      "10",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "high schoolers in grade 9 or 10 refers to `Highschooler`.`grade` = 9 OR `Highschooler`.`grade` = 10;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "9",
      "OR",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value",
      "or",
      "grade",
      "=",
      "value"
    ],
    "question": "Count the number of high schoolers in grades 9 or 10.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "in",
      "grades",
      "9",
      "or",
      "10",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of rows in Highschooler where grade = 9 OR grade = 10;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "query_toks": [
      "SELECT",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "group",
      "by",
      "grade"
    ],
    "question": "Show the number of high schoolers for each grade.",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "for",
      "each",
      "grade",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of high schoolers refers to COUNT(ID); for each grade refers to GROUP BY grade."
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "query_toks": [
      "SELECT",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "group",
      "by",
      "grade"
    ],
    "question": "How many high schoolers are in each grade?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "in",
      "each",
      "grade",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "high schoolers in each grade refers to grouping by `Highschooler`.`grade` and counting `Highschooler`.`ID`."
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which grade has the most high schoolers?",
    "question_toks": [
      "Which",
      "grade",
      "has",
      "the",
      "most",
      "high",
      "schoolers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most high schoolers refers to MAX(COUNT(Highschooler.ID)) grouped by Highschooler.grade"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the grade that has the greatest number of high schoolers.",
    "question_toks": [
      "Return",
      "the",
      "grade",
      "that",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "high",
      "schoolers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "grade refers to Highschooler.grade; number of high schoolers refers to COUNT(Highschooler.ID); greatest number of high schoolers refers to MAX(COUNT(Highschooler.ID)) grouped by Highschooler.grade;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "4"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show me all grades that have at least 4 students.",
    "question_toks": [
      "Show",
      "me",
      "all",
      "grades",
      "that",
      "have",
      "at",
      "least",
      "4",
      "students",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "grades refer to Highschooler.grade; at least 4 students refers to COUNT(ID) >= 4;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "4"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which grades have 4 or more high schoolers?",
    "question_toks": [
      "Which",
      "grades",
      "have",
      "4",
      "or",
      "more",
      "high",
      "schoolers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "grades with 4 or more high schoolers refers to `COUNT(Highschooler.ID) >= 4` grouped by `Highschooler.grade`."
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "group",
      "by",
      "student_id"
    ],
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "question_toks": [
      "Show",
      "the",
      "student",
      "IDs",
      "and",
      "numbers",
      "of",
      "friends",
      "corresponding",
      "to",
      "each",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "student IDs refers to Friend.student_id; numbers of friends refers to COUNT(Friend.friend_id) grouped by Friend.student_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "group",
      "by",
      "student_id"
    ],
    "question": "How many friends does each student have?",
    "question_toks": [
      "How",
      "many",
      "friends",
      "does",
      "each",
      "student",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Each student refers to Highschooler.ID; friends refers to Friend.friend_id; the count of friends for each student can be determined by counting Friend.friend_id for each Friend.student_id; to include students with zero friends, use a LEFT JOIN between Highschooler and Friend."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "Show the names of high school students and their corresponding number of friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "school",
      "students",
      "and",
      "their",
      "corresponding",
      "number",
      "of",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of high school students refers to Highschooler.name; number of friends refers to COUNT(Friend.friend_id); the relationship is established via Highschooler.ID = Friend.student_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "high",
      "schoolers",
      "and",
      "how",
      "many",
      "friends",
      "does",
      "each",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The names of high schoolers refer to Highschooler.name; the number of friends each has refers to COUNT(Friend.friend_id); join Highschooler and Friend tables on Highschooler.ID = Friend.student_id; group by Highschooler.ID to calculate the count for each student."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "high",
      "schooler",
      "who",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The greatest number of friends refers to MAX(COUNT(friend_id)) grouped by Friend.student_id; the name of the high schooler refers to Highschooler.name; Friend.student_id is joined with Highschooler.ID to retrieve the name."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the name of the high school student with the most friends.",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "high",
      "school",
      "student",
      "with",
      "the",
      "most",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The number of friends for each student can be calculated using COUNT(friend_id) grouped by Friend.student_id; the student with the most friends can be identified using MAX(COUNT(friend_id)); the name of the student can be retrieved using Highschooler.name by joining Highschooler.ID with Friend.student_id."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "at",
      "least",
      "3",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of high schoolers = Highschooler.name; at least 3 friends refers to COUNT(Friend.student_id) >= 3;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "3",
      "or",
      "more",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "3 or more friends refers to COUNT(Friend.student_id) >= 3; names of high schoolers refers to Highschooler.name; relationship is established through Highschooler.ID = Friend.student_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "T3.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "JOIN",
      "Highschooler",
      "AS",
      "T3",
      "ON",
      "T1.friend_id",
      "=",
      "T3.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "friend_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "all",
      "of",
      "the",
      "high",
      "schooler",
      "Kyle",
      "'s",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Kyle' refers to Highschooler.name = 'Kyle'; Kyle's friends refers to Friend.student_id matching Kyle's ID and retrieving Friend.friend_id; Names of friends refers to joining Highschooler on Highschooler.ID = Friend.friend_id to get the name"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "T3.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "JOIN",
      "Highschooler",
      "AS",
      "T3",
      "ON",
      "T1.friend_id",
      "=",
      "T3.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "friend_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Return the names of friends of the high school student Kyle.",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "friends",
      "of",
      "the",
      "high",
      "school",
      "student",
      "Kyle",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kyle's ID can be found using Highschooler.name = 'Kyle'; friends of Kyle are identified using Friend.student_id = Kyle's ID; names of friends are retrieved by joining Friend.friend_id with Highschooler.ID and selecting Highschooler.name."
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How many friends does the high school student Kyle have?",
    "question_toks": [
      "How",
      "many",
      "friends",
      "does",
      "the",
      "high",
      "school",
      "student",
      "Kyle",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Kyle' refers to `Highschooler`.`name = 'Kyle'`; the number of friends Kyle has can be determined by counting rows in `Friend` where `Friend`.`student_id` matches the `ID` of the student named 'Kyle';"
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Count the number of friends Kyle has.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "friends",
      "Kyle",
      "has",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kyle refers to Highschooler.name = 'Kyle'; number of friends refers to Count(Friend.friend_id) where Friend.student_id matches Kyle's ID."
  },
  {
    "db_id": "network_1",
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question": "Show ids of all students who do not have any friends.",
    "question_toks": [
      "Show",
      "ids",
      "of",
      "all",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Students who do not have any friends refers to Highschooler.ID NOT IN Friend.student_id."
  },
  {
    "db_id": "network_1",
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question": "What are the ids of high school students who do not have friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "`Highschooler.ID` not in `Friend.student_id` means the student does not have friends."
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "Show names of all high school students who do not have any friends.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "all",
      "high",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "students who do not have any friends refers to Highschooler.ID that is NOT IN Friend.student_id AND NOT IN Friend.friend_id; names of all high school students refers to Highschooler.name;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "What are the names of students who have no friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "no",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "Students who have no friends refers to Highschooler.ID not in Friend.student_id and not in Friend.friend_id; names of such students are retrieved from Highschooler.name."
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks": [
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "question_toks": [
      "Show",
      "the",
      "ids",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "friends",
      "and",
      "are",
      "also",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Have friends refers to Friend.student_id; liked by someone else refers to Likes.liked_id; the IDs of high schoolers who meet both conditions are those that exist in both Friend.student_id and Likes.liked_id."
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks": [
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question": "What are the ids of students who both have friends and are liked?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "students",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "'have friends' refers to Friend.student_id; 'are liked' refers to Likes.liked_id; the IDs of students who both have friends and are liked are the intersection of Friend.student_id and Likes.liked_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "INTERSECT",
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.liked_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "liked_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "question_toks": [
      "Show",
      "name",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "friends",
      "and",
      "also",
      "are",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Have some friends refers to the presence of Highschooler.ID in Friend.student_id; are liked by someone else refers to the presence of Highschooler.ID in Likes.liked_id; the name of the student is in Highschooler.name."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "INTERSECT",
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.liked_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "liked_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Have friends refers to Highschooler.ID IN Friend.student_id; Are liked refers to Highschooler.ID IN Likes.liked_id; Names of such high schoolers can be retrieved using Highschooler.name;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "group",
      "by",
      "student_id"
    ],
    "question": "Count the number of likes for each student id.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "likes",
      "for",
      "each",
      "student",
      "id",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Count the number of likes refers to COUNT(liked_id); for each student id refers to GROUP BY Likes.student_id."
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "group",
      "by",
      "student_id"
    ],
    "question": "How many likes correspond to each student id?",
    "question_toks": [
      "How",
      "many",
      "likes",
      "correspond",
      "to",
      "each",
      "student",
      "id",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "likes refers to the Likes table; correspond to each student id refers to grouping by Likes.student_id and counting the number of rows for each Likes.student_id."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "likes",
      ",",
      "and",
      "numbers",
      "of",
      "likes",
      "for",
      "each",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of high schoolers refers to Highschooler.name; who have likes refers to Highschooler.ID matching Likes.liked_id; numbers of likes for each refers to COUNT(Likes.liked_id) grouped by Likes.liked_id."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "likes",
      ",",
      "and",
      "how",
      "many",
      "likes",
      "does",
      "each",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Having likes refers to `Likes.liked_id`; the number of likes for each student is determined using COUNT(Likes.liked_id); the names of these students are retrieved by joining `Highschooler.ID` with `Likes.liked_id` and selecting `Highschooler.name`."
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "high",
      "schooler",
      "who",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "likes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The greatest number of likes refers to MAX(COUNT(Likes.liked_id)); the name of the high schooler refers to Highschooler.name; the relationship between Likes and Highschooler is established through Highschooler.ID = Likes.liked_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name of the student with the most likes.",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "student",
      "with",
      "the",
      "most",
      "likes",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "student's name refers to Highschooler.name; most likes refers to MAX(COUNT(Likes.liked_id)); join Highschooler.ID = Likes.liked_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the names of students who have at least 2 likes.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "at",
      "least",
      "2",
      "likes",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of students refers to Highschooler.name; at least 2 likes refers to COUNT(Likes.liked_id) >= 2; join Highschooler and Likes on Highschooler.ID = Likes.liked_id"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of students who have 2 or more likes?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "2",
      "or",
      "more",
      "likes",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of students refers to Highschooler.name; 2 or more likes refers to COUNT(Likes.liked_id) >= 2;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.grade",
      ">",
      "5",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "grade",
      ">",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "a",
      "grade",
      "higher",
      "than",
      "5",
      "and",
      "have",
      "at",
      "least",
      "2",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "student names = Highschooler.name; grade > 5 refers to Highschooler.grade > 5; at least 2 friends refers to COUNT(Friend.friend_id) >= 2;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.grade",
      ">",
      "5",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "grade",
      ">",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "a",
      "grade",
      "of",
      "over",
      "5",
      "and",
      "have",
      "2",
      "or",
      "more",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ],
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Grade of over 5 refers to `Highschooler`.`grade > 5`; 2 or more friends refers to counting `Friend`.`student_id` and filtering for `COUNT(Friend.student_id) >= 2`; names of students are retrieved from `Highschooler`.`name`."
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How many likes does Kyle have?",
    "question_toks": [
      "How",
      "many",
      "likes",
      "does",
      "Kyle",
      "have",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Kyle is a Highschooler.name; likes refers to Likes.liked_id; How many likes refers to counting occurrences of Likes.liked_id where it matches Highschooler.ID of Kyle"
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "likes",
      "that",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "has",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "High schooler named Kyle refers to Highschooler.name = 'Kyle'; number of likes refers to counting rows in Likes where Likes.liked_id matches Highschooler.ID of 'Kyle'."
  },
  {
    "db_id": "network_1",
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "Find the average grade of all students who have some friends.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "grade",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average grade = DIVIDE(SUM(Highschooler.grade), COUNT(Highschooler.ID WHERE Highschooler.ID IN Friend.student_id)); students who have friends refers to Highschooler.ID IN Friend.student_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "What is the average grade of students who have friends?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "grade",
      "of",
      "students",
      "who",
      "have",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average grade = AVG(grade); students who have friends refers to IDs in Friend.student_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "Find the minimum grade of students who have no friends.",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "grade",
      "of",
      "students",
      "who",
      "have",
      "no",
      "friends",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "minimum grade refers to MIN(grade); students who have no friends refers to Highschooler.ID NOT IN Friend.student_id;"
  },
  {
    "db_id": "network_1",
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "What is the lowest grade of students who do not have any friends?",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "grade",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ],
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ]
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "students who do not have any friends refers to `Highschooler.ID` NOT IN `Friend.student_id`; lowest grade refers to `MIN(Highschooler.grade)`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks": [
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value": [
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question": "Which states have both owners and professionals living there?",
    "question_toks": [
      "Which",
      "states",
      "have",
      "both",
      "owners",
      "and",
      "professionals",
      "living",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "states refers to Owners.state and Professionals.state; both owners and professionals living there refers to the intersection of Owners.state and Professionals.state"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks": [
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value": [
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question": "Find the states where both owners and professionals live.",
    "question_toks": [
      "Find",
      "the",
      "states",
      "where",
      "both",
      "owners",
      "and",
      "professionals",
      "live",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "states where both owners and professionals live refer to the intersection of Owners.state and Professionals.state."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "gone",
      "through",
      "any",
      "treatments",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average = DIVIDE(SUM(CAST(Dogs.age AS INTEGER)), COUNT(Dogs.age)); dogs who have gone through any treatments refers to Dogs.dog_id IN (SELECT Treatments.dog_id FROM Treatments);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "Find the average age of the dogs who went through treatments.",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "the",
      "dogs",
      "who",
      "went",
      "through",
      "treatments",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "average age = AVG(CAST(Dogs.age AS NUMERIC)); dogs who went through treatments refers to Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Indiana",
      "'",
      "UNION",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.last_name",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "question_toks": [
      "Which",
      "professionals",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Indiana",
      "or",
      "have",
      "done",
      "treatment",
      "on",
      "more",
      "than",
      "2",
      "treatments",
      "?",
      "List",
      "his",
      "or",
      "her",
      "id",
      ",",
      "last",
      "name",
      "and",
      "cell",
      "phone",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Indiana\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  40,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  43,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            33,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            2.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "state of Indiana refers to Professionals.state = 'Indiana'; more than 2 treatments refers to COUNT(Treatments.treatment_id) > 2; list id, last name, and cell phone refers to Professionals.professional_id, Professionals.last_name, and Professionals.cell_number."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Indiana",
      "'",
      "UNION",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.last_name",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "question_toks": [
      "Find",
      "the",
      "id",
      ",",
      "last",
      "name",
      "and",
      "cell",
      "phone",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Indiana",
      "or",
      "have",
      "performed",
      "more",
      "than",
      "two",
      "treatments",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Indiana\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  40,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  43,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [
          [
            0,
            33,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            2.0,
            null
          ]
        ],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "id = Professionals.professional_id; last name = Professionals.last_name; cell phone = Professionals.cell_number; live in Indiana refers to Professionals.state = 'Indiana'; performed more than two treatments refers to COUNT(Treatments.professional_id) > 2; join Professionals and Treatments on Professionals.professional_id = Treatments.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "query_toks": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "1000",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "value",
      ")"
    ],
    "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "question_toks": [
      "Which",
      "dogs",
      "have",
      "not",
      "cost",
      "their",
      "owner",
      "more",
      "than",
      "1000",
      "for",
      "treatment",
      "?",
      "List",
      "the",
      "dog",
      "names",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                45,
                false
              ]
            ],
            "having": [
              [
                false,
                3,
                [
                  0,
                  [
                    4,
                    49,
                    false
                  ],
                  null
                ],
                1000.0,
                null
              ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"Dogs\" refers to Dogs.name; cost their owner more than 1000 for treatment refers to SUM(Treatments.cost_of_treatment) <= 1000;"
  },
  {
    "db_id": "dog_kennels",
    "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "query_toks": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "1000",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "value",
      ")"
    ],
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "dogs",
      "for",
      "which",
      "the",
      "owner",
      "has",
      "not",
      "spend",
      "more",
      "than",
      "1000",
      "for",
      "treatment",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                45,
                false
              ]
            ],
            "having": [
              [
                false,
                3,
                [
                  0,
                  [
                    4,
                    49,
                    false
                  ],
                  null
                ],
                1000.0,
                null
              ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Names of the dogs refers to Dogs.name; owner has not spent more than 1000 for treatment refers to SUM(Treatments.cost_of_treatment) <= 1000 grouped by Owners.owner_id."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "question_toks": [
      "Which",
      "first",
      "names",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              4
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": {
          "from": {
            "table_units": [
              [
                "table_unit",
                5
              ]
            ],
            "conds": []
          },
          "select": [
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "where": [],
          "groupBy": [],
          "having": [],
          "orderBy": [],
          "limit": null,
          "intersect": null,
          "union": null,
          "except": null
        }
      },
      "except": null
    },
    "evidence": "first names of professionals = `Professionals`.`first_name`; first names of owners = `Owners`.`first_name`; dog names = `Dogs`.`name`; names not used as dog names refers to `NOT IN` (`Dogs`.`name`)."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "names",
      "that",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              4
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": {
          "from": {
            "table_units": [
              [
                "table_unit",
                5
              ]
            ],
            "conds": []
          },
          "select": [
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "where": [],
          "groupBy": [],
          "having": [],
          "orderBy": [],
          "limit": null,
          "intersect": null,
          "union": null,
          "except": null
        }
      },
      "except": null
    },
    "evidence": "first names used for professionals or owners = UNION of `Professionals`.`first_name` and `Owners`.`first_name`; not used as dog names = NOT IN `Dogs`.`name`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "FROM",
      "Professionals",
      "EXCEPT",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.email_address",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "question_toks": [
      "Which",
      "professional",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "dogs",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "id",
      ",",
      "role",
      "and",
      "email",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "did not operate any treatment refers to `professional_id` in `Professionals` not appearing in `Treatments`.`professional_id`; professional's id refers to `Professionals`.`professional_id`; role refers to `Professionals`.`role_code`; email refers to `Professionals`.`email_address`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "FROM",
      "Professionals",
      "EXCEPT",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.email_address",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "question_toks": [
      "Give",
      "me",
      "the",
      "id",
      ",",
      "role",
      "and",
      "email",
      "of",
      "the",
      "professionals",
      "who",
      "did",
      "not",
      "perform",
      "any",
      "treatment",
      "on",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ],
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "evidence": "id refers to Professionals.professional_id; role refers to Professionals.role_code; email refers to Professionals.email_address; did not perform any treatment refers to Professionals.professional_id not in (SELECT professional_id FROM Treatments)"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T2.first_name",
      ",",
      "T2.last_name",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Owners",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t2",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "last_name",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "owners",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "question_toks": [
      "Which",
      "owner",
      "owns",
      "the",
      "most",
      "dogs",
      "?",
      "List",
      "the",
      "owner",
      "id",
      ",",
      "first",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "owner owns the most dogs refers to MAX(COUNT(Dogs.owner_id)); List the owner id, first name, and last name refers to Owners.owner_id, Owners.first_name, Owners.last_name;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T2.first_name",
      ",",
      "T2.last_name",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Owners",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t2",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "last_name",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "owners",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "question_toks": [
      "Return",
      "the",
      "owner",
      "id",
      ",",
      "first",
      "name",
      "and",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "who",
      "has",
      "the",
      "most",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Owner with the most dogs refers to COUNT(Dogs.dog_id) grouped by Dogs.owner_id and finding the maximum count; owner details refer to Owners.owner_id, Owners.first_name, and Owners.last_name; join Dogs and Owners on Dogs.owner_id = Owners.owner_id; use ORDER BY COUNT(Dogs.dog_id) DESC and LIMIT 1 to get the owner with the most dogs."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.first_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "done",
      "at",
      "least",
      "two",
      "treatments",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "id",
      ",",
      "role",
      ",",
      "and",
      "first",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "professional's id = Professionals.professional_id; role = Professionals.role_code; first name = Professionals.first_name; at least two treatments refers to COUNT(Treatments.professional_id) >= 2; relationship between Professionals and Treatments is via Treatments.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.first_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      ",",
      "role",
      ",",
      "and",
      "first",
      "name",
      "of",
      "the",
      "professionals",
      "who",
      "have",
      "performed",
      "two",
      "or",
      "more",
      "treatments",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to Professionals.professional_id; role refers to Professionals.role_code; first name refers to Professionals.first_name; performed two or more treatments refers to COUNT(Treatments.treatment_id) >= 2 grouped by Treatments.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.breed_name",
      "FROM",
      "Breeds",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.breed_code",
      "=",
      "T2.breed_code",
      "GROUP",
      "BY",
      "T1.breed_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "breed_name",
      "from",
      "breeds",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "breed_code",
      "=",
      "t2",
      ".",
      "breed_code",
      "group",
      "by",
      "t1",
      ".",
      "breed_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the breed with the most dogs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "breed",
      "with",
      "the",
      "most",
      "dogs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of the breed refers to Breeds.breed_name; most dogs refers to max(count(Dogs.dog_id)); Dogs and Breeds are joined on Dogs.breed_code = Breeds.breed_code."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.breed_name",
      "FROM",
      "Breeds",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.breed_code",
      "=",
      "T2.breed_code",
      "GROUP",
      "BY",
      "T1.breed_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "breed_name",
      "from",
      "breeds",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "breed_code",
      "=",
      "t2",
      ".",
      "breed_code",
      "group",
      "by",
      "t1",
      ".",
      "breed_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "question_toks": [
      "Which",
      "breed",
      "do",
      "the",
      "most",
      "dogs",
      "have",
      "?",
      "Give",
      "me",
      "the",
      "breed",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Most dogs refers to MAX(COUNT(Dogs.dog_id)) grouped by Dogs.breed_code; breed name refers to Breeds.breed_name; Dogs.breed_code links to Breeds.breed_code."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "question_toks": [
      "Which",
      "owner",
      "has",
      "paid",
      "for",
      "the",
      "most",
      "treatments",
      "on",
      "his",
      "or",
      "her",
      "dogs",
      "?",
      "List",
      "the",
      "owner",
      "id",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most treatments refers to MAX(COUNT(Treatments.treatment_id)); owner id and last name refer to Owners.owner_id and Owners.last_name; Treatments.dog_id links to Dogs.dog_id, and Dogs.owner_id links to Owners.owner_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "owner",
      "id",
      "and",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "who",
      "spent",
      "the",
      "most",
      "on",
      "treatments",
      "of",
      "his",
      "or",
      "her",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "the owner who spent the most on treatments refers to MAX(SUM(Treatments.cost_of_treatment)) grouped by Owners.owner_id; owner id and last name refer to Owners.owner_id and Owners.last_name;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.treatment_type_description",
      "FROM",
      "Treatment_types",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code",
      "GROUP",
      "BY",
      "T1.treatment_type_code",
      "ORDER",
      "BY",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "treatment_type_description",
      "from",
      "treatment_types",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code",
      "group",
      "by",
      "t1",
      ".",
      "treatment_type_code",
      "order",
      "by",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the description of the treatment type that costs the least money in total?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "type",
      "that",
      "costs",
      "the",
      "least",
      "money",
      "in",
      "total",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "description of treatment type refers to Treatment_Types.treatment_type_description; least money in total refers to MIN(SUM(Treatments.cost_of_treatment)); treatment type refers to Treatments.treatment_type_code."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.treatment_type_description",
      "FROM",
      "Treatment_types",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code",
      "GROUP",
      "BY",
      "T1.treatment_type_code",
      "ORDER",
      "BY",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "treatment_type_description",
      "from",
      "treatment_types",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code",
      "group",
      "by",
      "t1",
      ".",
      "treatment_type_code",
      "order",
      "by",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "question_toks": [
      "Give",
      "me",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "type",
      "whose",
      "total",
      "cost",
      "is",
      "the",
      "lowest",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total cost refers to SUM(Treatments.cost_of_treatment) grouped by Treatments.treatment_type_code; lowest total cost refers to MIN(total cost); description of the treatment type refers to Treatment_Types.treatment_type_description; Treatments.treatment_type_code = Treatment_Types.treatment_type_code."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.zip_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "T3.cost_of_treatment",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "zip_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "sum",
      "(",
      "t3",
      ".",
      "cost_of_treatment",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "question_toks": [
      "Which",
      "owner",
      "has",
      "paid",
      "the",
      "largest",
      "amount",
      "of",
      "money",
      "in",
      "total",
      "for",
      "their",
      "dogs",
      "?",
      "Show",
      "the",
      "owner",
      "id",
      "and",
      "zip",
      "code",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "total amount of money paid refers to SUM(Charges.charge_amount); largest amount refers to MAX(SUM(Charges.charge_amount)); Owners.owner_id links to Dogs.owner_id; Dogs.dog_id links to Charges.dog_id; required columns are Owners.owner_id and Owners.zip_code"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.zip_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "T3.cost_of_treatment",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "zip_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "sum",
      "(",
      "t3",
      ".",
      "cost_of_treatment",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "question_toks": [
      "Find",
      "the",
      "owner",
      "id",
      "and",
      "zip",
      "code",
      "of",
      "the",
      "owner",
      "who",
      "spent",
      "the",
      "most",
      "money",
      "in",
      "total",
      "for",
      "his",
      "or",
      "her",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "spent the most money in total refers to MAX(SUM(Charges.charge_amount)); owner id refers to Owners.owner_id; zip code refers to Owners.zip_code; the relationship between Owners and Charges is via Dogs, where Owners.owner_id = Dogs.owner_id and Dogs.dog_id = Charges.dog_id."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "done",
      "at",
      "least",
      "two",
      "types",
      "of",
      "treatments",
      "?",
      "List",
      "the",
      "professional",
      "id",
      "and",
      "cell",
      "phone",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "at least two types of treatments refers to COUNT(DISTINCT Treatments.treatment_type_code) >= 2; professional id refers to Professionals.professional_id; cell phone refers to Professionals.cell_number; join Treatments and Professionals on Treatments.professional_id = Professionals.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "question_toks": [
      "Find",
      "the",
      "id",
      "and",
      "cell",
      "phone",
      "of",
      "the",
      "professionals",
      "who",
      "operate",
      "two",
      "or",
      "more",
      "types",
      "of",
      "treatments",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "id refers to Professionals.professional_id; cell phone refers to Professionals.cell_number; operate two or more types of treatments refers to counting distinct Treatments.treatment_type_code for each Treatments.professional_id and filtering those with count >= 2."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.last_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "WHERE",
      "cost_of_treatment",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "where",
      "cost_of_treatment",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "from",
      "treatments",
      ")"
    ],
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "name",
      "and",
      "last",
      "name",
      "of",
      "the",
      "professionals",
      "who",
      "have",
      "done",
      "treatment",
      "with",
      "cost",
      "below",
      "average",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              49,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      49,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first name and last name refer to Professionals.first_name and Professionals.last_name; below average refers to cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments); join Treatments.professional_id with Professionals.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.last_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "WHERE",
      "cost_of_treatment",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "where",
      "cost_of_treatment",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "from",
      "treatments",
      ")"
    ],
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "operated",
      "a",
      "treatment",
      "that",
      "costs",
      "less",
      "than",
      "the",
      "average",
      "?",
      "Give",
      "me",
      "theor",
      "first",
      "names",
      "and",
      "last",
      "names",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              49,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      49,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Join Treatments and Professionals on Treatments.professional_id = Professionals.professional_id; cost less than the average refers to Treatments.cost_of_treatment < (SELECT AVG(Treatments.cost_of_treatment) FROM Treatments); first names and last names refer to Professionals.first_name and Professionals.last_name."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "T1.date_of_treatment",
      ",",
      "T2.first_name",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "Professionals",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "date_of_treatment",
      ",",
      "t2",
      ".",
      "first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "question_toks": [
      "List",
      "the",
      "date",
      "of",
      "each",
      "treatment",
      ",",
      "together",
      "with",
      "the",
      "first",
      "name",
      "of",
      "the",
      "professional",
      "who",
      "operated",
      "it",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "date of each treatment refers to Treatments.date_of_treatment; first name of the professional refers to Professionals.first_name; Treatments.professional_id links to Professionals.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "T1.date_of_treatment",
      ",",
      "T2.first_name",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "Professionals",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "date_of_treatment",
      ",",
      "t2",
      ".",
      "first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "What are the date and the operating professional's first name of each treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "date",
      "and",
      "the",
      "operating",
      "professional",
      "'s",
      "first",
      "name",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "date refers to Treatments.date_of_treatment; operating professional's first name refers to Professionals.first_name; relationship: Treatments.professional_id = Professionals.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "query_toks": [
      "SELECT",
      "T1.cost_of_treatment",
      ",",
      "T2.treatment_type_description",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "treatment_types",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cost_of_treatment",
      ",",
      "t2",
      ".",
      "treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code"
    ],
    "question": "List the cost of each treatment and the corresponding treatment type description.",
    "question_toks": [
      "List",
      "the",
      "cost",
      "of",
      "each",
      "treatment",
      "and",
      "the",
      "corresponding",
      "treatment",
      "type",
      "description",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "cost of treatment refers to Treatments.cost_of_treatment; treatment type description refers to Treatment_Types.treatment_type_description; relationship is established through Treatments.treatment_type_code = Treatment_Types.treatment_type_code;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "query_toks": [
      "SELECT",
      "T1.cost_of_treatment",
      ",",
      "T2.treatment_type_description",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "treatment_types",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cost_of_treatment",
      ",",
      "t2",
      ".",
      "treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code"
    ],
    "question": "What are the cost and treatment type description of each treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "cost",
      "and",
      "treatment",
      "type",
      "description",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "cost refers to Treatments.cost_of_treatment; treatment type description refers to Treatment_Types.treatment_type_description; Treatments.treatment_type_code = Treatment_Types.treatment_type_code;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.last_name",
      ",",
      "T2.size_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t2",
      ".",
      "size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "question_toks": [
      "List",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "his",
      "for",
      "her",
      "dog",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "owner's first name refers to Owners.first_name; owner's last name refers to Owners.last_name; size of the dog refers to Sizes.size_description; Dogs.owner_id links Owners.owner_id; Dogs.size_code links Sizes.size_code."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.last_name",
      ",",
      "T2.size_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t2",
      ".",
      "size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "question_toks": [
      "What",
      "are",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "their",
      "dog",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first name = Owners.first_name; last name = Owners.last_name; size of the dog = Sizes.size_description; relationship: Owners.owner_id = Dogs.owner_id AND Dogs.size_code = Sizes.size_code;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "List pairs of the owner's first name and the dogs's name.",
    "question_toks": [
      "List",
      "pairs",
      "of",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "dogs",
      "'s",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "owner's first name refers to Owners.first_name; dog's name refers to Dogs.name; the relationship between Owners and Dogs is established via Owners.owner_id = Dogs.owner_id"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "What are each owner's first name and their dogs's name?",
    "question_toks": [
      "What",
      "are",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "their",
      "dogs",
      "'s",
      "name",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "each owner's first name refers to Owners.first_name; their dogs' name refers to Dogs.name; the relationship is established through Dogs.owner_id = Owners.owner_id"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T2.date_of_treatment",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id",
      "WHERE",
      "T1.breed_code",
      "=",
      "(",
      "SELECT",
      "breed_code",
      "FROM",
      "Dogs",
      "GROUP",
      "BY",
      "breed_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "date_of_treatment",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id",
      "where",
      "t1",
      ".",
      "breed_code",
      "=",
      "(",
      "select",
      "breed_code",
      "from",
      "dogs",
      "group",
      "by",
      "breed_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value",
      ")"
    ],
    "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "the",
      "dogs",
      "of",
      "the",
      "rarest",
      "breed",
      "and",
      "the",
      "treatment",
      "dates",
      "of",
      "them",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                23,
                false
              ]
            ],
            "having": [],
            "orderBy": [
              "asc",
              [
                [
                  0,
                  [
                    3,
                    0,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of the dogs refers to Dogs.name; rarest breed refers to the breed with the minimum count of Dogs.breed_code; treatment dates refers to Treatments.date_of_treatment; Dogs.breed_code links to Breeds.breed_code; Dogs.dog_id links to Treatments.dog_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T2.date_of_treatment",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id",
      "WHERE",
      "T1.breed_code",
      "=",
      "(",
      "SELECT",
      "breed_code",
      "FROM",
      "Dogs",
      "GROUP",
      "BY",
      "breed_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "date_of_treatment",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id",
      "where",
      "t1",
      ".",
      "breed_code",
      "=",
      "(",
      "select",
      "breed_code",
      "from",
      "dogs",
      "group",
      "by",
      "breed_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value",
      ")"
    ],
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "question_toks": [
      "Which",
      "dogs",
      "are",
      "of",
      "the",
      "rarest",
      "breed",
      "?",
      "Show",
      "their",
      "names",
      "and",
      "treatment",
      "dates",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [
              [
                0,
                23,
                false
              ]
            ],
            "having": [],
            "orderBy": [
              "asc",
              [
                [
                  0,
                  [
                    3,
                    0,
                    false
                  ],
                  null
                ]
              ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "rarest breed refers to MIN(COUNT(Dogs.breed_code)); dog names refer to Dogs.name; treatment dates refer to Treatments.date_of_treatment."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T1.state",
      "=",
      "'Virginia",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "question_toks": [
      "Which",
      "dogs",
      "are",
      "owned",
      "by",
      "someone",
      "who",
      "lives",
      "in",
      "Virginia",
      "?",
      "List",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "dog",
      "'s",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Dogs are owned by someone refers to Dogs.owner_id = Owners.owner_id; lives in Virginia refers to Owners.state = 'Virginia'; owner's first name refers to Owners.first_name; dog's name refers to Dogs.name"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T1.state",
      "=",
      "'Virginia",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "question_toks": [
      "Find",
      "the",
      "first",
      "names",
      "of",
      "owners",
      "living",
      "in",
      "Virginia",
      "and",
      "the",
      "names",
      "of",
      "dogs",
      "they",
      "own",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The first names of owners are in `Owners`.`first_name`; the state they live in is in `Owners`.`state`; 'Virginia' refers to `Owners`.`state` = 'Virginia'; the names of dogs are in `Dogs`.`name`; the relationship between owners and dogs is `Dogs`.`owner_id` = `Owners`.`owner_id`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.date_arrived",
      ",",
      "T1.date_departed",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "date_arrived",
      ",",
      "t1",
      ".",
      "date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id"
    ],
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "question_toks": [
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "gone",
      "through",
      "a",
      "treatment",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "arriving date refers to Dogs.date_arrived; departing date refers to Dogs.date_departed; dogs who have gone through a treatment refers to Dogs.dog_id in Treatments.dog_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.date_arrived",
      ",",
      "T1.date_departed",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "date_arrived",
      ",",
      "t1",
      ".",
      "date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id"
    ],
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "question_toks": [
      "Find",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "dogs",
      "that",
      "received",
      "a",
      "treatment",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "arriving date refers to `Dogs`.`date_arrived`; departing date refers to `Dogs`.`date_departed`; dogs that received a treatment refers to `Dogs`.`dog_id` IN `Treatments`.`dog_id`;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T2.age",
      "=",
      "(",
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t2",
      ".",
      "age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "List the last name of the owner owning the youngest dog.",
    "question_toks": [
      "List",
      "the",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "owning",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "last name refers to `Owners`.`last_name`; youngest dog refers to `MAX(Dogs.date_of_birth)`; relationship is `Dogs`.`owner_id` = `Owners`.`owner_id`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T2.age",
      "=",
      "(",
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t2",
      ".",
      "age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "question_toks": [
      "Who",
      "owns",
      "the",
      "youngest",
      "dog",
      "?",
      "Give",
      "me",
      "his",
      "or",
      "her",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The youngest dog refers to MIN(Dogs.age); the owner's last name refers to Owners.last_name; Dogs.owner_id links to Owners.owner_id."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "query_toks": [
      "SELECT",
      "email_address",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Hawaii",
      "'",
      "OR",
      "state",
      "=",
      "'Wisconsin",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "question_toks": [
      "List",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Professionals`.`email_address` refers to emails of professionals; `Professionals`.`state` = 'Hawaii' OR `Professionals`.`state` = 'Wisconsin'"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "query_toks": [
      "SELECT",
      "email_address",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Hawaii",
      "'",
      "OR",
      "state",
      "=",
      "'Wisconsin",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "question_toks": [
      "What",
      "are",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "either",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`state` refers to `Professionals`.`state`; `email_address` refers to `Professionals`.`email_address`;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks": [
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question": "What are the arriving date and the departing date of all the dogs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "arriving date refers to `Dogs`.`date_arrived`; departing date refers to `Dogs`.`date_departed`;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks": [
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question": "List the arrival date and the departure date for all the dogs.",
    "question_toks": [
      "List",
      "the",
      "arrival",
      "date",
      "and",
      "the",
      "departure",
      "date",
      "for",
      "all",
      "the",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "arrival date refers to `Dogs.date_arrived`; departure date refers to `Dogs.date_departed`; all the dogs refers to selecting all rows from the `Dogs` table."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "How many dogs went through any treatments?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "went",
      "through",
      "any",
      "treatments",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "dogs went through any treatments refers to COUNT(DISTINCT Treatments.dog_id);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "Count the number of dogs that went through a treatment.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "went",
      "through",
      "a",
      "treatment",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Dogs that went through a treatment refers to DISTINCT COUNT(Treatments.dog_id)."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "How many professionals have performed any treatment to dogs?",
    "question_toks": [
      "How",
      "many",
      "professionals",
      "have",
      "performed",
      "any",
      "treatment",
      "to",
      "dogs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Performed any treatment refers to `Treatments`.`professional_id`; count distinct professionals refers to COUNT(DISTINCT `Treatments`.`professional_id`)"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "Find the number of professionals who have ever treated dogs.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "ever",
      "treated",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of professionals refers to COUNT(DISTINCT professional_id); who have ever treated dogs refers to Treatments.professional_id;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "query_toks": [
      "SELECT",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "FROM",
      "professionals",
      "WHERE",
      "city",
      "LIKE",
      "'",
      "%",
      "West",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "from",
      "professionals",
      "where",
      "city",
      "like",
      "value"
    ],
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "question_toks": [
      "Which",
      "professionals",
      "live",
      "in",
      "a",
      "city",
      "containing",
      "the",
      "substring",
      "'West",
      "'",
      "?",
      "List",
      "his",
      "or",
      "her",
      "role",
      ",",
      "street",
      ",",
      "city",
      "and",
      "state",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"%West%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'West' refers to a substring in Professionals.city; role refers to Professionals.role_code; street refers to Professionals.street; city refers to Professionals.city; state refers to Professionals.state."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "query_toks": [
      "SELECT",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "FROM",
      "professionals",
      "WHERE",
      "city",
      "LIKE",
      "'",
      "%",
      "West",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "from",
      "professionals",
      "where",
      "city",
      "like",
      "value"
    ],
    "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "question_toks": [
      "Find",
      "the",
      "role",
      ",",
      "street",
      ",",
      "city",
      "and",
      "state",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "a",
      "city",
      "that",
      "contains",
      "the",
      "substring",
      "'West",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"%West%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "role refers to Professionals.role_code; street refers to Professionals.street; city refers to Professionals.city; state refers to Professionals.state; city contains the substring 'West' translates to Professionals.city LIKE '%West%'."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "FROM",
      "Owners",
      "WHERE",
      "state",
      "LIKE",
      "'",
      "%",
      "North",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "from",
      "owners",
      "where",
      "state",
      "like",
      "value"
    ],
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "question_toks": [
      "Which",
      "owners",
      "live",
      "in",
      "the",
      "state",
      "whose",
      "name",
      "contains",
      "the",
      "substring",
      "'North",
      "'",
      "?",
      "List",
      "his",
      "first",
      "name",
      ",",
      "last",
      "name",
      "and",
      "email",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%North%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The substring 'North' in the state name corresponds to Owners.state LIKE '%North%'; the required columns for output are Owners.first_name, Owners.last_name, and Owners.email_address."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "FROM",
      "Owners",
      "WHERE",
      "state",
      "LIKE",
      "'",
      "%",
      "North",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "from",
      "owners",
      "where",
      "state",
      "like",
      "value"
    ],
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "question_toks": [
      "Return",
      "the",
      "first",
      "name",
      ",",
      "last",
      "name",
      "and",
      "email",
      "of",
      "the",
      "owners",
      "living",
      "in",
      "a",
      "state",
      "whose",
      "name",
      "contains",
      "the",
      "substring",
      "'North",
      "'",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%North%\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "first name, last name, and email correspond to Owners.first_name, Owners.last_name, and Owners.email_address; state containing 'North' corresponds to Owners.state LIKE '%North%'."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "age",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "age",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "How many dogs have an age below the average?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "have",
      "an",
      "age",
      "below",
      "the",
      "average",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The average age of dogs is calculated using AVG(CAST(Dogs.age AS DECIMAL)). The number of dogs below the average age is counted using COUNT(Dogs.dog_id WHERE CAST(Dogs.age AS DECIMAL) < AVG(CAST(Dogs.age AS DECIMAL)))."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "age",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "age",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "Count the number of dogs of an age below the average.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "of",
      "an",
      "age",
      "below",
      "the",
      "average",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "age below the average refers to CAST(Dogs.age AS INTEGER) < AVG(CAST(Dogs.age AS INTEGER)); count the number of dogs refers to COUNT(Dogs.dog_id);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question": "How much does the most recent treatment cost?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "most",
      "recent",
      "treatment",
      "cost",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most recent treatment refers to MAX(Treatments.date_of_treatment); cost refers to Treatments.cost_of_treatment;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question": "Show me the cost of the most recently performed treatment.",
    "question_toks": [
      "Show",
      "me",
      "the",
      "cost",
      "of",
      "the",
      "most",
      "recently",
      "performed",
      "treatment",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            7
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'cost of the treatment' refers to Treatments.cost_of_treatment; 'most recently performed treatment' refers to MAX(Treatments.date_of_treatment);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "How many dogs have not gone through any treatment?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "have",
      "not",
      "gone",
      "through",
      "any",
      "treatment",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "dogs that have not gone through any treatment refer to `Dogs`.`dog_id` where `Dogs`.`dog_id` NOT IN `Treatments`.`dog_id`."
  },
  {
    "db_id": "dog_kennels",
    "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
    "query_toks": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "Tell me the number of dogs that have not received any treatment .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "have",
      "not",
      "received",
      "any",
      "treatment",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Number of dogs corresponds to COUNT(Dogs.dog_id); have not received any treatment corresponds to Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Owners",
      "WHERE",
      "owner_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "owner_id",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "owners",
      "where",
      "owner_id",
      "not",
      "in",
      "(",
      "select",
      "owner_id",
      "from",
      "dogs",
      ")"
    ],
    "question": "How many owners temporarily do not have any dogs?",
    "question_toks": [
      "How",
      "many",
      "owners",
      "temporarily",
      "do",
      "not",
      "have",
      "any",
      "dogs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Do not have any dogs' refers to `Owners`.`owner_id` values that are not present in `Dogs`.`owner_id`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Owners",
      "WHERE",
      "owner_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "owner_id",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "owners",
      "where",
      "owner_id",
      "not",
      "in",
      "(",
      "select",
      "owner_id",
      "from",
      "dogs",
      ")"
    ],
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "owners",
      "who",
      "do",
      "not",
      "own",
      "any",
      "dogs",
      "at",
      "this",
      "moment",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            4
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Owners`.`owner_id` refers to the unique identifier for each owner; `Dogs`.`owner_id` refers to the identifier linking dogs to their owners; `Dogs`.`abandoned_yn` = '0' indicates dogs that are currently owned; owners who do not own any dogs at this moment are those whose `owner_id` exists in `Owners` but not in `Dogs` where `abandoned_yn` = '0'; the question requires counting such owners."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Professionals",
      "WHERE",
      "professional_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "professional_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "professionals",
      "where",
      "professional_id",
      "not",
      "in",
      "(",
      "select",
      "professional_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "How many professionals did not operate any treatment on dogs?",
    "question_toks": [
      "How",
      "many",
      "professionals",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "dogs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Professionals refers to the `Professionals` table; did not operate any treatment refers to `professional_id` in `Professionals` not present in `Treatments`.`professional_id`; count refers to COUNT of such `professional_id`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Professionals",
      "WHERE",
      "professional_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "professional_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "professionals",
      "where",
      "professional_id",
      "not",
      "in",
      "(",
      "select",
      "professional_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "Find the number of professionals who have not treated any dogs.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "not",
      "treated",
      "any",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Professionals who have not treated any dogs refers to Professionals.professional_id values that are NOT in Treatments.professional_id."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "FROM",
      "Dogs",
      "WHERE",
      "abandoned_yn",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "value"
    ],
    "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "question_toks": [
      "List",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "been",
      "abandoned",
      "?",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "dog name refers to Dogs.name; age refers to Dogs.age; weight refers to Dogs.weight; abandoned dogs refers to Dogs.abandoned_yn = '1';"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "FROM",
      "Dogs",
      "WHERE",
      "abandoned_yn",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "value"
    ],
    "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "question_toks": [
      "What",
      "are",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "dogs",
      "that",
      "were",
      "abandoned",
      "?",
      "Note",
      "that",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "in",
      "the",
      "tables",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Dog name refers to Dogs.name; Age refers to Dogs.age; Weight refers to Dogs.weight; Abandoned refers to Dogs.abandoned_yn = '1'"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "What is the average age of all the dogs?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(CAST(age AS INTEGER)) from Dogs;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "Compute the average age of all the dogs.",
    "question_toks": [
      "Compute",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "AVG(CAST(age AS INTEGER))"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "What is the age of the oldest dog?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The age of the oldest dog refers to MAX(CAST(`Dogs`.`age` AS UNSIGNED))"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "Tell me the age of the oldest dog.",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "dog",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "oldest refers to MAX(`Dogs`.`age`)"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks": [
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question": "How much does each charge type costs? List both charge type and amount.",
    "question_toks": [
      "How",
      "much",
      "does",
      "each",
      "charge",
      "type",
      "costs",
      "?",
      "List",
      "both",
      "charge",
      "type",
      "and",
      "amount",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Each charge type and its cost can be found in the `Charges` table by selecting `Charges`.`charge_type` and `Charges`.`charge_amount`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks": [
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question": "List each charge type and its amount.",
    "question_toks": [
      "List",
      "each",
      "charge",
      "type",
      "and",
      "its",
      "amount",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'charge type' refers to `Charges`.`charge_type`; 'amount' refers to `Charges`.`charge_amount`"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(charge_amount) FROM Charges",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question": "How much does the most expensive charge type costs?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "costs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most expensive charge type refers to MAX(Charges.charge_amount);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(charge_amount) FROM Charges",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question": "What is the charge amount of the most expensive charge type?",
    "question_toks": [
      "What",
      "is",
      "the",
      "charge",
      "amount",
      "of",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            1
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most expensive charge type refers to MAX(Charges.charge_amount);"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks": [
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question": "List the email, cell phone and home phone of all the professionals.",
    "question_toks": [
      "List",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "all",
      "the",
      "professionals",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "email = Professionals.email_address; cell phone = Professionals.cell_number; home phone = Professionals.home_phone;"
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks": [
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question": "What are the email, cell phone and home phone of each professional?",
    "question_toks": [
      "What",
      "are",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "each",
      "professional",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`email_address`, `cell_number`, and `home_phone` are columns in the `Professionals` table."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question": "What are all the possible breed type and size type combinations?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "possible",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Breed type refers to `Breeds`.`breed_name`; Size type refers to `Sizes`.`size_description`; all possible combinations require a Cartesian product (cross join) between the `Breeds` and `Sizes` tables."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "question_toks": [
      "Find",
      "the",
      "distinct",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "for",
      "dogs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            5
          ]
        ],
        "conds": []
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "breed type refers to `Breeds`.`breed_name`; size type refers to `Sizes`.`size_description`; the `Dogs` table links `breed_code` to `Breeds`.`breed_code` and `size_code` to `Sizes`.`size_code`; to find distinct combinations, join `Dogs` with `Breeds` and `Sizes` and select distinct pairs of `breed_name` and `size_description`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T3.treatment_type_description",
      "FROM",
      "professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "JOIN",
      "Treatment_types",
      "AS",
      "T3",
      "ON",
      "T2.treatment_type_code",
      "=",
      "T3.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t3",
      ".",
      "treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "treatment_type_code",
      "=",
      "t3",
      ".",
      "treatment_type_code"
    ],
    "question": "List the first name of all the professionals along with the description of the treatment they have done.",
    "question_toks": [
      "List",
      "the",
      "first",
      "name",
      "of",
      "all",
      "the",
      "professionals",
      "along",
      "with",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "done",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "First name of all the professionals refers to `Professionals`.`first_name`; description of the treatment they have done refers to `Treatment_Types`.`treatment_type_description`; the relationship is established through `Treatments`.`professional_id` linking to `Professionals`.`professional_id` and `Treatments`.`treatment_type_code` linking to `Treatment_Types`.`treatment_type_code`."
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T3.treatment_type_description",
      "FROM",
      "professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "JOIN",
      "Treatment_types",
      "AS",
      "T3",
      "ON",
      "T2.treatment_type_code",
      "=",
      "T3.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t3",
      ".",
      "treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "treatment_type_code",
      "=",
      "t3",
      ".",
      "treatment_type_code"
    ],
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "question_toks": [
      "What",
      "are",
      "each",
      "professional",
      "'s",
      "first",
      "name",
      "and",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "performed",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Professional's first name refers to `Professionals`.`first_name`; description of the treatment refers to `Treatment_Types`.`treatment_type_description`; the relationship is established through `Treatments`, which links `Professionals` and `Treatment_Types` via `Treatments`.`professional_id` and `Treatments`.`treatment_type_code`."
  },
  {
    "db_id": "singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "How many singers are there?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "COUNT(Singer_ID) in singer;"
  },
  {
    "db_id": "singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "What is the count of singers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "count",
      "of",
      "singers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "The count of singers is the number of rows in the `singer` table."
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question": "List the name of singers in ascending order of net worth.",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "in",
      "ascending",
      "order",
      "of",
      "net",
      "worth",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Name of singers refers to singer.Name; Net worth refers to singer.Net_Worth_Millions; Ascending order refers to ORDER BY singer.Net_Worth_Millions ASC"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question": "What are the names of singers ordered by ascending net worth?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "singers",
      "ordered",
      "by",
      "ascending",
      "net",
      "worth",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "ascending net worth refers to ORDER BY Net_Worth_Millions ASC"
  },
  {
    "db_id": "singer",
    "query": "SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks": [
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question": "What are the birth year and citizenship of singers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "year",
      "and",
      "citizenship",
      "of",
      "singers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "birth year refers to singer.Birth_Year; citizenship refers to singer.Citizenship"
  },
  {
    "db_id": "singer",
    "query": "SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks": [
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question": "What are the birth years and citizenships of the singers?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "years",
      "and",
      "citizenships",
      "of",
      "the",
      "singers",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "birth years refers to singer.Birth_Year; citizenships refers to singer.Citizenship"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Citizenship",
      "!",
      "=",
      "``",
      "France",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!",
      "=",
      "value"
    ],
    "question": "List the name of singers whose citizenship is not \"France\".",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "citizenship",
      "is",
      "not",
      "``",
      "France",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "France is a country; Exclude singers whose citizenship is 'France'."
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Citizenship",
      "!",
      "=",
      "``",
      "France",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the singers who are not French citizens?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "are",
      "not",
      "French",
      "citizens",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "not French citizens refers to `singer`.`Citizenship` != 'France'"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "=",
      "1948",
      "OR",
      "Birth_Year",
      "=",
      "1949"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "value",
      "or",
      "birth_year",
      "=",
      "value"
    ],
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "birth",
      "year",
      "is",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "singer.Name is required; singer.Birth_Year = 1948.0 or 1949.0;"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "=",
      "1948",
      "OR",
      "Birth_Year",
      "=",
      "1949"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "value",
      "or",
      "birth_year",
      "=",
      "value"
    ],
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "whose",
      "birth",
      "years",
      "are",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "singer.Name is required; Birth_Year = 1948.0 or 1949.0;"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the singer with the largest net worth?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "with",
      "the",
      "largest",
      "net",
      "worth",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "largest net worth refers to max(Net_Worth_Millions)"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the singer who is worth the most?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "who",
      "is",
      "worth",
      "the",
      "most",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "worth the most refers to MAX(Net_Worth_Millions); name of the singer refers to singer.Name;"
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "Show different citizenship of singers and the number of singers of each citizenship.",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "\"different citizenship\" refers to DISTINCT Citizenship; \"number of singers of each citizenship\" refers to COUNT(Singer_ID) GROUP BY Citizenship."
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "For each citizenship, how many singers are from that country?",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singers",
      "are",
      "from",
      "that",
      "country",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`Citizenship` refers to the country of the singer in the `singer` table"
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Please show the most common citizenship of singers.",
    "question_toks": [
      "Please",
      "show",
      "the",
      "most",
      "common",
      "citizenship",
      "of",
      "singers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most common refers to the mode; citizenship refers to singer.Citizenship"
  },
  {
    "db_id": "singer",
    "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "query_toks": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most common singer citizenship ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "common",
      "singer",
      "citizenship",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "most common singer citizenship refers to the mode of `singer`.`Citizenship`, determined by grouping and counting occurrences."
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "max",
      "(",
      "net_worth_millions",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "net",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Different citizenships refer to singer.Citizenship; maximum net worth refers to MAX(singer.Net_Worth_Millions); grouping is required by singer.Citizenship;"
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "max",
      "(",
      "net_worth_millions",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "For each citizenship, what is the maximum net worth?",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "For each citizenship refers to grouping by singer.Citizenship; maximum net worth refers to MAX(singer.Net_Worth_Millions)"
  },
  {
    "db_id": "singer",
    "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "query_toks": [
      "SELECT",
      "T2.Title",
      ",",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "Show titles of songs and names of singers.",
    "question_toks": [
      "Show",
      "titles",
      "of",
      "songs",
      "and",
      "names",
      "of",
      "singers",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "titles of songs refers to song.Title; names of singers refers to singer.Name; the relationship between song and singer is established through song.Singer_ID = singer.Singer_ID"
  },
  {
    "db_id": "singer",
    "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "query_toks": [
      "SELECT",
      "T2.Title",
      ",",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "What are the song titles and singer names?",
    "question_toks": [
      "What",
      "are",
      "the",
      "song",
      "titles",
      "and",
      "singer",
      "names",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "song titles refer to song.Title; singer names refer to singer.Name; the relationship is established through song.Singer_ID = singer.Singer_ID;"
  },
  {
    "db_id": "singer",
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "WHERE",
      "T2.Sales",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "where",
      "t2",
      ".",
      "sales",
      ">",
      "value"
    ],
    "question": "Show distinct names of singers that have songs with sales more than 300000.",
    "question_toks": [
      "Show",
      "distinct",
      "names",
      "of",
      "singers",
      "that",
      "have",
      "songs",
      "with",
      "sales",
      "more",
      "than",
      "300000",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "distinct names of singers refers to singer.Name; songs with sales more than 300000 refers to song.Sales > 300000; relationship between singer and song is established through singer.Singer_ID = song.Singer_ID;"
  },
  {
    "db_id": "singer",
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "WHERE",
      "T2.Sales",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "where",
      "t2",
      ".",
      "sales",
      ">",
      "value"
    ],
    "question": "what are the different names of the singers that have sales more than 300000?",
    "question_toks": [
      "what",
      "are",
      "the",
      "different",
      "names",
      "of",
      "the",
      "singers",
      "that",
      "have",
      "sales",
      "more",
      "than",
      "300000",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of singers = singer.Name; sales more than 300000 refers to song.Sales > 300000; relationship between singer and song is established through singer.Singer_ID = song.Singer_ID;"
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show the names of singers that have more than one song.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "singers",
      "that",
      "have",
      "more",
      "than",
      "one",
      "song",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "COUNT(song.Song_ID) > 1; singer.Name; singer.Singer_ID = song.Singer_ID;"
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of the singers that have more than one songs?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "that",
      "have",
      "more",
      "than",
      "one",
      "songs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "singer.Name refers to the names of singers; song.Singer_ID = singer.Singer_ID establishes the relationship; COUNT(song.Song_ID) > 1 filters singers with more than one song."
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "sum",
      "(",
      "T2.Sales",
      ")",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "sum",
      "(",
      "t2",
      ".",
      "sales",
      ")",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name"
    ],
    "question": "Show the names of singers and the total sales of their songs.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "singers",
      "and",
      "the",
      "total",
      "sales",
      "of",
      "their",
      "songs",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "names of singers refer to singer.Name; total sales of their songs refer to SUM(song.Sales) grouped by singer.Singer_ID; the tables singer and song are joined on singer.Singer_ID = song.Singer_ID;"
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "sum",
      "(",
      "T2.Sales",
      ")",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "sum",
      "(",
      "t2",
      ".",
      "sales",
      ")",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name"
    ],
    "question": "For each singer name, what is the total sales for their songs?",
    "question_toks": [
      "For",
      "each",
      "singer",
      "name",
      ",",
      "what",
      "is",
      "the",
      "total",
      "sales",
      "for",
      "their",
      "songs",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "`singer`.`Name` refers to singer name; `song`.`Sales` refers to song sales; relationship is established through `singer`.`Singer_ID` = `song`.`Singer_ID`; total sales can be calculated using SUM(`song`.`Sales`) grouped by `singer`.`Name`."
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Singer_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Singer_ID",
      "FROM",
      "song",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "singer_id",
      "not",
      "in",
      "(",
      "select",
      "singer_id",
      "from",
      "song",
      ")"
    ],
    "question": "List the name of singers that do not have any song.",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "that",
      "do",
      "not",
      "have",
      "any",
      "song",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "'Do not have any song' refers to singer.Singer_ID not being present in song.Singer_ID; Name is used to list the names of these singers;"
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Singer_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Singer_ID",
      "FROM",
      "song",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "singer_id",
      "not",
      "in",
      "(",
      "select",
      "singer_id",
      "from",
      "song",
      ")"
    ],
    "question": "What is the sname of every sing that does not have any song?",
    "question_toks": [
      "What",
      "is",
      "the",
      "sname",
      "of",
      "every",
      "sing",
      "that",
      "does",
      "not",
      "have",
      "any",
      "song",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "from": {
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ],
              "conds": []
            },
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "Singers without songs refer to `singer`.`Name` where `singer`.`Singer_ID` NOT IN (SELECT `song`.`Singer_ID` FROM `song`);"
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "<",
      "1945",
      "INTERSECT",
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      ">",
      "1955"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "value",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "value"
    ],
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "question_toks": [
      "Show",
      "the",
      "citizenship",
      "shared",
      "by",
      "singers",
      "with",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "Birth_Year < 1945 and Birth_Year > 1955 refer to two separate conditions; shared citizenship refers to common values in `singer`.`Citizenship` for these two groups."
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "<",
      "1945",
      "INTERSECT",
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      ">",
      "1955"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "value",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "value"
    ],
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "question_toks": [
      "What",
      "are",
      "the",
      "citizenships",
      "that",
      "are",
      "shared",
      "by",
      "singers",
      "with",
      "a",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            0
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            [
              "table_unit",
              0
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "evidence": "birth year before 1945 refers to singer.Birth_Year < 1945; birth year after 1955 refers to singer.Birth_Year > 1955; shared by singers refers to common values in singer.Citizenship for both conditions"
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT count(*) FROM Other_Available_Features",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Other_Available_Features"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "other_available_features"
    ],
    "question": "How many available features are there in total?",
    "question_toks": [
      "How",
      "many",
      "available",
      "features",
      "are",
      "there",
      "in",
      "total",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "available features refers to the `Other_Available_Features` table; total refers to the count of rows."
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "query_toks": [
      "SELECT",
      "T2.feature_type_name",
      "FROM",
      "Other_Available_Features",
      "AS",
      "T1",
      "JOIN",
      "Ref_Feature_Types",
      "AS",
      "T2",
      "ON",
      "T1.feature_type_code",
      "=",
      "T2.feature_type_code",
      "WHERE",
      "T1.feature_name",
      "=",
      "``",
      "AirCon",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "feature_type_name",
      "from",
      "other_available_features",
      "as",
      "t1",
      "join",
      "ref_feature_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "feature_type_code",
      "=",
      "t2",
      ".",
      "feature_type_code",
      "where",
      "t1",
      ".",
      "feature_name",
      "=",
      "value"
    ],
    "question": "What is the feature type name of feature AirCon?",
    "question_toks": [
      "What",
      "is",
      "the",
      "feature",
      "type",
      "name",
      "of",
      "feature",
      "AirCon",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"AirCon\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "feature type name refers to Ref_Feature_Types.feature_type_name; feature AirCon refers to Other_Available_Features.feature_name = 'AirCon'; the feature_type_code links Other_Available_Features.feature_type_code to Ref_Feature_Types.feature_type_code."
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "query_toks": [
      "SELECT",
      "T2.property_type_description",
      "FROM",
      "Properties",
      "AS",
      "T1",
      "JOIN",
      "Ref_Property_Types",
      "AS",
      "T2",
      "ON",
      "T1.property_type_code",
      "=",
      "T2.property_type_code",
      "GROUP",
      "BY",
      "T1.property_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "property_type_description",
      "from",
      "properties",
      "as",
      "t1",
      "join",
      "ref_property_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "property_type_code",
      "=",
      "t2",
      ".",
      "property_type_code",
      "group",
      "by",
      "t1",
      ".",
      "property_type_code"
    ],
    "question": "Show the property type descriptions of properties belonging to that code.",
    "question_toks": [
      "Show",
      "the",
      "property",
      "type",
      "descriptions",
      "of",
      "properties",
      "belonging",
      "to",
      "that",
      "code",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ],
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [],
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "evidence": "property type descriptions refer to Ref_Property_Types.property_type_description; properties belonging to that code refer to the relationship between Properties.property_type_code and Ref_Property_Types.property_type_code;"
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "query_toks": [
      "SELECT",
      "property_name",
      "FROM",
      "Properties",
      "WHERE",
      "property_type_code",
      "=",
      "``",
      "House",
      "''",
      "UNION",
      "SELECT",
      "property_name",
      "FROM",
      "Properties",
      "WHERE",
      "property_type_code",
      "=",
      "``",
      "Apartment",
      "''",
      "AND",
      "room_count",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "value",
      "union",
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "value",
      "and",
      "room_count",
      ">",
      "value"
    ],
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "properties",
      "that",
      "are",
      "either",
      "houses",
      "or",
      "apartments",
      "with",
      "more",
      "than",
      "1",
      "room",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          [
            "table_unit",
            3
          ]
        ],
        "conds": []
      },
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"House\"",
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": {
        "from": {
          "table_units": [
            [
              "table_unit",
              3
            ]
          ],
          "conds": []
        },
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  13,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            "\"Apartment\"",
            null
          ],
          "and",
          [
            false,
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            1.0,
            null
          ]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "except": null
    },
    "evidence": "\"names of properties\" refers to `Properties`.`property_name`; \"houses or apartments\" refers to `Properties`.`property_type_code IN ('House', 'Apartment')`; \"more than 1 room\" refers to `Properties`.`room_count > 1`."
  }
]