SELECT COUNT(DISTINCT club_id) FROM club;
SELECT count(*) FROM club;
SELECT name FROM club ORDER BY name ASC;
SELECT name FROM club ORDER BY name ASC;
SELECT manager, captain FROM club;
SELECT manager, captain FROM club;
SELECT name FROM club WHERE manufacturer <> 'Nike';
SELECT name FROM club WHERE manufacturer <> 'Nike';
SELECT name FROM player ORDER BY wins_count ASC;
SELECT name FROM player ORDER BY wins_count ASC;
SELECT name FROM player ORDER BY earnings DESC LIMIT 1;
SELECT name FROM player ORDER BY earnings DESC LIMIT 1;
SELECT DISTINCT country FROM player WHERE earnings > 1200000;
SELECT DISTINCT country FROM player WHERE earnings > 1200000;
SELECT country FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1;
SELECT country FROM player WHERE wins_count > 2 GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT player.name, club.name FROM player JOIN club ON player.club_id = club.club_id;
SELECT player.name, club.name FROM player JOIN club ON player.club_id = club.club_id;
SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2);
SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id HAVING COUNT(*) > 2);
SELECT name FROM player WHERE club_id IN (SELECT club_id FROM club WHERE manager = 'Sam Allardyce');
SELECT name FROM player WHERE club_id IN (SELECT club_id FROM club WHERE manager = 'Sam Allardyce');
SELECT club.name FROM club JOIN player ON club.club_id = player.club_id GROUP BY club.club_id ORDER BY AVG(player.earnings) DESC;
SELECT club.name FROM club JOIN player ON club.club_id = player.club_id GROUP BY club.name ORDER BY AVG(player.earnings) DESC;
SELECT manufacturer, COUNT(club_id) FROM club GROUP BY manufacturer;
SELECT manufacturer, count(club_id) FROM club GROUP BY manufacturer;
SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT( * ) DESC LIMIT 1;
SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(DISTINCT club_id) > 1;
SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(DISTINCT club_id) > 1;
SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1;
SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1;
SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);
SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);
SELECT country FROM player WHERE earnings > 1400000 UNION SELECT country FROM player WHERE earnings < 1100000;
SELECT country FROM player WHERE earnings > 1400000 INTERSECT SELECT country FROM player WHERE earnings < 1100000;
SELECT COUNT(DISTINCT country) AS num_countries FROM player;
SELECT COUNT(DISTINCT country) FROM player;
SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe');
SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe');
SELECT customer_id, customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2 ) AND customer_id IN ( SELECT o.customer_id FROM order_items oi JOIN orders o ON oi.order_id = o.order_id GROUP BY o.customer_id HAVING COUNT(oi.order_item_id) >= 3 );
SELECT customer_id, customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders WHERE order_status_code = 'completed' GROUP BY customer_id HAVING COUNT(DISTINCT order_id) > 2 ) AND customer_id IN ( SELECT o.customer_id FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.order_item_status_code = 'bought' GROUP BY o.customer_id HAVING COUNT(DISTINCT oi.order_item_id) >= 3 );
SELECT orders.order_id, orders.order_status_code, COUNT(order_items.order_item_id) as num_products FROM orders LEFT JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT orders.order_id, COUNT(order_items.product_id) AS product_count, orders.order_status_code FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id, orders.order_status_code;
SELECT date_order_placed FROM orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM orders) OR order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1);
SELECT MIN(date_order_placed) AS earliest_order_date FROM orders; SELECT date_order_placed FROM orders WHERE order_id IN ( SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1 );
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT product_id, product_name, product_price, product_color FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_id) >= 2 );
SELECT product_id, product_name, product_price, product_color FROM products WHERE product_id IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2 );
SELECT order_id, date_order_placed FROM orders WHERE order_id IN ( SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2 );
SELECT order_id, date_order_placed FROM orders WHERE order_id IN ( SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2 );
SELECT product_id, product_name, product_price FROM products WHERE product_id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(order_id) DESC LIMIT 1);
SELECT product_id, product_name, product_price FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT order_id, SUM(product_price) AS total_price FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY order_id ORDER BY total_price LIMIT 1;
SELECT orders.order_id, SUM(product_price) FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id ORDER BY SUM(product_price) LIMIT 1;
SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer_payment_methods.payment_method_code, COUNT(*) FROM customers JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id GROUP BY customers.gender_code;
SELECT customer_payment_methods.payment_method_code, COUNT(customers.gender_code) as product_count FROM customers JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id GROUP BY customers.gender_code;
SELECT gender_code, COUNT(order_id) AS order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code;
SELECT customers.gender_code, COUNT(orders.order_id) as order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.gender_code;
SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, customer_payment_methods.payment_method_code FROM customers INNER JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id;
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM customers JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id;
SELECT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices INNER JOIN shipments ON invoices.invoice_number = shipments.invoice_number;
SELECT invoice_status_code, invoice_date, shipment_date FROM invoices JOIN shipments ON invoices.invoice_number = shipments.invoice_number;
SELECT product_name, shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT product_name, shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipments.shipment_id = shipment_items.shipment_id JOIN orders ON orders.order_id = order_items.order_id;
SELECT product_name, product_color FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))
SELECT DISTINCT products.product_name, products.product_price, products.product_description FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.gender_code = 'Female';
SELECT products.product_name, products.product_price, products.product_description FROM products JOIN invoices ON products.product_id = invoices.invoice_number JOIN customer_payment_methods ON invoices.invoice_number = customer_payment_methods.customer_id JOIN customers ON customer_payment_methods.customer_id = customers.customer_id WHERE customers.gender_code = 'Female';
SELECT invoice_status_code FROM invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM shipments);
SELECT invoice_status_code FROM invoices WHERE invoice_number IN (SELECT invoice_number FROM orders WHERE order_id NOT IN (SELECT order_id FROM shipments));
SELECT SUM(products.product_price) as total_cost, orders.order_id, orders.date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id ORDER BY orders.date_order_placed;
SELECT orders.order_id, orders.date_order_placed, sum(invoice_number) as total_amount_paid FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN invoices ON orders.order_id = invoices.invoice_status_code GROUP BY orders.order_id;
SELECT COUNT(DISTINCT customer_id) FROM orders;
SELECT COUNT(DISTINCT customer_id) FROM orders;
SELECT DISTINCT order_status_code FROM orders;
SELECT COUNT(DISTINCT order_item_status_code) FROM order_items;
SELECT count(DISTINCT payment_method_code) FROM customer_payment_methods;
SELECT COUNT(DISTINCT payment_method_code) FROM customer_payment_methods;
SELECT login_name, login_password FROM customers WHERE phone_number LIKE '+12%'
SELECT login_name, login_password FROM customers WHERE phone_number LIKE '+12%';
SELECT product_size FROM products WHERE product_name LIKE '%Dell%';
SELECT product_size FROM products WHERE product_name LIKE '%Dell%';
SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT COUNT(DISTINCT product_id) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods);
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods);
SELECT DISTINCT order_status_code, date_order_placed FROM orders;
SELECT order_status_code, date_order_placed FROM orders;
SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA';
SELECT address_line_1, town_city, county FROM customers WHERE country = 'United States';
SELECT customers.customer_first_name, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;
SELECT customer_first_name, product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;
SELECT COUNT(*) FROM shipment_items;
SELECT COUNT(DISTINCT product_id) FROM order_items;
SELECT AVG(product_price) FROM products;
SELECT ROUND(AVG(product_price), 2) AS average_product_cost FROM products;
SELECT ROUND(AVG(product_price), 2) AS avg_price FROM products ;
SELECT AVG(product_price) FROM order_items JOIN products ON order_items.product_id = products.product_id;
SELECT email_address, town_city, county FROM customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT gender_code FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1);
SELECT date_order_placed FROM orders WHERE customer_id IN ( SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2 );
SELECT date_order_placed FROM orders WHERE customer_id IN ( SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2 );
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT product_id, product_description FROM products WHERE product_id IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(*) > 3 );
SELECT product_id, product_description FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(*) > 3);
SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(DISTINCT shipment_id) >= 2);
SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN ( SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(DISTINCT shipment_id) >= 2 );
SELECT shipment_tracking_number, shipment_date FROM shipments;
SELECT shipment_tracking_number, shipment_date FROM shipments;
SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products);
SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products);
SELECT name FROM director WHERE age > (SELECT AVG(age) FROM director);
SELECT name FROM channel JOIN program ON channel.channel_id = program.channel_id WHERE director_id = ( SELECT director_id FROM program WHERE start_year = (SELECT MIN(start_year) FROM program) ) LIMIT 1;
SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%';
SELECT COUNT(DISTINCT digital_terrestrial_channel) FROM channel;
SELECT title FROM program ORDER BY start_year DESC;
SELECT director.name FROM director JOIN program ON director.director_id = program.director_id GROUP BY director.director_id ORDER BY COUNT(program.program_id) DESC LIMIT 1;
SELECT director.name, director.age FROM director WHERE director.director_id IN ( SELECT program.director_id FROM program GROUP BY program.director_id ORDER BY COUNT(program.program_id) DESC LIMIT 1 );
SELECT title FROM program ORDER BY start_year DESC LIMIT 1;
SELECT name, internet FROM channel WHERE channel_id IN (SELECT channel_id FROM program GROUP BY channel_id HAVING COUNT(*) > 1);
SELECT channel.name, COUNT(program.program_id) as program_count FROM channel JOIN program ON channel.channel_id = program.channel_id GROUP BY channel.name;
SELECT COUNT(DISTINCT channel.channel_id) FROM channel LEFT JOIN program ON channel.channel_id = program.channel_id WHERE program.channel_id IS NULL;
SELECT director.name FROM program JOIN director ON program.director_id = director.director_id WHERE program.title = 'Dracula';
SELECT name, internet FROM channel WHERE channel_id IN ( SELECT channel_id FROM director_admin GROUP BY channel_id ORDER BY COUNT(DISTINCT director_id) DESC LIMIT 1 );
SELECT name FROM director_admin WHERE director_id IN (SELECT director_id FROM director WHERE age BETWEEN 30 AND 60);
SELECT name FROM channel WHERE channel_id IN (SELECT channel_id FROM director_admin WHERE director_id IN (SELECT director_id FROM director WHERE age < 40) INTERSECT SELECT channel_id FROM director_admin WHERE director_id IN (SELECT director_id FROM director WHERE age > 60) );
SELECT channel_id, name FROM channel WHERE channel_id NOT IN (SELECT DISTINCT channel_id FROM program WHERE director_id = ( SELECT director_id FROM director WHERE name = 'Hank Baskett' ) );
SELECT COUNT(radio_id) FROM radio;
SELECT transmitter FROM radio ORDER BY erp_kw ASC;
SELECT tv_show_name, original_airdate FROM tv_show;
SELECT station_name FROM city_channel WHERE affiliation <> "ABC";
SELECT transmitter FROM radio WHERE erp_kw > 150 OR erp_kw < 30;
SELECT transmitter FROM radio ORDER BY erp_kw DESC LIMIT 1;
SELECT avg(erp_kw) FROM radio;
SELECT affiliation, COUNT(id) as channel_count FROM city_channel GROUP BY affiliation;
SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(DISTINCT city_channel.id) > 3;
SELECT city, station_name FROM city_channel ORDER BY station_name;
SELECT radio.transmitter, city_channel.city from radio inner join city_channel_radio on radio.radio_id = city_channel_radio.radio_id inner join city_channel on city_channel_radio.city_channel_id = city_channel.id;
SELECT radio.transmitter, city_channel.station_name FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id ORDER BY radio.erp_kw DESC;
SELECT transmitter, COUNT(DISTINCT city_channel_id) AS channel_count FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id GROUP BY transmitter;
SELECT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio);
SELECT model FROM vehicle WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1;
SELECT model FROM vehicle WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1;
SELECT name FROM driver WHERE citizenship = 'United States';
SELECT name FROM driver WHERE citizenship = 'United States';
SELECT COUNT(*), driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(driver_id), COUNT(vehicle_id) FROM vehicle_driver GROUP BY driver_id ORDER BY COUNT(vehicle_id) DESC LIMIT 1;
SELECT MAX(power), AVG(power) FROM vehicle WHERE builder = 'Zhuzhou';
SELECT MAX(power), AVG(power) FROM vehicle WHERE builder = "Zhuzhou";
SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT vehicle_id FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(*) ASC LIMIT 1);
SELECT top_speed, power FROM vehicle WHERE build_year = 1996;
SELECT top_speed, power FROM vehicle WHERE build_year = 1996;
SELECT build_year, model, builder FROM vehicle;
SELECT build_year, model, builder FROM vehicle
SELECT COUNT(DISTINCT driver_id) FROM vehicle_driver INNER JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.build_year = 2012;
SELECT COUNT(DISTINCT driver.driver_id) FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.build_year = 2012;
SELECT COUNT(*) FROM driver WHERE racing_series = "NASCAR";
SELECT COUNT(DISTINCT driver_id) FROM driver WHERE racing_series = 'NASCAR';
SELECT AVG(top_speed) FROM vehicle;
SELECT AVG(top_speed) FROM vehicle;
SELECT DISTINCT name FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE power > 5000;
SELECT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE power > 5000);
SELECT model FROM vehicle WHERE total_production > 100 OR top_speed > 150;
SELECT model FROM vehicle WHERE total_production > 100 OR top_speed > 150;
SELECT model, build_year FROM vehicle WHERE model LIKE '%DJ%';
SELECT model, build_year FROM vehicle WHERE model LIKE '%DJ%';
SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver);
SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver);
SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN ( SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) = 2 ) OR builder = 'Ziyang';
SELECT vehicle_id, model FROM vehicle WHERE builder = 'Ziyang' UNION SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) = 2);
SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN ( SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2 OR EXISTS ( SELECT 1 FROM vehicle_driver JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE vehicle_driver.vehicle_id = vehicle.vehicle_id AND driver.name = 'Jeff Gordon' ) );
SELECT vehicle.vehicle_id, vehicle.model FROM vehicle JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE vehicle.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2) OR driver.name = 'Jeff Gordon';
SELECT COUNT(*) FROM vehicles WHERE top_speed = (SELECT MAX(top_speed) FROM vehicles);
SELECT COUNT(*) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle);
SELECT name FROM driver ORDER BY name ASC;
SELECT name FROM driver ORDER BY name ASC;
SELECT racing_series, COUNT(DISTINCT driver_id) AS num_drivers FROM driver GROUP BY racing_series;
SELECT racing_series, COUNT(DISTINCT driver_id) FROM driver GROUP BY racing_series;
SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id = (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))
SELECT name, citizenship FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE model = 'DJ1';
SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver);
SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver);
SELECT COUNT(*) FROM exams;
SELECT COUNT(exam_id) FROM exams;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC;
SELECT exam_name, exam_date FROM exams WHERE subject_code <> "Database";
SELECT exam_date, exam_name FROM exams WHERE subject_code != 'Database';
SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC;
SELECT DISTINCT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC;
SELECT type_of_question_code, COUNT(question_id) as question_count FROM questions GROUP BY type_of_question_code;
SELECT type_of_question_code, COUNT(question_id) AS occurrence_count FROM questions GROUP BY type_of_question_code;
SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = "Normal";
SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal';
SELECT COUNT(DISTINCT comments) FROM student_answers;
SELECT COUNT(DISTINCT comments) AS num_different_comments FROM student_answers;
SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(*) DESC;
SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(*) DESC;
SELECT first_name, date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id;
SELECT students.first_name, student_answers.date_of_answer FROM student_answers JOIN students ON student_answers.student_id = students.student_id;
SELECT students.first_name || '.' || students.last_name || '@example.com' as email, student_answers.date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id ORDER BY student_answers.date_of_answer DESC;
SELECT students.email, student_answers.date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id ORDER BY student_answers.date_of_answer DESC;
SELECT assessment as least_common_assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) ASC LIMIT 1;
SELECT assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) ASC LIMIT 1;
SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers group by student_id having count(*) >= 2);
SELECT first_name FROM students WHERE student_id IN ( SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2 );
SELECT valid_answer_text FROM valid_answers GROUP BY valid_answer_text ORDER BY COUNT(*) DESC LIMIT 1;
SELECT valid_answer_text FROM valid_answers GROUP BY valid_answer_text ORDER BY COUNT(*) DESC LIMIT 1;
SELECT last_name FROM students WHERE gender_mfu <> 'M';
SELECT last_name FROM students WHERE gender_mfu != 'M';
SELECT gender_mfu, COUNT(student_id) FROM students GROUP BY gender_mfu;
SELECT gender_mfu, COUNT(student_id) AS num_students FROM students GROUP BY gender_mfu;
SELECT last_name FROM students WHERE gender_mfu IN ('F', 'M');
SELECT exam_date, exam_name FROM exams;
SELECT first_name FROM students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM student_answers);
SELECT first_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_answers);
SELECT student_answer_text FROM student_answers WHERE comments IN ('Normal', 'Absent') GROUP BY student_answer_text HAVING COUNT(DISTINCT comments) = 2;
SELECT student_answer_text FROM student_answers WHERE comments IN ("Absent", "Normal") GROUP BY student_answer_text HAVING COUNT(DISTINCT comments) = 2;
SELECT DISTINCT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(question_id) >= 3;
SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(question_id) >= 3;
SELECT student_id, first_name, last_name, middle_name, gender_mfu FROM students;
SELECT student_id, first_name, middle_name, last_name FROM students;
SELECT COUNT(*) FROM addresses;
SELECT COUNT(address_id) FROM addresses;
SELECT address_id, address_details FROM addresses;
SELECT address_id, address_details FROM addresses;
SELECT COUNT(product_id) FROM products;
SELECT COUNT(product_id) FROM products;
SELECT product_id, product_type_code, product_name FROM products;
SELECT product_id, product_type_code, product_name FROM products
SELECT product_price FROM products WHERE product_name = 'Monitor';
SELECT product_price FROM products WHERE product_name = 'Monitor';
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM products;
SELECT MIN(product_price) AS minimum_price, AVG(product_price) AS average_price, MAX(product_price) AS maximum_price FROM products;
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes';
SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes';
SELECT count(*) FROM products WHERE product_type_code = 'Hardware';
SELECT COUNT(product_id) FROM products WHERE product_type_code = 'Hardware';
SELECT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware');
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware');
SELECT max(product_name) FROM products WHERE product_price = ( SELECT MAX(product_price) FROM products WHERE product_type_code = "Clothes" );
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1;
SELECT product_name FROM products ORDER BY product_price DESC;
SELECT product_name FROM products ORDER BY product_price DESC;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_type_code, COUNT(DISTINCT product_id) AS num_products FROM products GROUP BY product_type_code;
SELECT product_type_code, COUNT(product_id) FROM products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(DISTINCT product_id) >= 2;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(DISTINCT product_id) >= 2;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(customer_id) FROM customers;
SELECT COUNT(customer_id) FROM customers;
SELECT customer_id, customer_name FROM customers;
SELECT customer_id, customer_name FROM customers
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = 'Jeromy';
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(customer_id) FROM customers GROUP BY payment_method_code;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer_name, payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) LIMIT 1;
SELECT customer_name FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code FROM customers;
SELECT DISTINCT payment_method_code FROM customers;
SELECT product_id, product_type_code FROM products ORDER BY product_name;
SELECT product_id, product_type_code FROM products ORDER BY product_name;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(order_id) FROM customer_orders;
SELECT COUNT(order_id) FROM customer_orders;
SELECT customer_orders.order_id, customer_orders.order_date, customer_orders.order_status_code FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customers.customer_name = 'Jeromy';
SELECT order_id, order_date, order_status_code FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_name = 'Jeromy';
SELECT customers.customer_id, customers.customer_name, COUNT(customer_orders.order_id) AS order_count FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;
SELECT customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS number_of_orders FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c WHERE c.customer_id = (SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1);
SELECT customer_id, customer_name, customer_phone, customer_email FROM customers WHERE customer_id = ( SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1 );
SELECT order_status_code, COUNT(order_id) AS num_orders FROM customer_orders GROUP BY order_status_code;
SELECT order_status_code, COUNT(order_id) FROM customer_orders GROUP BY order_status_code;
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_orders);
SELECT COUNT(customer_id) FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_orders);
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(*) FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE product_name = 'Monitor';
SELECT SUM(order_quantity) FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor';
SELECT COUNT(DISTINCT customer_id) FROM order_items JOIN products ON order_items.product_id = products.product_id JOIN customer_orders ON order_items.order_id = customer_orders.order_id WHERE product_name = 'Monitor';
SELECT COUNT(DISTINCT customer_id) FROM customers WHERE customer_id IN ( SELECT customer_id FROM customer_orders WHERE order_id IN ( SELECT order_id FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Monitor') ) );
SELECT COUNT(DISTINCT customer_id) FROM customer_orders;
SELECT COUNT(DISTINCT customer_orders.customer_id) FROM customer_orders;
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_orders);
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders;
SELECT order_date, order_id FROM customer_orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING SUM(order_quantity) > 6 OR COUNT(order_item_id) > 3);
SELECT order_id, order_date FROM customer_orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING SUM(order_quantity) > 6 OR COUNT(order_item_id) > 3);
SELECT COUNT(building_id) FROM building;
SELECT COUNT(*) FROM building;
SELECT name FROM building ORDER BY number_of_stories ASC;
SELECT name FROM building ORDER BY number_of_stories ASC;
SELECT address FROM building ORDER BY completed_year DESC;
SELECT address FROM building ORDER BY completed_year DESC;
SELECT MAX(number_of_stories) FROM building WHERE completed_year <> 1980;
SELECT MAX(number_of_stories) FROM building WHERE completed_year <> 1980;
SELECT AVG(population) FROM region;
SELECT AVG(population) FROM region;
SELECT name FROM region ORDER BY name ASC;
SELECT name FROM region ORDER BY name ASC;
SELECT capital FROM region WHERE area > 10000;
SELECT capital FROM region WHERE area > 10000;
SELECT capital FROM region ORDER BY population DESC LIMIT 1;
SELECT name AS region, capital FROM region ORDER BY population DESC LIMIT 1;
SELECT name FROM region ORDER BY area DESC LIMIT 5;
SELECT name FROM region ORDER BY area DESC LIMIT 5;
SELECT building.name, region.name FROM building JOIN region ON building.region_id = region.region_id;
SELECT building.name, region.name FROM building JOIN region ON building.region_id = region.region_id;
SELECT name FROM region WHERE region_id IN ( SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1 );
SELECT name FROM region WHERE region_id IN ( SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1 );
SELECT capital FROM region WHERE region_id = ( SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC LIMIT 1 );
SELECT region.name, region.capital FROM region WHERE region_id = (SELECT region_id FROM building GROUP BY region_id ORDER BY count(building_id) DESC LIMIT 1);
SELECT building.address, region.capital FROM building JOIN region ON building.region_id = region.region_id;
SELECT building.address, region.name FROM building JOIN region ON building.region_id = region.region_id;
SELECT number_of_stories FROM building JOIN region ON building.region_id = region.region_id WHERE region.name = "Abruzzo";
SELECT number_of_stories FROM building JOIN region ON building.region_id = region.region_id WHERE region.name = "Abruzzo";
SELECT completed_year, COUNT(building_id) FROM building GROUP BY completed_year;
SELECT completed_year, COUNT(building_id) FROM building GROUP BY completed_year;
SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building);
SELECT name FROM region WHERE region_id NOT IN (SELECT DISTINCT region_id FROM building);
SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories < 15;
SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories < 15;
SELECT DISTINCT address FROM building;
SELECT DISTINCT address FROM building;
SELECT completed_year FROM building ORDER BY number_of_stories DESC;
SELECT completed_year FROM building ORDER BY number_of_stories DESC;
SELECT channel_details FROM channels ORDER BY channel_details ASC;
SELECT channel_details FROM channels ORDER BY channel_details ASC;
SELECT COUNT(*) FROM services;
SELECT COUNT(service_id) FROM services;
SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT services.service_id, services.service_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id JOIN services ON customers_and_services.service_id = services.service_id WHERE customers.customer_details = 'Hardy Kutch';
SELECT s.service_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE c.customer_details = "Hardy Kutch";
SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customer_interactions GROUP BY service_id HAVING COUNT(*) > 3);
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id AND cs.service_id = ci.service_id GROUP BY s.service_id, s.service_details HAVING COUNT(ci.customer_interaction_id) > 3;
SELECT customers.customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers.customer_id ORDER BY COUNT(customers_and_services.service_id) DESC LIMIT 1;
SELECT c.customer_details FROM customers c JOIN customers_and_services cs ON c.customer_id = cs.customer_id GROUP BY c.customer_id ORDER BY COUNT(cs.service_id) DESC LIMIT 1;
SELECT customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers.customer_id ORDER BY COUNT(DISTINCT customers_and_services.service_id) DESC LIMIT 1;
SELECT customers.customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers.customer_id ORDER BY COUNT(DISTINCT customers_and_services.service_id) DESC LIMIT 1;
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_interactions);
SELECT customers.customer_details FROM customers LEFT JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id WHERE customers_and_services.customer_id IS NULL;
SELECT customers.customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers.customer_id ORDER BY COUNT(customers_and_services.service_id) LIMIT 1;
SELECT customers.customer_details FROM customers_and_services JOIN customers ON customers_and_services.customer_id = customers.customer_id GROUP BY customers.customer_id ORDER BY COUNT(DISTINCT customers_and_services.service_id) LIMIT 1;
SELECT COUNT(DISTINCT customers_and_services_details) AS total_distinct_customer_and_service_details FROM customers_and_services;
SELECT COUNT(customers_and_services_details) as total_details FROM customers_and_services;
SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%';
SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%';
SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = "Hardy Kutch") ) OR service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = "good");
SELECT service_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id JOIN services ON customers_and_services.service_id = services.service_id JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id AND customers_and_services.service_id = customer_interactions.service_id WHERE customer_details = 'Hardy Kutch' OR status_code = 'good';
SELECT services.service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id JOIN customers ON customers.customer_id = customers_and_services.customer_id JOIN customer_interactions ON services.service_id = customer_interactions.service_id AND customers.customer_id = customer_interactions.customer_id WHERE customers.customer_details = 'Hardy Kutch' AND customer_interactions.status_code = 'bad';
SELECT services.service_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id JOIN services ON customers_and_services.service_id = services.service_id JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id AND customers_and_services.service_id = customer_interactions.service_id WHERE customers.customer_details = "Hardy Kutch" AND customer_interactions.status_code = "bad";
SELECT services.service_details FROM customer_interactions JOIN channels ON customer_interactions.channel_id = channels.channel_id JOIN services ON customer_interactions.service_id = services.service_id WHERE channels.channel_details = "15 ij";
SELECT services.service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id JOIN channels ON customer_interactions.channel_id = channels.channel_id WHERE channels.channel_details = '15 ij';
SELECT customers.customer_details FROM customers INNER JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id INNER JOIN services ON customer_interactions.service_id = services.service_id INNER JOIN channels ON customer_interactions.channel_id = channels.channel_id WHERE customer_interactions.status_code = 'Stuck' AND customer_interactions.services_and_channels_details = 'bad';
SELECT customer_details FROM customers WHERE customer_id IN ( SELECT customer_id FROM customer_interactions WHERE status_code = 'Stuck' AND services_and_channels_details = 'bad' );
SELECT COUNT(DISTINCT integration_platform_id) FROM integration_platform INNER JOIN customer_interactions ON integration_platform.customer_interaction_id = customer_interactions.customer_interaction_id WHERE status_code = 'successful';
SELECT COUNT(*) FROM integration_platform WHERE integration_platform_details = 'Success';
SELECT customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN integration_platform ON customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id WHERE integration_platform_details = 'failed';
SELECT customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN integration_platform ON integration_platform.customer_interaction_id = customer_interactions.customer_interaction_id WHERE integration_platform.integration_platform_details = 'Fail';
SELECT service_id, service_details FROM services WHERE service_id NOT IN (SELECT service_id FROM customers_and_services);
SELECT service_details FROM services WHERE service_id NOT IN ( SELECT service_id FROM customers_and_services );
SELECT analytical_layer_type_code, COUNT(analytical_id) as usage_count FROM analytical_layer GROUP BY analytical_layer_type_code;
SELECT analytical_layer_type_code, COUNT(analytical_id) as usage_count FROM analytical_layer GROUP BY analytical_layer_type_code;
SELECT services.service_details FROM customers_and_services JOIN services ON customers_and_services.service_id = services.service_id WHERE customers_and_services.customers_and_services_details = 'Unsatisfied';
SELECT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id WHERE customers_and_services_details = "Unsatisfied";
SELECT COUNT(id) FROM vehicles;
SELECT COUNT(*) FROM vehicles;
SELECT name FROM vehicles ORDER BY model_year DESC;
SELECT name FROM vehicles ORDER BY model_year DESC;
SELECT DISTINCT type_of_powertrain FROM vehicles;
SELECT DISTINCT type_of_powertrain FROM vehicles;
SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014);
SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014);
SELECT type_of_powertrain FROM vehicles WHERE model_year IN ('2013', '2014');
SELECT type_of_powertrain FROM vehicles WHERE model_year IN (2013, 2014) GROUP BY type_of_powertrain HAVING COUNT(DISTINCT model_year) = 2;
SELECT type_of_powertrain, COUNT(*) as number_of_vehicles FROM vehicles GROUP BY type_of_powertrain;
SELECT type_of_powertrain, COUNT(id) as num_of_vehicles FROM vehicles GROUP BY type_of_powertrain;
SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM vehicles;
SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles;
SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;
SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;
SELECT type_of_powertrain, AVG(annual_fuel_cost) as average_annual_fuel_cost FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) >= 2;
SELECT type_of_powertrain, AVG(annual_fuel_cost) as avg_annual_fuel_cost FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) >= 2;
SELECT name, age, membership_credit FROM customers;
SELECT name, age, membership_credit FROM customers;
SELECT name, age FROM customers ORDER BY membership_credit DESC LIMIT 1;
SELECT name, age FROM customers ORDER BY membership_credit DESC LIMIT 1;
SELECT avg(age) FROM customers WHERE membership_credit > (SELECT avg(membership_credit) FROM customers)
SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers);
SELECT * FROM discount;
SELECT * FROM discount;
SELECT vehicles.name, sum(renting_history.total_hours) AS total_hours FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name;
SELECT vehicles.name, SUM(renting_history.total_hours) AS total_rental_hours FROM vehicles INNER JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name;
SELECT name FROM vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM renting_history);
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history);
SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2);
SELECT name FROM customers WHERE id IN ( SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2 );
SELECT name, model_year FROM vehicles WHERE id = ( SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name, model_year FROM vehicles WHERE id = (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT vehicles.name FROM vehicles INNER JOIN renting_history ON renting_history.vehicles_id = vehicles.id ORDER BY renting_history.total_hours DESC;
SELECT vehicles.name FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id ORDER BY renting_history.total_hours DESC;
SELECT name FROM discount WHERE id = ( SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM discount WHERE id = ( SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1 ); 
SELECT name, type_of_powertrain FROM vehicles INNER JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE total_hours > 30;
SELECT name, type_of_powertrain FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING sum(total_hours) > 30);
SELECT type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM vehicles WHERE type_of_powertrain = 'car' GROUP BY type_of_powertrain;
SELECT type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM vehicles GROUP BY type_of_powertrain;
SELECT AVG(amount_of_loan) FROM student_loans;
SELECT AVG(amount_of_loan) FROM student_loans;
SELECT bio_data, student_id FROM students WHERE student_id IN ( SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) >= 2 ) AND student_id NOT IN ( SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(detention_id) >= 2 );
SELECT student_id, bio_data FROM students WHERE student_id IN ( SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) >= 2 ) OR student_id IN ( SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(detention_id) < 2 );
SELECT teacher_details FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM classes WHERE class_details LIKE '%data%' ) EXCEPT SELECT teacher_id FROM classes WHERE class_details LIKE 'net%';
SELECT teachers.teacher_details FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM classes WHERE class_details LIKE '%data%' ) EXCEPT SELECT teacher_id FROM classes WHERE class_details LIKE 'net%';
SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention) AND student_id NOT IN (SELECT student_id FROM student_loans);
SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention) AND student_id NOT IN (SELECT student_id FROM student_loans);
SELECT amount_of_loan, date_of_loan FROM student_loans WHERE student_id IN ( SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2 );
SELECT amount_of_loan, date_of_loan FROM student_loans WHERE student_id IN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT teacher_id, teacher_details FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1 );
SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1);
SELECT DISTINCT detention_summary FROM detention;
SELECT DISTINCT detention_summary FROM detention;
SELECT students.bio_data, ref_address_types.address_type_description FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code JOIN addresses ON students_addresses.address_id = addresses.address_id;
SELECT students.bio_data, ref_address_types.address_type_description FROM students_addresses JOIN students ON students_addresses.student_id = students.student_id JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code;
SELECT addresses.address_details, students.bio_data FROM students_addresses JOIN addresses ON students_addresses.address_id = addresses.address_id JOIN students ON students_addresses.student_id = students.student_id;
SELECT bio_data, address_details FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN addresses ON students_addresses.address_id = addresses.address_id;
SELECT bio_data, date_of_transcript FROM students JOIN transcripts ON students.student_id = transcripts.student_id;
SELECT bio_data, date_of_transcript FROM students JOIN transcripts ON students.student_id = transcripts.student_id;
SELECT COUNT(student_id), behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) as count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1;
SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = (SELECT COUNT(*) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND COUNT(*) = 3);
SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 3 ORDER BY COUNT(behaviour_monitoring_id) DESC LIMIT 1);
SELECT bio_data FROM students WHERE student_id IN ( SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1 );
SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT students.bio_data, student_events.event_date FROM students JOIN student_events ON students.student_id = student_events.student_id;
SELECT bio_data, event_date FROM students JOIN student_events ON students.student_id = student_events.student_id;
SELECT COUNT(DISTINCT student_id) AS num_students, student_events.event_type_code, ref_event_types.event_type_description FROM student_events JOIN ref_event_types ON student_events.event_type_code = ref_event_types.event_type_code GROUP BY student_events.event_type_code, ref_event_types.event_type_description ORDER BY num_students DESC LIMIT 1;
SELECT COUNT(DISTINCT student_id) AS num_students, se.event_type_code, ret.event_type_description FROM student_events se JOIN ref_event_types ret ON se.event_type_code = ret.event_type_code GROUP BY se.event_type_code, ret.event_type_description ORDER BY num_students DESC LIMIT 1;
SELECT achievement_details, achievement_type_description FROM achievements JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code;
SELECT achievement_details, achievement_type_description FROM achievements INNER JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code;
SELECT COUNT(DISTINCT teacher_id) FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM students LEFT JOIN achievements ON students.student_id = achievements.student_id WHERE achievement_id IS NULL);
SELECT COUNT(DISTINCT teacher_id) FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM classes WHERE student_id NOT IN ( SELECT student_id FROM achievements ) );
SELECT date_of_transcript, transcript_details FROM transcripts;
SELECT date_of_transcript, transcript_details FROM transcripts;
SELECT achievement_type_code, achievement_details, date_achievement FROM achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM achievements;
SELECT datetime_detention_start, datetime_detention_end FROM detention;
SELECT datetime_detention_start, datetime_detention_end FROM detention;
SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM students_addresses INNER JOIN addresses ON students_addresses.address_id = addresses.address_id WHERE address_details LIKE '%Suite%');
SELECT student_details FROM students WHERE student_details LIKE '%Suite%';
SELECT teachers.teacher_details, students.bio_data FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN students ON classes.student_id = students.student_id;
SELECT teacher.teacher_details, student.bio_data FROM classes JOIN teachers teacher ON classes.teacher_id = teacher.teacher_id JOIN students student ON classes.student_id = student.student_id;
SELECT COUNT(class_id), teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1;
SELECT teacher_id, COUNT(class_id) as num_courses FROM classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;
SELECT MAX(count_courses), student_id FROM (SELECT student_id, COUNT(class_id) AS count_courses FROM classes GROUP BY student_id) ;
SELECT student_id, COUNT(class_id) as num_courses FROM classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1;
SELECT student_id, student_details FROM students WHERE student_id IN ( SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2 );
SELECT student_id, student_details FROM students WHERE student_id IN ( SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2 );
SELECT detention_type_code, detention_type_description FROM ref_detention_type ORDER BY (SELECT COUNT(detention_type_code) FROM detention WHERE ref_detention_type.detention_type_code = detention.detention_type_code) LIMIT 1;
SELECT detention_type_code, detention_type_description FROM ref_detention_type ORDER BY (SELECT COUNT(*) FROM detention WHERE detention.detention_type_code = ref_detention_type.detention_type_code) LIMIT 1;
SELECT bio_data, student_details FROM students WHERE student_id IN ( SELECT student_id FROM student_loans GROUP BY student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans) );
SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_loans GROUP BY student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans) );
SELECT MIN(date_of_loan) FROM student_loans;
SELECT MIN(date_of_loan) FROM student_loans;
SELECT bio_data FROM students WHERE student_id = ( SELECT student_id FROM student_loans ORDER BY amount_of_loan LIMIT 1 );
SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan LIMIT 1);
SELECT date_of_transcript FROM transcripts WHERE student_id = ( SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1 );
SELECT max(date_of_transcript) FROM transcripts WHERE student_id = ( SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1 );
SELECT teacher_details FROM teachers JOIN transcripts ON teachers.teacher_id = (SELECT teacher_id FROM transcripts JOIN students ON transcripts.student_id = students.student_id WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts));
SELECT teacher_details FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts) );
SELECT student_id, sum(amount_of_loan) FROM student_loans GROUP BY student_id;
SELECT student_id, SUM(amount_of_loan) FROM student_loans GROUP BY student_id;
SELECT students.student_id, students.bio_data, COUNT(classes.class_id) as course_count FROM students LEFT JOIN classes ON students.student_id = classes.student_id GROUP BY students.student_id;
SELECT student_id, bio_data, COUNT(class_id) as num_courses FROM students JOIN classes USING(student_id) GROUP BY student_id;
SELECT COUNT(DISTINCT student_id) FROM detention;
SELECT COUNT(DISTINCT students.student_id) FROM students JOIN detention ON students.student_id = detention.student_id;
SELECT ref_address_types.address_type_code, ref_address_types.address_type_description FROM ref_address_types JOIN students_addresses ON ref_address_types.address_type_code = students_addresses.address_type_code GROUP BY ref_address_types.address_type_code, ref_address_types.address_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT address_type_code, address_type_description FROM ref_address_types WHERE address_type_code = ( SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT bio_data FROM students WHERE student_id IN ( SELECT se.student_id FROM student_events se LEFT JOIN student_loans sl ON se.student_id = sl.student_id WHERE sl.student_id IS NULL );
SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM student_events) AND student_id NOT IN (SELECT student_id FROM student_loans);
SELECT date_from, date_to FROM students_addresses WHERE student_id IN ( SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(*) = 2 );
SELECT MIN(date_from) AS start_time, MAX(date_to) AS end_time FROM students_addresses WHERE student_id IN ( SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2 );
SELECT datetime_detention_start FROM detention;
SELECT datetime_detention_start FROM detention;
SELECT name FROM author;
SELECT name FROM author
SELECT name, address FROM client;
SELECT name, address FROM client;
SELECT title, isbn, saleprice FROM book;
SELECT title, isbn, saleprice FROM book;
SELECT count(*) FROM book;
SELECT COUNT(isbn) FROM book;
SELECT COUNT(DISTINCT idauthor) FROM author;
SELECT count(idauthor) FROM author;
SELECT COUNT(idclient) FROM client;
SELECT COUNT(idclient) FROM client;
SELECT name, address FROM client ORDER BY name;
SELECT name, address FROM client ORDER BY name;
SELECT title, name FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor;
SELECT title, author_book.author FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor;
SELECT idorder, name FROM orders JOIN client ON orders.idclient = client.idclient;
SELECT orders.idorder, client.name FROM orders JOIN client ON orders.idclient = client.idclient;
SELECT author.name, COUNT(author_book.isbn) as books_written FROM author LEFT JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor;
SELECT name, COUNT(isbn) FROM author JOIN author_book ON author.idauthor = author_book.author GROUP BY name;
SELECT book.isbn, COUNT(books_order.idorder) AS order_count FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn;
SELECT b.isbn, sum(bo.amount) FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.isbn;
SELECT book.isbn, SUM(books_order.amount) AS total_amount_ordered FROM book JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn;
SELECT isbn, SUM(amount) FROM books_order GROUP BY isbn;
SELECT title FROM book WHERE isbn IN ( SELECT isbn FROM books_order GROUP BY isbn ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT b.title, b.purchaseprice FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title, b.purchaseprice ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT title, purchaseprice FROM book WHERE isbn IN (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC LIMIT 1);
SELECT title FROM book JOIN books_order ON book.isbn = books_order.isbn;
SELECT DISTINCT title FROM book JOIN books_order ON book.isbn = books_order.isbn;
SELECT DISTINCT name FROM client WHERE idclient IN (SELECT idclient FROM orders);
SELECT DISTINCT client.name FROM client JOIN orders ON client.idclient = orders.idclient;
SELECT name, COUNT(idorder) FROM client LEFT JOIN orders ON client.idclient = orders.idclient GROUP BY name;
SELECT client.name, COUNT(orders.idorder) FROM client JOIN orders ON client.idclient = orders.idclient GROUP BY client.name;
SELECT client.name FROM client WHERE idclient = ( SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.idclient ORDER BY COUNT(o.idorder) DESC LIMIT 1;
SELECT client.name, SUM(books_order.amount) FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.name;
SELECT name, sum(amount) FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY name;
SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.idclient ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders WHERE idorder = (SELECT idorder FROM (SELECT orders.idorder, SUM(amount) as total_amount FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY orders.idorder ORDER BY total_amount DESC LIMIT 1)));
SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order);
SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order);
SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders);
SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders);
SELECT MAX(saleprice), MIN(saleprice) FROM book;
SELECT MIN(saleprice), MAX(saleprice) FROM book;
SELECT AVG(purchaseprice), AVG(saleprice) FROM book;
SELECT AVG(purchaseprice) AS avg_purchase_price, AVG(saleprice) AS avg_sale_price FROM book;
SELECT MAX(saleprice - purchaseprice) AS max_profit FROM book;
SELECT MAX(saleprice - purchaseprice) AS largest_difference FROM book;
SELECT title FROM book WHERE saleprice > (SELECT AVG(saleprice) FROM book);
SELECT title FROM book WHERE saleprice > (SELECT AVG(saleprice) FROM book);
SELECT title FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book);
SELECT title FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book);
SELECT title FROM book WHERE purchaseprice = (SELECT MAX(purchaseprice) FROM book);
SELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1;
SELECT avg(saleprice) FROM book WHERE author = (SELECT idauthor FROM author WHERE name = 'George Orwell');
SELECT avg(saleprice) FROM book WHERE author IN (SELECT idauthor FROM author WHERE name = 'George Orwell');
SELECT saleprice FROM book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato');
SELECT saleprice FROM book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato');
SELECT title FROM book b JOIN author a ON b.author = a.idauthor WHERE a.name = "George Orwell" ORDER BY saleprice ASC LIMIT 1;
SELECT title FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell' ORDER BY saleprice LIMIT 1;
SELECT title FROM book WHERE author = 'Plato' AND saleprice < (SELECT AVG(saleprice) FROM book);
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato' AND b.saleprice < (SELECT AVG(saleprice) FROM book);
SELECT author.name FROM author JOIN author_book ON author.idauthor = author_book.author JOIN book ON author_book.isbn = book.isbn WHERE book.title = "Pride and Prejudice";
SELECT author.name FROM author JOIN author_book ON author.idauthor = author_book.author JOIN book ON book.isbn = author_book.isbn WHERE book.title = 'Pride and Prejudice';
SELECT title FROM book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%');
SELECT title FROM book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%');
SELECT COUNT(DISTINCT books_order.idorder) FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder WHERE book.title = 'Pride and Prejudice';
SELECT COUNT(DISTINCT orders.idorder) FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder WHERE book.title = "Pride and Prejudice";
SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = "Pride and Prejudice") INTERSECT SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = "The Little Prince");
SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title IN ('Pride and Prejudice', 'The Little Prince')) GROUP BY idorder HAVING COUNT(DISTINCT isbn) = 2;
SELECT isbn FROM book WHERE isbn IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') AND isbn IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith');
SELECT isbn FROM book WHERE isbn IN ( SELECT b.isbn FROM orders o JOIN book b ON o.idorder = b.isbn JOIN client c ON o.idclient = c.idclient WHERE c.name = 'Peter Doe' ) AND isbn IN ( SELECT b.isbn FROM orders o JOIN book b ON o.idorder = b.isbn JOIN client c ON o.idclient = c.idclient WHERE c.name = 'James Smith' );
SELECT title FROM book WHERE isbn IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') AND isbn NOT IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith');
SELECT title FROM book WHERE isbn IN ( SELECT b.isbn FROM orders o JOIN book b ON o.idorder = b.isbn JOIN client c ON o.idclient = c.idclient WHERE c.name = 'Peter Doe' ) AND isbn NOT IN ( SELECT b.isbn FROM orders o JOIN book b ON o.idorder = b.isbn JOIN client c ON o.idclient = c.idclient WHERE c.name = 'James Smith' );
SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN book ON orders.idorder = book.isbn WHERE book.title = 'Pride and Prejudice';
SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT idorder FROM book WHERE title = 'Pride and Prejudice') ); 
SELECT COUNT(*) FROM book;
SELECT title FROM book ORDER BY title ASC;
SELECT title FROM book ORDER BY pages DESC;
SELECT type, release FROM book;
SELECT MIN(chapters) AS min_chapters, MAX(chapters) AS max_chapters FROM book;
SELECT title FROM book WHERE type != "Poet";
SELECT AVG(rating) FROM review;
SELECT title, rating FROM review JOIN book ON review.book_id = book.book_id;
SELECT MAX(rating) FROM review WHERE book_id = (SELECT book_id FROM book ORDER BY chapters DESC LIMIT 1);
SELECT rank FROM book JOIN review ON book.book_id = review.book_id ORDER BY pages LIMIT 1;
SELECT title FROM book WHERE book_id = ( 	SELECT book_id 	FROM review 	ORDER BY rank DESC 	LIMIT 1 );
SELECT AVG(readers_in_million) FROM review JOIN book ON review.book_id = book.book_id WHERE type = 'Novel';
SELECT type, COUNT(book_id) as num_books FROM book GROUP BY type;
SELECT type FROM book GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type FROM book GROUP BY type HAVING COUNT(book_id) >= 3;
SELECT title FROM book JOIN review ON book.book_id = review.book_id ORDER BY rating ASC;
SELECT title, audio FROM book JOIN review ON book.book_id = review.book_id ORDER BY readers_in_million DESC;
SELECT COUNT(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review);
SELECT type FROM book GROUP BY type HAVING SUM(CASE WHEN chapters > 75 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN chapters < 50 THEN 1 ELSE 0 END) > 0;
SELECT COUNT(DISTINCT type) FROM book;
SELECT book.type, book.title FROM book WHERE book.book_id NOT IN (SELECT review.book_id FROM review);
SELECT COUNT(customer_id) FROM customer;
SELECT COUNT(customer_id) FROM customer;
SELECT name FROM customer ORDER BY level_of_membership ASC;
SELECT name FROM customer ORDER BY level_of_membership ASC;
SELECT nationality, card_credit FROM customer;
SELECT nationality, card_credit FROM customer;
SELECT name FROM customer WHERE nationality IN ('Australia', 'England');
SELECT name FROM customer WHERE nationality IN ('Australia', 'England');
SELECT AVG(card_credit) FROM customer WHERE level_of_membership > 1;
SELECT AVG(card_credit) FROM customer WHERE level_of_membership > 1;
SELECT MAX(card_credit) FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer);
SELECT card_credit FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer) LIMIT 1;
SELECT nationality, COUNT(customer_id) FROM customer GROUP BY nationality;
SELECT nationality, COUNT(customer_id) FROM customer GROUP BY nationality;
SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT nationality FROM customer WHERE card_credit < 50 INTERSECT SELECT nationality FROM customer WHERE card_credit > 75;
SELECT nationality FROM customer WHERE card_credit > 50 INTERSECT SELECT nationality FROM customer WHERE card_credit < 75;
SELECT customer.name, customer_order.dish_name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id;
SELECT customer.name, customer_order.dish_name FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id;
SELECT c.name, co.dish_name FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC;
SELECT customer.name, customer_order.dish_name FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id ORDER BY customer_order.quantity DESC;
SELECT customer.name, sum(quantity) FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id GROUP BY customer.name;
SELECT customer.name, SUM(customer_order.quantity) as total_quantity FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id GROUP BY customer.name;
SELECT customer.name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id HAVING SUM(quantity) > 1;
SELECT name FROM customer WHERE customer_id IN (SELECT customer_id FROM customer_order GROUP BY customer_id HAVING SUM(quantity) > 1);
SELECT DISTINCT manager FROM branch;
SELECT DISTINCT manager FROM branch;
SELECT name FROM customer WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_order);
SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order);
SELECT COUNT(member_id) FROM member;
SELECT name FROM member ORDER BY age ASC;
SELECT name, nationality FROM member;
SELECT name FROM member WHERE nationality <> 'England';
SELECT name FROM member WHERE age IN (19, 20);
SELECT name FROM member ORDER BY age DESC LIMIT 1;
SELECT nationality, COUNT(*) as member_count FROM member GROUP BY nationality;
SELECT nationality FROM member GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2;
SELECT club.club_name, member.name FROM club_leader JOIN club ON club_leader.club_id = club.club_id JOIN member ON club_leader.member_id = member.member_id;
SELECT name FROM club_leader JOIN member ON club_leader.member_id = member.member_id JOIN club ON club_leader.club_id = club.club_id WHERE overall_ranking > 100;
SELECT name FROM member WHERE member_id IN ( SELECT member_id FROM club_leader WHERE year_join < 2018 );
SELECT name FROM club_leader JOIN member ON club_leader.member_id = member.member_id JOIN club ON club.club_id = club_leader.club_id WHERE club_name = 'Houston';
SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM club_leader);
SELECT nationality FROM member WHERE age > 22 INTERSECT SELECT nationality FROM member WHERE age < 19;
SELECT avg(age) FROM member WHERE member_id IN (SELECT member_id FROM club_leader);
SELECT club_name FROM club WHERE club_name LIKE '%state%';
SELECT collection_subset_name FROM collection_subsets;
SELECT collection_subset_name FROM collection_subsets;
SELECT collection_name, collection_description FROM collections WHERE collection_id IN (SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name = 'Top collection');
SELECT collection_description FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collection_subsets.collection_subset_name = 'Top collection';
SELECT document_subset_name FROM document_subsets
SELECT document_subset_name FROM document_subsets;
SELECT document_subset_details FROM document_subsets WHERE document_subset_name = 'Best for 2000';
SELECT document_subset_details FROM document_subsets WHERE document_subset_name = 'Best for 2000';
SELECT document_object_id FROM document_objects;
SELECT document_object_id FROM document_objects;
SELECT document_objects.parent_document_object_id FROM document_objects WHERE document_objects.owner = "Marlin";
SELECT document_object_id FROM document_objects WHERE owner = 'Marlin';
SELECT owner FROM document_objects WHERE description = 'Braeden Collection';
SELECT owner FROM document_objects WHERE document_object_id IN ( SELECT document_object_id FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collection_name = 'Braeden Collection' );
SELECT document_objects.owner FROM document_objects WHERE document_objects.document_object_id = (SELECT document_objects.parent_document_object_id FROM document_objects WHERE document_objects.owner = 'Marlin');
SELECT owner FROM document_objects WHERE document_object_id IN ( SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin' );
SELECT DISTINCT description FROM document_objects WHERE parent_document_object_id IS NULL;
SELECT document_objects.description, document_objects.parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NULL;
SELECT COUNT(DISTINCT document_objects.document_object_id) FROM document_objects WHERE owner = 'Marlin';
SELECT COUNT(*) FROM document_objects WHERE owner = 'Marlin';
SELECT document_objects.document_object_id FROM document_objects LEFT JOIN ( SELECT DISTINCT parent_document_object_id FROM document_objects ) AS parents ON document_objects.document_object_id = parents.parent_document_object_id WHERE parents.parent_document_object_id IS NULL;
SELECT document_object_id FROM document_objects WHERE parent_document_object_id IS NULL;
SELECT document_objects.parent_document_object_id, COUNT(document_objects.document_object_id) as num_child_documents FROM document_objects GROUP BY document_objects.parent_document_object_id;
SELECT parent_document_object_id, COUNT(document_object_id) as number_of_child_documents FROM document_objects GROUP BY parent_document_object_id;
SELECT collection_name FROM collections;
SELECT collection_name FROM collections;
SELECT description FROM collections WHERE collection_name = 'Best';
SELECT collection_description FROM collections WHERE collection_name = 'Best';
SELECT collections.collection_name FROM collections WHERE collections.collection_id = ( SELECT collections.parent_collection_id FROM collections WHERE collections.collection_name = 'Nice' );
SELECT collections.collection_name FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collection_subsets.collection_subset_name = 'Nice';
SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL);
SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL);
SELECT document_object_id FROM document_objects GROUP BY document_object_id HAVING COUNT(parent_document_object_id) > 1;
SELECT document_object_id FROM document_objects GROUP BY document_object_id HAVING COUNT(parent_document_object_id) > 1;
SELECT COUNT(*) FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT count(c.collection_id) FROM collections c WHERE c.parent_collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT document_object_id FROM document_objects WHERE owner = 'Ransom';
SELECT document_objects.document_object_id FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id WHERE document_objects.owner = 'Ransom';
SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(collections.collection_id) as num_collections FROM collection_subsets LEFT JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id LEFT JOIN collections ON collection_subset_members.related_collection_id = collections.collection_id GROUP BY collection_subsets.collection_subset_id, collection_subsets.collection_subset_name;
SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(collection_subset_members.collection_id) FROM collection_subsets LEFT JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id GROUP BY collection_subsets.collection_subset_id, collection_subsets.collection_subset_name;
SELECT document_object_id, COUNT(*) as child_count FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY document_object_id ORDER BY child_count DESC LIMIT 1;
SELECT document_object_id, COUNT ( * ) FROM document_objects GROUP BY document_object_id;
SELECT document_object_id, COUNT(related_document_object_id) AS num_related_documents FROM document_subset_members GROUP BY document_object_id ORDER BY num_related_documents LIMIT 1;
SELECT document_object_id FROM documents_in_collections GROUP BY document_object_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT document_object_id, COUNT(related_document_object_id) FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) BETWEEN 2 AND 4;
SELECT document_object_id, COUNT(related_document_object_id) AS related_items FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) BETWEEN 2 AND 4;
SELECT DISTINCT do.owner FROM document_objects do JOIN document_subset_members dsm ON do.document_object_id = dsm.related_document_object_id JOIN document_objects braeden_documents ON dsm.document_object_id = braeden_documents.document_object_id WHERE braeden_documents.owner = 'Braeden';
SELECT DISTINCT owner FROM document_objects WHERE document_object_id IN ( 	SELECT related_document_object_id 	FROM document_subset_members 	WHERE document_object_id IN ( 		SELECT document_object_id 		FROM document_objects 		WHERE owner = 'Braeden' 	) );
SELECT document_subset_id FROM document_subset_members JOIN document_objects ON document_subset_members.related_document_object_id = document_objects.document_object_id WHERE owner = 'Braeden' GROUP BY document_subset_id;
SELECT DISTINCT document_subset_id FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id WHERE owner = 'Braeden';
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_objects.document_object_id) AS num_documents FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name;
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name;
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) AS num_documents FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name ORDER BY num_documents DESC LIMIT 1;
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_objects.document_object_id) as num_documents FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id JOIN document_objects ON document_subset_members.related_document_object_id = document_objects.document_object_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name ORDER BY num_documents DESC LIMIT 1;
SELECT document_objects.document_object_id FROM document_subset_members JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE document_subset_name = 'Best for 2000';
SELECT document_objects.document_object_id FROM document_objects JOIN document_subset_members ON document_subset_members.related_document_object_id = document_objects.document_object_id JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_subsets.document_subset_name = 'Best for 2000';
SELECT document_subsets.document_subset_name, document_objects.document_object_id FROM document_subsets JOIN document_subset_members ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN document_objects ON document_objects.document_object_id = document_subset_members.related_document_object_id;
SELECT document_subsets.document_subset_name, document_objects.document_object_id FROM document_subset_members JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN document_objects ON document_subset_members.related_document_object_id = document_objects.document_object_id;
SELECT collections.collection_name FROM document_objects JOIN documents_in_collections ON document_objects.document_object_id = documents_in_collections.document_object_id JOIN collections ON collections.collection_id = documents_in_collections.collection_id WHERE document_objects.owner = 'Ransom';
SELECT collection_name FROM document_objects JOIN documents_in_collections ON documents_in_collections.document_object_id = document_objects.document_object_id JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE document_objects.owner = 'Ransom';
SELECT document_objects.document_object_id, COUNT(DISTINCT documents_in_collections.collection_id) AS collection_count FROM document_objects JOIN documents_in_collections ON document_objects.document_object_id = documents_in_collections.document_object_id GROUP BY document_objects.document_object_id;
SELECT document_object_id, COUNT(collection_id) AS num_collections FROM documents_in_collections GROUP BY document_object_id;
SELECT COUNT(documents_in_collections.document_object_id) FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE collections.collection_name = 'Best';
SELECT COUNT(DISTINCT document_objects.document_object_id) FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE collections.collection_name = 'Best';
SELECT document_objects.document_object_id FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE collection_name = 'Best';
SELECT COUNT(DISTINCT document_object_id) FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT c.collection_name, c.collection_id, COUNT(*) as num_docs FROM collections c JOIN documents_in_collections dic ON c.collection_id = dic.collection_id GROUP BY c.collection_id ORDER BY num_docs DESC LIMIT 1;
SELECT c.collection_name, c.collection_id, COUNT(dic.document_object_id) AS document_count FROM collections c JOIN documents_in_collections dic ON c.collection_id = dic.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_name, c.collection_id ORDER BY document_count DESC LIMIT 1;
SELECT document_subset_members.document_object_id FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id JOIN document_subset_members ON documents_in_collections.document_object_id = document_subset_members.document_object_id JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_subset_name = 'Best for 2000' AND collection_name = 'Best';
SELECT document_objects.document_object_id FROM document_subsets JOIN documents_in_collections ON document_subsets.document_subset_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE document_subsets.document_subset_name = 'Best for 2000' AND collections.collection_name = 'Best';
SELECT documents_in_collections.document_object_id FROM documents_in_collections JOIN collections ON collections.collection_id = documents_in_collections.collection_id LEFT JOIN document_subset_members ON document_subset_members.document_object_id = documents_in_collections.document_object_id AND document_subset_members.document_subset_id = 2000 WHERE collections.collection_name = 'Best' AND document_subset_members.related_document_object_id IS NULL;
SELECT document_objects.document_object_id FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE collections.collection_name = 'Best' EXCEPT SELECT document_objects.document_object_id FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_subset_members ON documents_in_collections.document_object_id = document_subset_members.document_object_id JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE collections.collection_name = 'Best' AND document_subset_members.document_subset_id = 'Best for 2000';
SELECT document_object_id FROM document_subset_members WHERE document_subset_id = ( SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000' ) UNION SELECT document_object_id FROM documents_in_collections WHERE collection_id = ( SELECT collection_id FROM collections WHERE collection_name = 'Best' );
SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT collection_name FROM collections WHERE collection_id IN ( SELECT related_collection_id FROM collection_subset_members WHERE collection_id = ( SELECT collection_id FROM collections WHERE collection_name = "Best" ) );
SELECT collections.collection_name FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id WHERE collection_subset_members.collection_id = (SELECT collection_id FROM collections WHERE collection_name = "Best");
SELECT count(*) FROM collections WHERE collection_id IN (SELECT related_collection_id FROM collection_subset_members WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'));
SELECT COUNT(DISTINCT collections.collection_id) FROM collections WHERE collections.collection_id IN (SELECT related_collection_id FROM collection_subset_members WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'));
SELECT collection_subset_name FROM collection_subsets JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id JOIN collections ON collections.collection_id = collection_subset_members.related_collection_id WHERE collections.collection_name = "Best";
SELECT collection_subsets.collection_subset_name FROM collections JOIN collection_subset_members ON collection_subset_members.related_collection_id = collections.collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collections.collection_name = 'Best';
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%';
SELECT name FROM songs ORDER BY name ASC;
SELECT name, language FROM songs;
SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score;
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway';
SELECT id, language, original_artist FROM songs WHERE name != 'Love';
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love';
SELECT DISTINCT stage_presence FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'English';
SELECT id, name FROM participants WHERE id IN ( SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2 );
SELECT id, name, popularity FROM participants ORDER BY ( SELECT COUNT(songs_id) FROM performance_score WHERE participant_id = participants.id );
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 OR rhythm_tempo = 5);
SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English';
SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id, songs.name ORDER BY COUNT(DISTINCT performance_score.participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT Count(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score);
SELECT songs.language, AVG(performance_score.rhythm_tempo) FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.language;
SELECT DISTINCT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English';
SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE language = 'Croatian' INTERSECT SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE language = 'English');
SELECT name FROM songs WHERE name LIKE '%Is%';
SELECT s.original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC;
SELECT COUNT(city_code) FROM city;
SELECT COUNT(*) FROM city;
SELECT DISTINCT state FROM city;
SELECT DISTINCT state FROM city;
SELECT COUNT(DISTINCT country) FROM city;
SELECT COUNT(DISTINCT country) FROM city;
SELECT city_name, city_code, state, country FROM city;
SELECT city_name, city_code, state, country FROM city;
SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore';
SELECT city_name FROM city WHERE state = 'PA';
SELECT city_name FROM city WHERE state = "PA";
SELECT COUNT(city_code) FROM city WHERE country = "CANADA";
SELECT COUNT(city_name) FROM city WHERE country = 'CANADA';
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude;
SELECT state, COUNT(city_name) as num_cities FROM city GROUP BY state;
SELECT city.state, COUNT(DISTINCT city.city_name) as num_cities FROM city GROUP BY city.state;
SELECT country, COUNT(city_name) as city_count FROM city GROUP BY country;
SELECT city.country, COUNT(city.city_name) AS city_count FROM city GROUP BY city.country;
SELECT state FROM city GROUP BY state HAVING COUNT(city_name) >= 2;
SELECT state FROM city GROUP BY state HAVING COUNT(city_name) >= 2;
SELECT state FROM city GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT state FROM city GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1;
SELECT country FROM city GROUP BY country ORDER BY COUNT(city_name) ASC LIMIT 1;
SELECT country FROM city GROUP BY country ORDER BY COUNT(city_name) ASC LIMIT 1;
SELECT fname, lname FROM student JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD';
SELECT lname || ' ' || fname FROM student WHERE city_code IN (SELECT city_code FROM city WHERE state = 'MD');
SELECT COUNT(*) FROM student JOIN city ON student.city_code = city.city_code WHERE country = 'CHINA';
SELECT COUNT(*) FROM student JOIN city ON student.city_code = city.city_code WHERE country = 'CHINA';
SELECT fname, major FROM student WHERE city_code = ( SELECT city_code FROM city WHERE city_name = 'Baltimore' );
SELECT fname, major FROM student WHERE city_code = (SELECT city_code FROM city WHERE city_name = 'Baltimore');
SELECT country, COUNT(DISTINCT stuid) AS num_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY country;
SELECT city.country, COUNT(student.stuid) AS num_students FROM student JOIN city ON student.city_code = city.city_code GROUP BY city.country;
SELECT city_name, COUNT(stuid) as student_count FROM city JOIN student ON city.city_code = student.city_code GROUP BY city_name;
SELECT city.city_name, COUNT(student.stuid) FROM student JOIN city ON student.city_code = city.city_code GROUP BY city.city_name;
SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM city GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT country FROM city JOIN student ON city.city_code = student.city_code GROUP BY country ORDER BY COUNT(stuid) ASC LIMIT 1;
SELECT city.city_name FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.city_name HAVING COUNT(student.stuid) >= 3;
SELECT city_name FROM city WHERE city_code IN ( SELECT city_code FROM student GROUP BY city_code HAVING COUNT(*) >= 3 );
SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(DISTINCT student.stuid) > 5;
SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(DISTINCT stuid) > 5;
SELECT stuid FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country != 'USA');
SELECT stuid FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country != "USA");
SELECT stuid FROM student WHERE sex = 'F' AND city_code IN (SELECT city_code FROM city WHERE state = 'PA');
SELECT stuid FROM student WHERE sex = 'F' AND city_code IN (SELECT city_code FROM city WHERE state = 'PA');
SELECT stuid FROM student WHERE sex = 'male' AND city_code NOT IN (SELECT city_code FROM city WHERE country = 'USA');
SELECT stuid FROM student WHERE sex = 'M' AND city_code NOT IN (SELECT city_code FROM city WHERE country <> 'USA');
SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM city WHERE city_name = 'Newark');
SELECT distance FROM direct_distance JOIN city ON direct_distance.city1_code = city.city_code WHERE city.city_name = 'Boston' AND city.city_name = 'Newark';
SELECT AVG(distance) AS average_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM direct_distance;
SELECT AVG(distance), MIN(distance), MAX(distance) FROM direct_distance;
SELECT city1_code FROM direct_distance ORDER BY distance DESC LIMIT 2;
SELECT city1_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance);
SELECT city.city_code FROM direct_distance JOIN city ON direct_distance.city1_code = city.city_code WHERE distance > (SELECT AVG(distance) FROM direct_distance);
SELECT city1_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance);
SELECT city1_code FROM direct_distance WHERE distance < 1000;
SELECT city_code FROM city WHERE city_code IN ( SELECT city1_code FROM direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM direct_distance WHERE distance < 1000 );
SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL';
SELECT sum(distance) FROM direct_distance WHERE city1_code = 'BAL';
SELECT ROUND(AVG(distance), 2) FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston');
SELECT AVG(distance) FROM direct_distance JOIN city ON city.city_code = direct_distance.city2_code WHERE city.city_name = 'Boston'
SELECT (SELECT city_name FROM city WHERE city_code = (SELECT city1_code FROM direct_distance WHERE city2_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1) );
SELECT (SELECT city_name FROM city JOIN direct_distance ON city.city_code = direct_distance.city2_code WHERE city_name != 'Chicago' ORDER BY distance ASC LIMIT 1);
SELECT city_name FROM city ORDER BY ( SELECT distance FROM direct_distance JOIN city ON direct_distance.city2_code = city.city_code WHERE city_name = "Boston" ) DESC LIMIT 1;
SELECT city_name FROM city WHERE city_code = ( SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1 );
SELECT city.city_code, SUM(distance) FROM city JOIN direct_distance ON direct_distance.city1_code = city.city_code GROUP BY city.city_code;
SELECT city_code, SUM(distance) FROM city JOIN direct_distance ON direct_distance.city2_code = city.city_code GROUP BY city_code;
SELECT city_name, AVG(distance) as avg_distance FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_name;
SELECT city_name, AVG(distance) FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_name;
SELECT d.distance FROM direct_distance d JOIN city c1 ON d.city1_code = c1.city_code JOIN city c2 ON d.city2_code = c2.city_code JOIN student s1 ON s1.city_code = c1.city_code JOIN student s2 ON s2.city_code = c2.city_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim';
SELECT distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') AND city2_code = (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim');
SELECT s.fname, s.lname FROM student s WHERE s.stuid = (SELECT s1.stuid FROM student s1 JOIN city c1 ON s1.city_code = c1.city_code JOIN city c2 ON c1.state = c2.state JOIN direct_distance dd ON dd.city1_code = c1.city_code JOIN city c3 ON dd.city2_code = c3.city_code WHERE s1.fname = "Linda" AND s1.lname = "Smith" ORDER BY dd.distance DESC LIMIT 1);
SELECT s.fname || ' ' || s.lname AS full_name FROM student s JOIN city c ON s.city_code = c.city_code ORDER BY ABS(c.latitude - (SELECT c2.latitude FROM student s2 JOIN city c2 ON s2.city_code = c2.city_code WHERE s2.fname = 'Linda' AND s2.lname = 'Smith')) + ABS(c.longitude - (SELECT c2.longitude FROM student s2 JOIN city c2 ON s2.city_code = c2.city_code WHERE s2.fname = 'Linda' AND s2.lname = 'Smith')) DESC LIMIT 1;
SELECT state FROM student JOIN city ON student.city_code = city.city_code WHERE fname = 'Linda';
SELECT state FROM student JOIN city ON student.city_code = city.city_code WHERE fname = 'Linda';
SELECT * FROM sailors WHERE age > 30;
SELECT * FROM sailors WHERE age > 30;
SELECT name, age FROM sailors WHERE age < 30;
SELECT name, age FROM sailors WHERE age < 30;
SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid = 1;
SELECT bid FROM reserves WHERE sid = 1;
SELECT sid FROM reserves WHERE bid = 102;
SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102);
SELECT DISTINCT boats.bid FROM reserves JOIN boats ON reserves.bid = boats.bid;
SELECT bid FROM reserves;
SELECT name FROM sailors WHERE name LIKE '%e%';
SELECT name FROM sailors WHERE name LIKE '%e%';
SELECT sid FROM sailors WHERE age > (SELECT MAX(age) FROM sailors);
SELECT sid FROM sailors WHERE age <> (SELECT MIN(age) FROM sailors);
SELECT DISTINCT s.name FROM sailors s WHERE s.age > (SELECT MAX(age) FROM sailors WHERE rating > 7);
SELECT DISTINCT s1.name FROM sailors s1, sailors s2 WHERE s1.age > s2.age AND s2.rating > 7;
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves);
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves);
SELECT sid, name FROM sailors WHERE sid IN ( SELECT sid FROM reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1 );
SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2);
SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red' OR color = 'blue';
SELECT sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color IN ('red', 'blue'));
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red' OR color = 'blue');
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red' OR color = 'blue');
SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red') INTERSECT SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'blue');
SELECT sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red') INTERSECT SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'blue';
SELECT s.sid, s.name FROM sailors s WHERE s.sid IN ( SELECT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' ) AND s.sid IN ( SELECT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'blue' );
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red') INTERSECT SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'blue');
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT name, sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)
SELECT sid, name FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103;
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON boats.bid = reserves.bid WHERE boats.bid = 103;
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis');
SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis');
SELECT s1.name FROM sailors s1 WHERE s1.rating > (SELECT s2.rating FROM sailors s2 WHERE s2.name = 'Luis') AND s1.name <> 'Luis';
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis');
SELECT name, sid FROM sailors WHERE rating > 2 AND sid IN (SELECT sid FROM reserves);
SELECT sid, name FROM sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM reserves);
SELECT name, age FROM sailors ORDER BY age DESC LIMIT 1;
SELECT name, age FROM sailors ORDER BY age DESC LIMIT 1;
SELECT count(distinct sid) as total_sailors FROM sailors;
SELECT COUNT(*) FROM sailors;
SELECT AVG(age) FROM sailors WHERE rating = 7;
SELECT AVG(age) FROM sailors WHERE rating = 7;
SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%';
SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%';
SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM sailors;
SELECT AVG(rating) AS average_rating, MAX(age) AS largest_age FROM sailors;
SELECT bid, COUNT(*) FROM reserves GROUP BY bid;
SELECT boats.bid, COUNT(*) as reservation_count FROM boats JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid;
SELECT bid, count(*) AS num_reservations FROM reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) FROM reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) as num_reservations FROM reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT bid, count(*) as num_reservations FROM reserves GROUP BY bid HAVING count(*) > 1;
SELECT boats.bid, COUNT(reserves.bid) FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.sid > 1 GROUP BY boats.bid;
SELECT boats.name, COUNT(*) as num_reservations FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE reserves.sid > 1 GROUP BY boats.name;
SELECT rating, AVG(age) FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red') GROUP BY rating;
SELECT rating, AVG(age) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY rating;
SELECT name, rating, age FROM sailors ORDER BY rating, age;
SELECT name, rating, age FROM sailors ORDER BY rating, age;
SELECT COUNT(*) FROM boats;
SELECT COUNT(*) FROM boats;
SELECT COUNT(*) FROM boats WHERE color = 'red';
SELECT COUNT(*) FROM boats WHERE color = 'red';
SELECT name FROM boats WHERE bid IN (SELECT bid FROM reserves WHERE sid IN (SELECT sid FROM sailors WHERE age BETWEEN 20 AND 30));
SELECT DISTINCT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.age BETWEEN 20 AND 30;
SELECT DISTINCT sailors.name FROM sailors WHERE sailors.rating > (SELECT MAX(sailors.rating) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' );
SELECT name FROM sailors WHERE rating > (SELECT MAX(sailors.rating) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red');
SELECT MAX(rating) FROM sailors;
SELECT MAX(rating) FROM sailors;
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.name = 'Melon';
SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.name = 'Melon');
SELECT name, age FROM sailors ORDER BY rating DESC;
SELECT name, age FROM sailors ORDER BY rating DESC;
SELECT model FROM headphone ORDER BY price DESC LIMIT 1;
SELECT model FROM headphone ORDER BY price DESC LIMIT 1;
SELECT DISTINCT model FROM headphone ORDER BY model ASC;
SELECT DISTINCT model FROM headphone ORDER BY model ASC;
SELECT class FROM headphone GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT class FROM headphone GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) > 2;
SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) <= 2;
SELECT class, COUNT(*) FROM headphone WHERE price > 200 GROUP BY class;
SELECT class, COUNT(headphone_id) FROM headphone WHERE price > 200 GROUP BY class;
SELECT COUNT(DISTINCT earpads) AS num_earpads FROM headphone;
SELECT COUNT(DISTINCT earpads) FROM headphone;
SELECT earpads FROM headphone GROUP BY earpads ORDER BY COUNT(*) DESC LIMIT 2;
SELECT earpads FROM headphone GROUP BY earpads ORDER BY COUNT(*) DESC LIMIT 2;
SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone);
SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone);
SELECT construction, AVG(price) as average_price FROM headphone GROUP BY construction;
SELECT construction, AVG(price) FROM headphone GROUP BY construction;
SELECT class FROM headphone WHERE earpads = 'Bowls' INTERSECT SELECT class FROM headphone WHERE earpads = 'Comfort Pads';
SELECT class FROM headphone WHERE earpads = 'Bowls' INTERSECT SELECT class FROM headphone WHERE earpads = 'Comfort Pads';
SELECT DISTINCT earpads FROM headphone WHERE construction != 'Plastic';
SELECT earpads FROM headphone WHERE construction != 'Plastic';
SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone);
SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone);
SELECT name FROM store ORDER BY date_opened;
SELECT name FROM store ORDER BY date_opened;
SELECT name, parking FROM store WHERE neighborhood = 'Tarzana';
SELECT name, parking FROM store WHERE neighborhood = 'Tarzana';
SELECT COUNT(DISTINCT neighborhood) FROM store;
SELECT COUNT(DISTINCT neighborhood) FROM store;
SELECT neighborhood, COUNT(store_id) AS num_stores FROM store GROUP BY neighborhood;
SELECT neighborhood, COUNT(DISTINCT store_id) as store_count FROM store GROUP BY neighborhood;
SELECT name, sum(quantity) as total_headphones FROM store JOIN stock ON store.store_id = stock.store_id GROUP BY name ORDER BY total_headphones DESC LIMIT 1;
SELECT store.name, SUM(stock.quantity) as total_quantity FROM store JOIN stock ON store.store_id = stock.store_id GROUP BY store.store_id;
SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock);
SELECT name FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock);
SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock);
SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock);
SELECT headphone.model FROM headphone JOIN stock ON headphone.headphone_id = stock.headphone_id GROUP BY headphone.model ORDER BY SUM(stock.quantity) DESC LIMIT 1;
SELECT headphone.model FROM headphone JOIN stock ON stock.headphone_id = headphone.headphone_id GROUP BY headphone.model ORDER BY SUM(stock.quantity) DESC LIMIT 1;
SELECT COUNT(headphone_id) FROM stock JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman';
SELECT SUM(quantity) FROM stock JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman';
SELECT DISTINCT neighborhood FROM store WHERE neighborhood NOT IN ( SELECT s.neighborhood FROM stock st JOIN store s ON st.store_id = s.store_id );
SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock);
SELECT COUNT(author_id) FROM author;
SELECT COUNT(author_id) FROM author;
SELECT COUNT(*) FROM paper;
SELECT COUNT(*) FROM paper;
SELECT COUNT(DISTINCT affiliation_id) FROM affiliation;
SELECT COUNT(DISTINCT affiliation_id) FROM affiliation;
SELECT Count(*) FROM paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*) FROM paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 AND affiliation.name = 'Columbia University';
SELECT COUNT(*) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year = 2009;
SELECT name, address FROM affiliation
SELECT name, address FROM affiliation;
SELECT venue, year FROM paper ORDER BY year;
SELECT DISTINCT venue FROM paper ORDER BY year;
SELECT title, author_list.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Harvard University';
SELECT title, paper_id FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list WHERE affiliation_id = ( SELECT affiliation_id FROM affiliation WHERE name = 'Harvard University' ) );
SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown';
SELECT title, paper.paper_id FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE author.name = 'Mckeown';
SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id JOIN author ON author_list.author_id = author.author_id WHERE affiliation.name IN ('Columbia University', 'Stanford University');
SELECT DISTINCT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' INTERSECT SELECT DISTINCT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University';
SELECT paper.title, paper.paper_id FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE author.name = 'McKeown, Kathleen' OR author.name = 'Rambow, Owen' GROUP BY paper.title, paper.paper_id HAVING COUNT(DISTINCT author.name) = 2;
SELECT p.title, al.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON a.author_id = al.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY p.title, al.paper_id HAVING COUNT(DISTINCT a.name) = 2;
SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown') EXCEPT SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Rambow'));
SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Rambow'));
SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE name IN ('McKeown, Kathleen', 'Rambow, Owen'));
SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name IN ('McKeown, Kathleen', 'Rambow, Owen')));
SELECT name, COUNT(paper_id) AS num_papers FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id ORDER BY num_papers DESC;
SELECT author.name, count(paper.paper_id) as paper_count FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY paper_count DESC;
SELECT name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id, name ORDER BY COUNT(DISTINCT paper.paper_id) ASC;
SELECT name FROM affiliation ORDER BY ( SELECT COUNT(*) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id WHERE author_list.affiliation_id = affiliation.affiliation_id ) DESC;
SELECT name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(DISTINCT author_list.paper_id) > 50;
SELECT name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(DISTINCT paper_id) > 50;
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) = 1);
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) = 1);
SELECT venue, year FROM paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue, year FROM paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1;
SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(*) FROM citation WHERE cited_paper_id = 'A00-1002';
SELECT count(*) FROM citation WHERE paper_id = 'D12-1027';
SELECT COUNT(citation.cited_paper_id) FROM citation WHERE paper_id = 'D12-1027';
SELECT paper_id, COUNT(*) as citation_count FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT paper_id, COUNT(cited_paper_id) as num_citations FROM citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT title FROM paper WHERE paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT title FROM paper WHERE paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT paper.title, COUNT(citation.paper_id) as num_citations FROM paper JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY num_citations DESC LIMIT 10;
SELECT paper.title, COUNT(*) as num_citations FROM paper JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY num_citations DESC LIMIT 10;
SELECT count(citation.cited_paper_id) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id JOIN citation ON paper.paper_id = citation.paper_id WHERE author.name = 'Mckeown , Kathleen';
SELECT count(*) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.paper_id JOIN paper ON citation.cited_paper_id = paper.paper_id WHERE author.name = 'Mckeown , Kathleen';
SELECT COUNT(*) FROM citation WHERE cited_paper_id IN ( SELECT paper_id FROM author WHERE name = 'Mckeown , Kathleen' );
SELECT COUNT(*) FROM citation JOIN paper ON citation.cited_paper_id = paper.paper_id JOIN author_list ON citation.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown , Kathleen';
SELECT name, count(*) as num_citations FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON paper.paper_id = author_list.paper_id JOIN citation ON citation.cited_paper_id = paper.paper_id GROUP BY author.author_id ORDER BY num_citations DESC LIMIT 1;
SELECT name, count(citation.cited_paper_id) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.paper_id GROUP BY author.author_id ORDER BY count(citation.cited_paper_id) DESC LIMIT 1;
SELECT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown , Kathleen'));
SELECT venue, year FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE name = 'Mckeown, Kathleen';
SELECT DISTINCT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University');
SELECT DISTINCT venue, year FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' );
SELECT name FROM author WHERE author_id IN ( SELECT author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE year = 2009 GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM author WHERE author.author_id IN ( SELECT author_id FROM author_list INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE year = 2009 GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id WHERE year = 2009 GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3);
SELECT name FROM affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE year = 2009 GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3);
SELECT count(paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009;
SELECT COUNT(*) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009;
SELECT COUNT(DISTINCT paper.paper_id) FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = "Stanford University" AND paper.year BETWEEN 2000 AND 2009;
SELECT COUNT(DISTINCT paper.paper_id) FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009;
SELECT title FROM paper WHERE paper_id = ( SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1 );
SELECT title FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1 );
SELECT count(*) FROM author WHERE name = 'Mckeown, Kathleen';
SELECT COUNT(DISTINCT author_list.author_id) FROM author JOIN author_list ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown , Kathleen';
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id WHERE author_list.paper_id IN ( SELECT paper_id FROM author_list JOIN author ON author.author_id = author_list.author_id AND author.name = 'Mckeown , Kathleen' ) GROUP BY author.name ORDER BY COUNT(author_list.paper_id) DESC LIMIT 1;
SELECT name FROM author WHERE author_id IN ( SELECT author_id FROM author WHERE name = 'Mckeown , Kathleen' )
SELECT paper_id FROM paper WHERE title LIKE '%translation%';
SELECT paper_id FROM paper WHERE title LIKE '%translation%';
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM citation);
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM citation);
SELECT name FROM affiliation WHERE address LIKE '%China%' AND affiliation_id IN ( SELECT affiliation_id FROM author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 1 );
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.address = 'China' GROUP BY affiliation.name ORDER BY COUNT(*) desc LIMIT 1;
SELECT year, venue, COUNT(paper_id) as num_papers FROM paper GROUP BY year, venue;
SELECT venue, year, count(paper_id) FROM paper GROUP BY venue, year;
SELECT affiliation.name, COUNT(paper.paper_id) AS total_papers FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name;
SELECT affiliation.name, COUNT(paper.paper_id) as paper_count FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name;
SELECT title FROM paper WHERE paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id HAVING COUNT(*) > 50);
SELECT title FROM paper WHERE paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id HAVING COUNT(*) > 50);
SELECT COUNT(DISTINCT author.author_id) FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN paper ON author_list.paper_id = paper.paper_id LEFT JOIN citation ON paper.paper_id = citation.paper_id GROUP BY author.author_id HAVING COUNT(citation.cited_paper_id) <= 50 OR COUNT(citation.cited_paper_id) IS NULL;
SELECT COUNT(DISTINCT author.author_id) FROM author WHERE author.author_id NOT IN (SELECT author.author_id FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id JOIN citation ON paper.paper_id = citation.paper_id GROUP BY author.author_id HAVING COUNT(citation.cited_paper_id) > 50);
SELECT DISTINCT name FROM author WHERE author.author_id IN ( SELECT author_id FROM author_list WHERE paper_id IN ( SELECT paper_id FROM paper WHERE year = 2009 AND venue IN ('NAACL', 'ACL') ) );
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE venue = 'NAACL' AND year = 2009) INTERSECT SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE venue = 'ACL' AND year = 2009);
SELECT name FROM author WHERE author_id NOT IN ( SELECT author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE venue = 'ACL' );
SELECT name FROM author WHERE author_id NOT IN ( SELECT author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL' );
SELECT count(*) FROM conference;
SELECT COUNT(conference_id) FROM conference;
SELECT DISTINCT conference_name FROM conference;
SELECT DISTINCT conference_name FROM conference;
SELECT conference_name, year, location FROM conference;
SELECT conference_name, year, location FROM conference;
SELECT conference_name, COUNT(*) as conference_count FROM conference GROUP BY conference_name;
SELECT conference_name, COUNT(year) as occurrences FROM conference GROUP BY conference_name;
SELECT year, COUNT(conference_id) FROM conference GROUP BY year;
SELECT year, COUNT(conference_id) as no_of_conferences FROM conference GROUP BY year;
SELECT year FROM conference GROUP BY year ORDER BY COUNT(*) ASC LIMIT 1;
SELECT year FROM conference GROUP BY year ORDER BY COUNT(*) ASC LIMIT 1;
SELECT location FROM conference GROUP BY location HAVING COUNT(DISTINCT conference_id) >= 2;
SELECT location FROM conference GROUP BY location HAVING COUNT(DISTINCT conference_id) >= 2;
SELECT institution_name, location, founded FROM institution;
SELECT institution_name, location, founded FROM institution;
SELECT COUNT(institution_id) FROM institution WHERE founded >= 1850 AND founded <= 1900;
SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900;
SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1;
SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1;
SELECT institution_name, COUNT(staff.staff_id) FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE founded > 1800 GROUP BY institution_name;
SELECT institution_id, count(name) as staff_count, group_concat(name) as staff_names FROM staff WHERE institution_id IN (SELECT institution_id FROM institution WHERE founded > 1800) GROUP BY institution_id;
SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff);
SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff);
SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff);
SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff);
SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM staff WHERE nationality = 'United States';
SELECT MAX(age) AS maximum_age, MIN(age) AS minimum_age FROM staff;
SELECT conference.conference_name FROM conference INNER JOIN conference_participation ON conference.conference_id = conference_participation.conference_id INNER JOIN staff ON staff.staff_id = conference_participation.staff_id WHERE staff.nationality = 'Canada';
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id JOIN staff ON conference_participation.staff_id = staff.staff_id WHERE staff.nationality = 'Canada';
SELECT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE role = 'Speaker' INTERSECT SELECT staff_id FROM conference_participation WHERE role = 'Sponsor' );
SELECT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE role = 'Speaker' ) INTERSECT SELECT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE role = 'Sponsor' );
SELECT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'ACL') ) INTERSECT SELECT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'Naccl') );
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'ACL')) INTERSECT SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'NACCL'));
SELECT name FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year IN (2003, 2004);
SELECT DISTINCT staff.name FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year IN (2003, 2004);
SELECT conference.conference_name, conference.year, COUNT(staff.staff_id) as num_participants FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id JOIN staff ON staff.staff_id = conference_participation.staff_id GROUP BY conference.conference_id, conference.conference_name, conference.year;
SELECT conference.conference_id, conference.conference_name, conference.year, COUNT(conference_participation.staff_id) as num_participants FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id;
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id ORDER BY COUNT(DISTINCT conference_participation.staff_id) DESC LIMIT 2;
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id ORDER BY COUNT(DISTINCT conference_participation.staff_id) DESC LIMIT 2;
SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'ACL'));
SELECT distinct s.name, s.nationality FROM staff s WHERE s.staff_id not in (SELECT distinct cp.staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL');
SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff WHERE institution_id IS NOT NULL AND institution_id <> '' AND staff_id IN (SELECT staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE year = 2004));
SELECT institution_name, location FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE conference_id IN ( SELECT conference_id FROM conference WHERE year = 2004 ) ) );
SELECT pilot_name FROM pilotskills ORDER BY age DESC LIMIT 1;
SELECT pilot_name FROM pilotskills ORDER BY age DESC LIMIT 1;
SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) FROM pilotskills) ORDER BY age;
SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) FROM pilotskills) ORDER BY age ASC;
SELECT * FROM pilotskills WHERE age < 30;
SELECT * FROM pilotskills WHERE age < 30;
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age < 35;
SELECT pilot_name FROM pilotskills WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT location FROM hangar WHERE plane_name = 'F-14 Fighter';
SELECT location FROM hangar WHERE plane_name = 'F-14 Fighter';
SELECT COUNT(DISTINCT location) FROM hangar;
SELECT COUNT(DISTINCT location) FROM hangar;
SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32;
SELECT COUNT(*) FROM pilotskills WHERE age > 40;
SELECT COUNT(*) FROM pilotskills WHERE age > 40;
SELECT COUNT(DISTINCT pilotskills.plane_name) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE pilotskills.age < 35 AND pilotskills.plane_name = 'B-52 Bomber';
SELECT COUNT(*) FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE hangar.plane_name = 'B-52 Bomber' AND pilotskills.age < 35;
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1;
SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT plane_name FROM hangar GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT count(DISTINCT pilot_name) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.location = 'Chicago';
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Chicago');
SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41;
SELECT hangar.plane_name FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE pilot_name = 'Smith' AND age = 41;
SELECT COUNT(DISTINCT plane_name) FROM pilotskills;
SELECT COUNT(DISTINCT plane_name) FROM pilotskills;
SELECT COUNT(plane_name) FROM hangar WHERE plane_name IN (SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith');
SELECT COUNT(plane_name) FROM pilotskills WHERE pilot_name = 'Smith';
SELECT COUNT(DISTINCT hangar.plane_name) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE age > 40;
SELECT COUNT(DISTINCT hangar.plane_name) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE age > 40;
SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM pilotskills ORDER BY age DESC;
SELECT pilot_name FROM pilotskills ORDER BY age DESC;
SELECT hangar.location FROM hangar ORDER BY hangar.plane_name;
SELECT hangar.location FROM hangar ORDER BY hangar.plane_name;
SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name;
SELECT plane_name FROM hangar ORDER BY plane_name ASC;
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > 40 OR age < 30;
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > 40 OR age < 30;
SELECT pilot_name, age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name, age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub';
SELECT AVG(age) AS average_age, MIN(age) AS smallest_age FROM pilotskills;
SELECT AVG(age), MIN(age) FROM pilotskills;
SELECT pilot_name FROM pilotskills WHERE plane_name IN ( SELECT plane_name FROM hangar WHERE location = 'Austin' ) INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name IN ( SELECT plane_name FROM hangar WHERE location = 'Boston' );
SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name IN ( SELECT plane_name FROM hangar WHERE location = 'Austin' INTERSECT SELECT plane_name FROM hangar WHERE location = 'Boston' );
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name = 'F-14 Fighter';
SELECT pilot_name FROM pilotskills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT avg(age) as average_age, plane_name FROM pilotskills GROUP BY plane_name;
SELECT plane_name, AVG(age) as avg_age FROM pilotskills GROUP BY plane_name;
SELECT plane_name, COUNT(*) as plane_count FROM hangar GROUP BY plane_name;
SELECT plane_name, COUNT(*) FROM hangar GROUP BY plane_name;
SELECT plane_name, pilot_name FROM pilotskills WHERE (plane_name, age) IN ( SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name ) ORDER BY plane_name;
SELECT plane_name, MIN(pilot_name) FROM pilotskills GROUP BY plane_name ORDER BY plane_name;
SELECT plane_name, pilot_name FROM pilotskills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name);
SELECT plane_name, MAX(age) AS oldest_pilot FROM pilotskills GROUP BY plane_name;
SELECT pilot_name, MAX(age) FROM pilotskills GROUP BY pilot_name;
SELECT pilot_name, MAX(age) FROM pilotskills GROUP BY pilot_name;
SELECT location, COUNT(pilot_name) as number_of_pilots, AVG(age) as average_age FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY location;
SELECT hangar.location, COUNT(pilot_name) as num_pilots, AVG(age) as avg_age FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.location;
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35);
SELECT plane_name, COUNT(pilot_name) FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35;
SELECT hangar.location FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name ORDER BY pilotskills.age ASC LIMIT 1;
SELECT hangar.location FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MIN(age) FROM pilotskills);
SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin');
SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin');
SELECT pilot_name FROM pilotskills WHERE age > (SELECT age FROM pilotskills WHERE plane_name = 'Piper Cub' ORDER BY age DESC LIMIT 1) ORDER BY pilot_name ASC;
SELECT pilot_name FROM pilotskills WHERE age > (SELECT MAX(age) FROM pilotskills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name;
SELECT COUNT(DISTINCT(pilot_name)) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter');
SELECT COUNT(pilot_name) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills INNER JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.plane_name = 'F-14 Fighter');
SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%';
SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%';
SELECT COUNT(*) FROM pilotskills WHERE age > (SELECT MAX(age) FROM pilotskills WHERE plane_name = 'Piper Cub');
SELECT count(*) FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub');
SELECT name FROM district ORDER BY area_km DESC LIMIT 1;
SELECT area_km, government_website FROM district ORDER BY population LIMIT 1;
SELECT district.name, district.population FROM district WHERE area_km > (SELECT AVG(area_km) FROM district);
SELECT MAX(area_km), AVG(area_km) FROM district;
SELECT sum(population) FROM district WHERE district_id IN (SELECT district_id FROM district ORDER BY area_km DESC LIMIT 3);
SELECT district_id, name, government_website FROM district ORDER BY population;
SELECT name FROM district WHERE government_website LIKE '%.gov';
SELECT district_id, name FROM district WHERE population > 4000 OR area_km > 3000;
SELECT name, speach_title FROM spokesman;
SELECT AVG(points) AS avg_points, AVG(age) AS avg_age FROM spokesman WHERE rank_position = 1;
SELECT name, points FROM spokesman WHERE age < 40;
SELECT name FROM district ORDER BY government_website DESC LIMIT 1;
SELECT name FROM spokesman WHERE points < (SELECT AVG(points) FROM spokesman);
SELECT name FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(spokesman_id) DESC LIMIT 1);
SELECT name FROM spokesman WHERE spokesman_id IN ( SELECT spokesman_id FROM spokesman_district WHERE start_year < 2004 );
SELECT district.name, count(spokesman.spokesman_id) as num_spokesmen FROM spokesman_district JOIN district ON spokesman_district.district_id = district.district_id JOIN spokesman ON spokesman_district.spokesman_id = spokesman.spokesman_id GROUP BY district.name;
SELECT DISTINCT district.name FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id JOIN spokesman ON spokesman.spokesman_id = spokesman_district.spokesman_id AND spokesman.rank_position IN (1, 2) GROUP BY district.name HAVING COUNT(DISTINCT spokesman.rank_position) = 2;
SELECT district.name FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id GROUP BY district.name HAVING COUNT(spokesman_id) > 1;
SELECT COUNT(DISTINCT district.district_id) FROM district LEFT JOIN spokesman_district ON district.district_id = spokesman_district.district_id WHERE spokesman_district.spokesman_id IS NULL;
SELECT name FROM spokesman WHERE spokesman_id NOT IN (SELECT spokesman_id FROM spokesman_district);
SELECT SUM(population) AS total_population, AVG(population) AS average_population FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district); 
SELECT title FROM sculptures ORDER BY year DESC LIMIT 1;
SELECT title FROM sculptures ORDER BY year DESC LIMIT 1;
SELECT title, location FROM paintings ORDER BY year LIMIT 1;
SELECT title, location FROM paintings WHERE year = (SELECT MIN(year) FROM paintings);
SELECT title FROM sculptures WHERE location = "Gallery 226";
SELECT title FROM sculptures WHERE location = 'Gallery 226';
SELECT title, location FROM paintings;
SELECT title, location FROM paintings;
SELECT title, location FROM sculptures;
SELECT sculptures.title, sculptures.location FROM sculptures;
SELECT medium FROM paintings WHERE paintingid = 80;
SELECT medium FROM paintings WHERE paintingid = 80;
SELECT firstname, lastname FROM artists WHERE birth_year > 1850;
SELECT fname || ' ' || lname AS full_name FROM artists WHERE birthyear > 1850;
SELECT title, year FROM sculptures WHERE location != 'Gallery 226';
SELECT sculptures.title, sculptures.year FROM sculptures WHERE sculptures.location != 'Gallery 226';
SELECT lname, fname FROM artists WHERE artistid IN ( SELECT sculptorid FROM sculptures WHERE year < 1900 );
SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900);
SELECT DISTINCT birthyear FROM artists WHERE artistid IN ( SELECT sculptorid FROM sculptures WHERE year > 1920 );
SELECT birthyear FROM artists WHERE artistid IN ( SELECT sculptorid FROM sculptures WHERE year > 1920 );
SELECT lname, fname FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1;
SELECT fname || ' ' || lname FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1;
SELECT MIN(deathyear - birthyear) FROM artists;
SELECT MIN(deathyear - birthyear) AS shortest_life FROM artists;
SELECT fname, (deathyear - birthyear) as age FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1;
SELECT fname, (MAX(deathyear) - birthyear) AS age FROM artists;
SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240';
SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240';
SELECT COUNT(paintingid) FROM paintings WHERE painterid = ( SELECT artistid FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1 );
SELECT COUNT(*) FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists));
SELECT artists.fname, paintings.title, paintings.year FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE artists.fname = 'Mary';
SELECT artists.fname, paintings.title, paintings.year FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE artists.fname = 'Mary';
SELECT width_mm FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE birthyear < 1850;
SELECT width_mm FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.birthyear < 1850;
SELECT location, medium FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE fname = 'Pablo';
SELECT location, mediumon FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE fname = 'Pablo';
SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) INTERSECT SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures);
SELECT fname || ' ' || lname AS full_name FROM artists WHERE artistid IN ( SELECT painterid FROM paintings INTERSECT SELECT sculptorid FROM sculptures );
SELECT fname, lname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' INTERSECT SELECT painterid FROM paintings WHERE medium = 'lithograph' ); 
SELECT lname, fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') INTERSECT SELECT lname, fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph');
SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884 AND medium = 'canvas');
SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884);
SELECT DISTINCT fname FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241';
SELECT fname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241' );
SELECT medium, COUNT(*) as num_works FROM paintings GROUP BY medium UNION SELECT medium, COUNT(*) as num_works FROM sculptures GROUP BY medium;
SELECT medium, COUNT(*) AS total_works FROM paintings GROUP BY medium UNION SELECT medium, COUNT(*) AS total_works FROM sculptures GROUP BY medium;
SELECT medium, AVG(height_mm) as average_height FROM paintings GROUP BY medium;
SELECT AVG(height_mm), medium FROM paintings GROUP BY medium;
SELECT COUNT(*), location FROM paintings WHERE year < 1900 GROUP BY location;
SELECT COUNT(DISTINCT location) FROM paintings WHERE year < 1900;
SELECT title FROM paintings WHERE year > 1910 AND medium = 'oil';
SELECT title FROM paintings WHERE medium = 'oil' AND year > 1910;
SELECT DISTINCT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240';
SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240';
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE medium = 'canvas');
SELECT DISTINCT title FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE medium = 'canvas');
SELECT DISTINCT p1.paintingid FROM paintings p1 WHERE p1.year < (SELECT year FROM paintings WHERE location = 'Gallery 240' LIMIT 1);
SELECT DISTINCT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240');
SELECT MIN(year) FROM paintings;
SELECT MIN(year) FROM paintings;
SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%');
SELECT artists.fname || ' ' || artists.lname FROM artists JOIN sculptures ON sculptures.sculptorid = artists.artistid WHERE sculptures.title LIKE '%female%';
SELECT DISTINCT title FROM paintings ORDER BY title ASC;
SELECT DISTINCT title FROM paintings ORDER BY title ASC;
SELECT DISTINCT title FROM paintings ORDER BY height_mm;
SELECT DISTINCT title FROM paintings ORDER BY height_mm;
SELECT fname, lname FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE year BETWEEN 1900 AND 1950 UNION SELECT fname, lname FROM sculptures JOIN artists ON sculptures.sculptorid = artists.artistid WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM paintings WHERE year >= 1900 AND year <= 1950 UNION SELECT title FROM sculptures WHERE year >= 1900 AND year <= 1950;
SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222;
SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222;
SELECT artistid FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1);
SELECT artistid FROM ( SELECT artistid, COUNT( * ) AS painting_count FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE year < 1900 GROUP BY artistid ORDER BY painting_count DESC LIMIT 1 );
SELECT (SELECT fname FROM artists WHERE artistid = ( SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) DESC LIMIT 1 ) );
SELECT fname FROM artists WHERE artistid = ( SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT title FROM paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT title FROM paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT location FROM paintings WHERE year < 1885 OR year > 1930;
SELECT location FROM paintings WHERE year < 1885 OR year > 1930;
SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT paintingid from paintings where height_mm > 500 and height_mm < 2000;
SELECT location FROM paintings WHERE medium = 'panel' INTERSECT SELECT location FROM paintings WHERE medium = 'canvas';
SELECT location FROM paintings WHERE medium = 'panel' INTERSECT SELECT location FROM paintings WHERE medium = 'canvas';
SELECT location FROM paintings WHERE year < 1885 INTERSECT SELECT location FROM paintings WHERE year > 1930;
SELECT location FROM paintings WHERE year < 1885 INTERSECT SELECT location FROM paintings WHERE year > 1930;
SELECT avg(height_mm), avg(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT AVG(height_mm), AVG(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT MAX(height_mm), MAX(paintingid) FROM paintings WHERE year < 1900;
SELECT MAX(height_mm), paintingid FROM paintings WHERE year < 1900;
SELECT MAX(height_mm) AS max_height, MAX(width_mm) AS max_width, year FROM paintings GROUP BY year;
SELECT year, MAX(height_mm) AS largest_height, MAX(width_mm) AS largest_width FROM paintings GROUP BY year;
SELECT AVG(height_mm), AVG(width_mm), lname FROM paintings JOIN artists ON paintings.painterid = artists.artistid GROUP BY lname ORDER BY lname;
SELECT AVG(height_mm), AVG(width_mm), artists.lname FROM paintings JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.lname ORDER BY artists.lname;
SELECT fname, COUNT(p.paintingid) FROM artists a JOIN paintings p ON a.artistid = p.painterid GROUP BY a.artistid, a.fname HAVING COUNT(p.paintingid) >= 2;
SELECT fname, COUNT(paintingid) FROM artists JOIN paintings ON artists.artistid = paintings.painterid GROUP BY fname HAVING COUNT(paintingid) >= 2;
SELECT artists.deathyear FROM artists WHERE artists.artistid IN ( SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(*) <= 3 );
SELECT lname, fname, deathyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(*) < 4);
SELECT deathyear FROM artists WHERE artistid = ( SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT MAX(deathyear) FROM artists WHERE artistid = ( SELECT artistid FROM ( SELECT sculptorid AS artistid, COUNT(*) AS num_sculptures FROM sculptures GROUP BY sculptorid ORDER BY num_sculptures LIMIT 1 ) );
SELECT paintingid, height_mm FROM paintings WHERE width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240');
SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240');
SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240');
SELECT paintingid FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE year > 1900);
SELECT paintingid FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE year > 1900);
SELECT artistid FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 3 );
SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1);
SELECT paintingid, location, title FROM paintings WHERE medium = 'oil' ORDER BY year;
SELECT paintingid, location, title FROM paintings WHERE medium = 'oil' ORDER BY year;
SELECT year, location, title FROM paintings WHERE height_mm > 1000 ORDER BY title;
SELECT year, location, title FROM paintings WHERE height_mm > 1000 ORDER BY title ASC;
SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) AND artistid NOT IN (SELECT sculptorid FROM sculptures);
SELECT fname, lname FROM artists WHERE artistid NOT IN (SELECT sculptorid FROM sculptures) AND artistid IN (SELECT painterid FROM paintings)
SELECT location FROM paintings WHERE year < 1885 EXCEPT SELECT location FROM paintings WHERE mediumon != 'canvas';
SELECT location FROM paintings WHERE year < 1885 AND medium != 'canvas';
SELECT COUNT(*) FROM race;
SELECT COUNT(*) FROM race;
SELECT winning_driver, winning_team FROM race JOIN driver ON race.driver_id = driver.driver_id ORDER BY winning_team;
SELECT winning_driver, winning_team FROM race JOIN driver ON race.driver_id = driver.driver_id ORDER BY winning_team ASC;
SELECT winning_driver FROM race WHERE pole_position <> 'Junior Strous';
SELECT winning_driver FROM race WHERE pole_position <> "Junior Strous";
SELECT constructor FROM driver ORDER BY age ASC;
SELECT DISTINCT constructor FROM driver ORDER BY age ASC;
SELECT DISTINCT entrant FROM driver WHERE age >= 20;
SELECT DISTINCT entrant FROM driver WHERE age >= 20;
SELECT MAX(age) as max_age, MIN(age) as min_age FROM driver;
SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM driver;
SELECT COUNT(DISTINCT engine) FROM driver WHERE age > 30 OR age < 20;
SELECT COUNT(DISTINCT engine) FROM driver WHERE age > 30 OR age < 20;
SELECT driver_name FROM driver ORDER BY driver_name DESC;
SELECT driver_name FROM driver ORDER BY driver_name DESC;
SELECT driver.driver_name, race.race_name FROM driver JOIN race ON driver.driver_id = race.driver_id;
SELECT driver.driver_name, race.race_name FROM driver JOIN race ON driver.driver_id = race.driver_id;
SELECT driver_name, COUNT(race_name) FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY driver_name;
SELECT driver_name, COUNT(race_name) as num_races FROM driver LEFT JOIN race ON driver.driver_id = race.driver_id GROUP BY driver_name;
SELECT age FROM driver WHERE driver_id = (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT MAX(age) FROM driver GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2);
SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2);
SELECT race_name FROM race JOIN driver ON race.driver_id = driver.driver_id WHERE age >= 26;
SELECT race_name FROM race WHERE driver_id IN (SELECT driver_id FROM driver WHERE age >= 26);
SELECT driver_name FROM driver WHERE constructor <> "Bugatti";
SELECT driver_name FROM driver WHERE constructor != 'Bugatti';
SELECT constructor, COUNT(DISTINCT driver_id) FROM driver GROUP BY constructor;
SELECT driver.constructor, COUNT(DISTINCT driver.driver_id) FROM driver GROUP BY driver.constructor;
SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1;
SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1;
SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) >= 2;
SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) >= 2;
SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race);
SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race);
SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30;
SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30;
SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(*) > 1;
SELECT constructor FROM driver GROUP BY constructor HAVING COUNT(DISTINCT driver_id) > 1;
SELECT driver.driver_name FROM driver WHERE driver.driver_id IN ( SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe' ) INTERSECT SELECT driver.driver_name FROM driver WHERE driver.driver_id IN ( SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' );
SELECT driver_name FROM driver WHERE driver_id IN ( SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe' ) INTERSECT SELECT driver_name FROM driver WHERE driver_id IN ( SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' );
SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = "James Hinchcliffe");
SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe');
SELECT Count(*) FROM languages;
SELECT COUNT(*) FROM languages;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT AVG(justice_score) FROM countries;
SELECT AVG(justice_score) FROM countries;
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name <> 'Norway';
SELECT MAX(health_score) FROM countries WHERE name != 'Norway'; SELECT MIN(health_score) FROM countries WHERE name != 'Norway';
SELECT COUNT(DISTINCT language_id) AS number_of_languages FROM official_languages;
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT languages.name, COUNT(official_languages.country_id) FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY official_languages.language_id;
SELECT languages.name, COUNT(country_id) FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name;
SELECT languages.name FROM languages JOIN official_languages ON official_languages.language_id = languages.id JOIN countries ON countries.id = official_languages.country_id GROUP BY languages.name ORDER BY COUNT(country_id) DESC LIMIT 1;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2;
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2;
SELECT AVG(overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON languages.id = official_languages.language_id WHERE languages.name = 'English';
SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = 'English'));
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY COUNT(*) DESC LIMIT 3;
SELECT l.name FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY ol.language_id ORDER BY COUNT(ol.country_id) DESC LIMIT 3;
SELECT official_languages.language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY official_languages.language_id ORDER BY AVG(countries.overall_score) DESC;
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON countries.id = official_languages.country_id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC;
SELECT name FROM countries WHERE id = ( SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1 );
SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
SELECT name FROM languages WHERE id IN ( SELECT language_id FROM official_languages WHERE country_id IN ( SELECT id FROM countries WHERE overall_score > 95 ) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN ( SELECT id FROM countries WHERE overall_score < 90 ) );
SELECT name FROM languages WHERE id IN ( SELECT language_id FROM official_languages WHERE country_id IN ( SELECT id FROM countries WHERE overall_score > 95 ) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN ( SELECT id FROM countries WHERE overall_score < 90 ) );
SELECT DISTINCT country, town_city FROM addresses;
SELECT addresses.country, addresses.town_city FROM addresses;
SELECT properties.property_name, addresses.county_state_province FROM properties JOIN addresses ON properties.property_address_id = addresses.address_id;
SELECT properties.property_id, addresses.county_state_province FROM properties JOIN addresses ON properties.property_address_id = addresses.address_id;
SELECT feature_description FROM features WHERE feature_name = 'rooftop';
SELECT feature_description FROM features WHERE feature_name = 'rooftop';
SELECT feature_name, feature_description FROM features WHERE feature_id = ( SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT features.feature_name, features.feature_description FROM features WHERE features.feature_id IN ( SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT MIN(room_count) FROM properties;
SELECT MIN(room_count) FROM properties;
SELECT COUNT(DISTINCT property_id) FROM properties WHERE garage_yn = 1;
SELECT COUNT(DISTINCT property_id) FROM properties WHERE property_name = 'garage' OR property_id IN (SELECT property_id FROM properties GROUP BY property_id HAVING COUNT(property_id) = 1);
SELECT ref_age_categories.age_category_code FROM users JOIN ref_age_categories ON users.age_category_code = ref_age_categories.age_category_code WHERE users.first_name LIKE '%Mother%' OR users.last_name LIKE '%Mother%';
SELECT age_category_description FROM ref_age_categories WHERE age_category_description LIKE '%Mother%';
SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1);
SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT avg(room_count) FROM properties WHERE garage_yn = 'Y';
SELECT AVG(room_count) FROM properties WHERE property_id IN ( SELECT property_id FROM property_features INNER JOIN features ON property_features.feature_id = features.feature_id WHERE feature_name = 'garden' );
SELECT addresses.town_city FROM properties JOIN addresses ON properties.property_address_id = addresses.address_id JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'swimming pool';
SELECT town_city FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties WHERE property_id IN (SELECT property_id FROM features WHERE feature_name = 'swimming pool'));
SELECT property_id, price_min FROM properties ORDER BY vendor_requested_price LIMIT 1;
SELECT property_id, MIN(vendor_requested_price) FROM properties;
SELECT AVG(room_count) FROM properties;
SELECT AVG(room_count) FROM properties;
SELECT COUNT(DISTINCT room_size) FROM rooms;
SELECT COUNT(DISTINCT room_size) as num_room_sizes FROM rooms;
SELECT user_searches.user_id, search_string FROM user_searches WHERE user_id IN ( SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2 );
SELECT user_id, search_seq FROM user_searches GROUP BY user_id, search_seq HAVING COUNT(*) >= 2;
SELECT MAX(search_datetime) as latest_search_datetime FROM user_searches;
SELECT MAX(search_datetime) FROM user_searches;
SELECT search_datetime, search_string FROM user_searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM user_searches ORDER BY search_string DESC;
SELECT zip_postcode FROM addresses WHERE address_id IN ( SELECT property_address_id FROM properties WHERE owner_user_id IN ( SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2 ) );
SELECT zip_postcode FROM addresses WHERE address_id IN ( 	SELECT property_address_id 	FROM properties 	WHERE owner_user_id IN ( 		SELECT owner_user_id 		FROM properties 		GROUP BY owner_user_id 		HAVING COUNT(property_id) > 2 	) );
SELECT user_category_code, user_id FROM users WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) = 1);
SELECT user_id, user_category_code FROM users WHERE user_id IN ( SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) = 1 )
SELECT ref_age_categories.age_category_description FROM users JOIN user_searches ON users.user_id = user_searches.user_id JOIN ref_age_categories ON users.age_category_code = ref_age_categories.age_category_code WHERE user_searches.search_seq = 1;
SELECT ref_age_categories.age_category_description FROM ref_age_categories JOIN users ON ref_age_categories.age_category_code = users.age_category_code JOIN user_searches ON users.user_id = user_searches.user_id WHERE user_searches.search_datetime = ( SELECT MIN(search_datetime) FROM user_searches )
SELECT login_name FROM users WHERE user_category_code = "Senior Citizen" ORDER BY first_name;
SELECT login_name FROM users WHERE user_category_code = (SELECT user_category_code FROM ref_user_categories WHERE user_category_description = 'Senior Citizen') ORDER BY first_name;
SELECT COUNT(*) FROM user_searches WHERE user_id IN (SELECT user_id FROM users WHERE is_buyer = 1);
SELECT COUNT(*) FROM user_searches JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1;
SELECT datestamp FROM user_property_history WHERE user_id = (SELECT user_id FROM user_searches WHERE search_string = 'ratione' AND search_seq = 1);
SELECT date_registered FROM users WHERE login_name = 'ratione';
SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1;
SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1;
SELECT addresses.line_1_number_building, addresses.line_2_number_street, addresses.town_city FROM ref_user_categories JOIN users ON ref_user_categories.user_category_code = users.user_category_code JOIN addresses ON users.user_address_id = addresses.address_id WHERE ref_user_categories.user_category_description = 'Senior Citizen';
SELECT line_1_number_building, line_2_number_street, town_city FROM addresses WHERE address_id IN ( SELECT user_address_id FROM users WHERE user_category_code = 'Senior Citizen' );
SELECT COUNT(DISTINCT property_id) FROM property_features GROUP BY property_id HAVING COUNT(feature_id) >= 2;
SELECT COUNT(DISTINCT property_id) FROM property_features GROUP BY property_id HAVING COUNT(*) >= 2;
SELECT property_id, count(*) as total_photos FROM property_photos GROUP BY property_id;
SELECT property_id, COUNT(*) AS num_photos FROM property_photos GROUP BY property_id;
SELECT users.user_id, COUNT(photo_seq) as num_photos FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id;
SELECT users.user_id, COUNT(*) FROM users INNER JOIN properties ON users.user_id = properties.owner_user_id INNER JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id;
SELECT SUM(price_max) FROM properties WHERE owner_user_id IN (SELECT user_id FROM users WHERE user_category_code IN ('Single Mother', 'Student'));
SELECT SUM(price_max) FROM properties WHERE owner_user_id IN (SELECT user_id FROM users WHERE user_category_code IN ('Single Mother', 'Student'));
SELECT datestamp, property_name FROM user_property_history JOIN properties ON user_property_history.property_id = properties.property_id ORDER BY datestamp;
SELECT datestamp, property_name FROM user_property_history JOIN properties ON user_property_history.property_id = properties.property_id ORDER BY datestamp;
SELECT property_type_code, property_type_description FROM ref_property_types GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT property_type_code, property_type_description FROM ref_property_types GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT age_category_description FROM ref_age_categories WHERE age_category_code = 'Over 60';
SELECT ref_age_categories.age_category_description FROM ref_age_categories WHERE age_category_code = "Over 60";
SELECT room_size, COUNT(*) FROM rooms GROUP BY room_size;
SELECT room_size, COUNT(*) FROM rooms GROUP BY room_size;
SELECT country FROM users JOIN addresses ON users.user_address_id = addresses.address_id WHERE first_name = 'Robbie';
SELECT country FROM addresses WHERE address_id = (SELECT user_address_id FROM users WHERE first_name = 'Robbie');
SELECT first_name, middle_name, last_name FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN addresses ON properties.property_address_id = addresses.address_id WHERE users.user_id = addresses.address_id;
SELECT users.first_name || ' ' || users.last_name AS full_name FROM users JOIN properties ON properties.owner_user_id = users.user_id JOIN addresses ON properties.property_address_id = addresses.address_id;
SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT owner_user_id FROM properties);
SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT owner_user_id FROM properties);
SELECT last_name, user_id FROM users WHERE user_id IN (SELECT user_id FROM user_property_history GROUP BY user_id HAVING COUNT(DISTINCT property_id) >= 2) AND user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) <= 2);
SELECT last_name, user_id FROM users WHERE user_id IN ( SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) <= 2 ) AND user_id IN ( SELECT user_id FROM user_property_history GROUP BY user_id HAVING COUNT(DISTINCT property_id) >= 2 );
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC;
SELECT heat, name, nation FROM cyclist;
SELECT MAX(weight) as max_weight, MIN(weight) as min_weight FROM bike;
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';
SELECT name, result FROM cyclist WHERE nation != 'Russia';
SELECT DISTINCT id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE purchase_year > 2015);
SELECT id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(cyclist_id) >= 4);
SELECT MAX(cyclist.id), cyclist.name FROM cyclist INNER JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id, cyclist.name ORDER BY COUNT(cyclists_own_bikes.bike_id) DESC LIMIT 1;
SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation IN ('Russia', 'Great Britain')));
SELECT COUNT(DISTINCT heat) AS number_of_heat_levels FROM cyclist;
SELECT COUNT(DISTINCT cyclist.id) FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclists_own_bikes.purchase_year IS NULL OR cyclists_own_bikes.purchase_year <= 2015;
SELECT DISTINCT product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE result > '4:21.558';
SELECT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY bike.product_name, bike.price HAVING COUNT(DISTINCT cyclist.name) = 2;
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE material = 'racing'));
SELECT product_name FROM bike WHERE material LIKE '%fiber%';
SELECT cyclist_id, count(bike_id) as num_bikes FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id;
SELECT MAX(price), flavor FROM goods WHERE food = 'Cake';
SELECT id, flavor FROM goods WHERE food = 'Cake' ORDER BY price DESC LIMIT 1;
SELECT price, flavor FROM goods WHERE food = 'Cookie' ORDER BY price ASC LIMIT 1;
SELECT id, flavor FROM goods WHERE food = 'Cookie' ORDER BY price LIMIT 1;
SELECT id FROM goods WHERE flavor = 'Apple';
SELECT id FROM goods WHERE flavor = 'Apple';
SELECT id FROM goods WHERE price < 3;
SELECT goods.id FROM goods WHERE price < 3;
SELECT DISTINCT customers.id FROM customers INNER JOIN receipts ON customers.id = receipts.customerid INNER JOIN items ON items.receipt = receipts.receiptnumber INNER JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Lemon' AND goods.food = 'Cake';
SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Lemon' AND goods.food = 'Cake';
SELECT food, COUNT(DISTINCT customerid) FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY food;
SELECT customers.firstname, customers.lastname, goods.food, count(receipts.customerid) as num_customers FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber JOIN customers ON receipts.customerid = customers.id GROUP BY goods.food;
SELECT customerid FROM receipts WHERE customerid IN ( SELECT customerid FROM receipts WHERE receiptnumber IN( SELECT receipt FROM items WHERE item IN ( SELECT id FROM goods WHERE flavor = 'bakery' ) ) GROUP BY customerid HAVING count(receiptnumber) >= 15 );
SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(*) >= 15;
SELECT customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid WHERE receipts.receiptnumber IN ( SELECT receipt FROM items GROUP BY receipt HAVING COUNT(DISTINCT item) > 10 );
SELECT lastname FROM customers WHERE id IN (SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(*) > 10);
SELECT COUNT(DISTINCT flavor) FROM goods WHERE food = 'Cake';
SELECT COUNT(DISTINCT flavor) FROM goods WHERE food = 'Cake';
SELECT flavor FROM goods WHERE food = "Croissant";
SELECT flavor FROM goods WHERE food = 'Croissant';
SELECT DISTINCT flavor FROM items JOIN goods ON items.item = goods.id JOIN receipts ON items.receipt = receiptnumber JOIN customers ON receipts.customerid = customers.id WHERE customers.id = 15;
SELECT items.item FROM items JOIN receipts ON items.receipt = receipts.receiptnumber WHERE receipts.customerid = 15;
SELECT food, AVG(price), MAX(price), MIN(price) FROM goods GROUP BY food;
SELECT food, AVG(price), MIN(price), MAX(price) FROM goods GROUP BY food;
SELECT receiptnumber FROM items JOIN goods ON items.item = goods.id JOIN receipts ON items.receipt = receipts.receiptnumber JOIN customers ON receipts.customerid = customers.id WHERE goods.food = 'Cake' INTERSECT SELECT receiptnumber FROM items JOIN goods ON items.item = goods.id JOIN receipts ON items.receipt = receipts.receiptnumber JOIN customers ON receipts.customerid = customers.id WHERE goods.food = 'Cookie';
SELECT receiptnumber FROM receipts WHERE receiptnumber IN ( SELECT receipt FROM items WHERE item = 'Cake' ) INTERSECT SELECT receipt FROM items WHERE item = 'Cookie';
SELECT receipts.receiptnumber FROM receipts JOIN customers ON receipts.customerid = customers.id JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE lastname = 'LOGAN' AND food = 'Croissant';
SELECT receipts.receiptnumber FROM receipts JOIN customers ON receipts.customerid = customers.id JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE customers.lastname = 'LOGAN' AND goods.food = 'Croissant';
SELECT MAX(receiptnumber), date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items JOIN goods ON items.item = goods.id ORDER BY price DESC LIMIT 1);
SELECT receiptnumber, date FROM receipts WHERE receiptnumber = (SELECT receipt FROM items WHERE item = (SELECT id FROM goods ORDER BY price DESC LIMIT 1));
SELECT item FROM items GROUP BY item ORDER BY COUNT(*) ASC LIMIT 1;
SELECT item FROM items GROUP BY item ORDER BY COUNT(*) ASC LIMIT 1;
SELECT food, count(id) as num_goods FROM goods GROUP BY food;
SELECT food, COUNT(id) FROM goods GROUP BY food;
SELECT food, AVG(price) FROM goods GROUP BY food;
SELECT food, AVG(price) FROM goods GROUP BY food;
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;
SELECT flavor FROM goods WHERE price > 10 AND food = 'Cake';
SELECT flavor FROM goods WHERE price > 10 AND food = 'Cake';
SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods);
SELECT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods);
SELECT DISTINCT id FROM goods WHERE price < (SELECT MIN(price) FROM goods WHERE flavor = 'Tart');
SELECT DISTINCT id FROM goods WHERE price < (SELECT MIN(price) FROM goods WHERE flavor = 'Tart');
SELECT DISTINCT receipt FROM items JOIN goods ON items.item = goods.id WHERE goods.price > 13;
SELECT DISTINCT receipts.receiptnumber FROM items JOIN receipts ON items.receipt = receipts.receiptnumber JOIN goods ON items.item = goods.id WHERE price > 13;
SELECT date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE price > 15;
SELECT date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.price > 15;
SELECT id FROM goods WHERE id LIKE '%APP%';
SELECT id FROM goods WHERE id LIKE '%APP%';
SELECT id, price FROM goods WHERE id LIKE '%70%'
SELECT id, price FROM goods WHERE id = 70;
SELECT lastname FROM customers ORDER BY lastname ASC;
SELECT lastname FROM customers ORDER BY lastname ASC;
SELECT id FROM goods;
SELECT DISTINCT id FROM goods ORDER BY id;
SELECT receipts.receiptnumber FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id JOIN customers ON receipts.customerid = customers.id WHERE goods.flavor = 'Apple' AND goods.food = 'Pie' OR customers.id = 12;
SELECT receipts.receiptnumber FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id JOIN customers ON receipts.customerid = customers.id WHERE goods.flavor = 'Apple' AND goods.food = 'Pie' OR customers.id = 12;
SELECT MAX(date) AS latest_date, receiptnumber FROM receipts;
SELECT receiptnumber, MAX(date) FROM receipts;
SELECT receipts.date, receipts.customerid, receipts.receiptnumber FROM receipts WHERE date = (SELECT MIN(date) FROM receipts) OR receiptnumber IN (SELECT receipt FROM items JOIN goods ON items.item = goods.id WHERE goods.price > 10);
SELECT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT receiptnumber FROM goods WHERE price > 10) OR date = (SELECT MIN(date) FROM receipts);
SELECT id FROM goods WHERE price BETWEEN 3 AND 7 AND food IN ('Cake', 'Cookie');
SELECT id FROM goods WHERE (flavor = 'Cake' OR flavor = 'Cookie') AND price BETWEEN 3 AND 7;
SELECT firstname, lastname FROM customers WHERE id = (SELECT customerid FROM receipts ORDER BY date LIMIT 1);
SELECT firstname, lastname FROM customers WHERE id = (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts));
SELECT AVG(price) FROM goods WHERE flavor IN ('Blackberry', 'Blueberry');
SELECT AVG(price) FROM goods WHERE flavor = 'Blackberry' OR flavor = 'Blueberry';
SELECT MIN(price) FROM goods WHERE flavor = 'Cheese';
SELECT MIN(price) FROM goods WHERE flavor = "Cheese";
SELECT MAX(price) AS highest_price, MIN(price) AS lowest_price, AVG(price) AS average_price, flavor FROM goods GROUP BY flavor ORDER BY flavor;
SELECT flavor, MAX(price) AS max_price, MIN(price) AS min_price, AVG(price) AS avg_price FROM goods GROUP BY flavor ORDER BY flavor;
SELECT MIN(price), MAX(price), food FROM goods GROUP BY food ORDER BY food;
SELECT food, MIN(price), MAX(price) FROM goods GROUP BY food ORDER BY food;
SELECT date, count(receiptnumber) as num_receipts FROM receipts GROUP BY date ORDER BY num_receipts DESC LIMIT 3;
SELECT date FROM receipts GROUP BY date ORDER BY COUNT(receiptnumber) DESC LIMIT 3;
SELECT customers.firstname, customers.lastname, COUNT(receipts.receiptnumber) as frequency FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id ORDER BY frequency DESC LIMIT 1;
SELECT customerid, COUNT(receiptnumber) as num_purchases FROM receipts GROUP BY customerid ORDER BY num_purchases DESC LIMIT 1;
SELECT date, COUNT(DISTINCT customerid) FROM receipts GROUP BY date;
SELECT customers.firstname, customers.lastname, receipts.date, COUNT(DISTINCT customers.id) as total_customers FROM customers INNER JOIN receipts ON customers.id = receipts.customerid GROUP BY receipts.date;
SELECT firstname, lastname FROM customers WHERE id IN ( SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE flavor = 'Apple' AND food = 'Tart' );
SELECT customers.firstname, customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Apple' AND goods.food = 'Tart';
SELECT id FROM goods WHERE flavor = 'Cookie' AND price < (SELECT MIN(price) FROM goods WHERE flavor = 'Croissant');
SELECT g.id FROM goods g WHERE g.flavor = 'Cookie' AND g.price < (SELECT MIN(price) FROM goods WHERE flavor = 'Croissant');
SELECT id FROM goods WHERE flavor = 'Cake' AND price >= (SELECT AVG(price) FROM goods WHERE flavor = 'Tart');
SELECT id FROM goods WHERE flavor = 'Cake' AND price >= (SELECT AVG(price) FROM goods WHERE flavor = 'Tart');
SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods);
SELECT id FROM goods WHERE price > (SELECT 2 * AVG(price) FROM goods);
SELECT id, flavor, food FROM goods ORDER BY price;
SELECT id, flavor, food FROM goods ORDER BY price;
SELECT id, flavor FROM goods WHERE food = "Cake" ORDER BY flavor;
SELECT id, flavor FROM goods WHERE food = 'Cake' ORDER BY flavor;
SELECT item FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Chocolate' GROUP BY item HAVING COUNT(*) <= 10;
SELECT item FROM items JOIN goods ON items.item = goods.id WHERE flavor = 'Chocolate' GROUP BY item HAVING COUNT(receipt) <= 10;
SELECT flavor FROM goods WHERE food = 'Cake' EXCEPT SELECT flavor FROM goods WHERE food = 'Tart';
SELECT DISTINCT flavor FROM goods WHERE food = 'Cake' AND flavor NOT IN (SELECT flavor FROM goods WHERE food = 'Tart');
SELECT flavor FROM goods GROUP BY flavor ORDER BY COUNT(*) DESC LIMIT 3;
SELECT item, COUNT(*) AS total_purchases FROM items GROUP BY item ORDER BY total_purchases DESC LIMIT 3;
SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING SUM(goods.price) > 150;
SELECT customerid FROM receipts GROUP BY customerid HAVING SUM(goods.price) > 150;
SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING AVG(goods.price) > 5;
SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customerid HAVING AVG(goods.price) > 5;
SELECT date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY date HAVING SUM(goods.price) > 100;
SELECT date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY date HAVING SUM(price) > 100;
SELECT COUNT(driver_id) FROM driver;
SELECT COUNT(*) FROM driver;
SELECT make, COUNT(driver_id) FROM driver WHERE points > 150 GROUP BY make;
SELECT make, COUNT(driver_id) FROM driver WHERE points > 150 GROUP BY make;
SELECT AVG(age), make FROM driver GROUP BY make;
SELECT make, AVG(age) FROM driver GROUP BY make;
SELECT AVG(laps) FROM driver WHERE age < 20;
SELECT ROUND(AVG(laps), 2) FROM driver WHERE age < 20
SELECT manager, sponsor FROM team ORDER BY car_owner;
SELECT manager, sponsor FROM team ORDER BY car_owner;
SELECT make FROM team GROUP BY make HAVING COUNT(DISTINCT team_id) > 1;
SELECT make FROM team GROUP BY make HAVING COUNT(DISTINCT team_id) > 1;
SELECT team.make FROM team WHERE car_owner = 'Buddy Arrington';
SELECT make FROM team WHERE car_owner = "Buddy Arrington";
SELECT MAX(points), MIN(points) FROM driver;
SELECT MAX(points), MIN(points) FROM driver;
SELECT COUNT(*) FROM driver WHERE points < 150;
SELECT COUNT(*) FROM driver WHERE points < 150;
SELECT driver FROM driver ORDER BY age ASC;
SELECT driver FROM driver ORDER BY age ASC;
SELECT driver FROM driver ORDER BY points DESC;
SELECT driver FROM driver ORDER BY points DESC;
SELECT driver, country FROM driver
SELECT driver, country FROM driver
SELECT max(points) from driver where country in (select country from country where capital = 'Dublin');
SELECT MAX(points) AS maximum_points FROM driver WHERE country IN (SELECT country FROM country WHERE capital = 'Dublin');
SELECT AVG(age) FROM driver WHERE country IN (SELECT country FROM country WHERE official_native_language = 'English');
SELECT AVG(age) FROM driver WHERE country IN (SELECT country FROM country WHERE official_native_language = 'English');
SELECT driver.country FROM country JOIN driver ON country.country = driver.country WHERE points > 150;
SELECT country FROM driver WHERE points > 150;
SELECT capital FROM country WHERE country_id = (SELECT country FROM driver ORDER BY points DESC LIMIT 1 );
SELECT country.capital FROM country JOIN driver ON country.country_id = driver.country ORDER BY driver.points DESC LIMIT 1;
SELECT make, COUNT(driver_id) AS num_drivers FROM driver GROUP BY make;
SELECT make, COUNT(driver) FROM driver GROUP BY make;
SELECT make FROM driver GROUP BY make ORDER BY COUNT(driver_id) DESC LIMIT 1;
SELECT make FROM driver GROUP BY make ORDER BY COUNT(driver_id) DESC LIMIT 1;
SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3;
SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3;
SELECT team FROM team WHERE team_id NOT IN (SELECT DISTINCT team_id FROM team_driver);
SELECT team.team FROM team LEFT JOIN team_driver ON team.team_id = team_driver.team_id WHERE driver_id IS NULL;
SELECT country FROM driver WHERE make = 'Dodge' INTERSECT SELECT country FROM driver WHERE make = 'Chevrolet';
SELECT country FROM driver WHERE make = 'Dodge' INTERSECT SELECT country FROM driver WHERE make = 'Chevrolet';
SELECT SUM(points) as total_points, AVG(points) as average_points FROM driver;
SELECT SUM(points) AS total_points, AVG(points) AS average_points FROM driver;
SELECT country FROM country WHERE country NOT IN (SELECT country FROM driver);
SELECT country FROM country WHERE country_id NOT IN (SELECT DISTINCT country FROM driver)
SELECT manager, sponsor FROM team WHERE team_id = (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1);
SELECT manager, sponsor FROM team WHERE team_id = ( SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1 );
SELECT manager, car_owner FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2);
SELECT manager, car_owner FROM team WHERE team_id IN ( SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2 );
SELECT Count(institution_id) FROM institution;
SELECT COUNT(*) FROM institution;
SELECT name FROM institution ORDER BY name ASC;
SELECT name FROM institution ORDER BY name ASC;
SELECT name FROM institution ORDER BY founded ASC;
SELECT name FROM institution ORDER BY founded;
SELECT city, province FROM institution;
SELECT city, province FROM institution;
SELECT MAX(enrollment) as max_enrollment, MIN(enrollment) as min_enrollment FROM institution;
SELECT MAX(enrollment) AS max_enrollment, MIN(enrollment) AS min_enrollment FROM institution;
SELECT affiliation FROM institution WHERE city <> 'Vancouver';
SELECT affiliation FROM institution WHERE city != 'Vancouver';
SELECT stadium FROM institution ORDER BY capacity DESC;
SELECT stadium FROM institution ORDER BY capacity DESC;
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1;
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1;
SELECT name, nickname FROM institution JOIN championship ON institution.institution_id = championship.institution_id;
SELECT name, nickname FROM institution JOIN championship ON institution.institution_id = championship.institution_id;
SELECT nickname FROM championship WHERE institution_id = ( SELECT institution_id FROM institution ORDER BY enrollment LIMIT 1 );
SELECT nickname FROM championship WHERE institution_id = ( SELECT institution_id FROM institution ORDER BY enrollment LIMIT 1 );
SELECT name FROM institution ORDER BY (SELECT COUNT(*) FROM championship WHERE championship.institution_id = institution.institution_id) DESC;
SELECT name FROM institution JOIN championship ON institution.institution_id = championship.institution_id ORDER BY number_of_championships DESC;
SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship);
SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship WHERE number_of_championships >= 1);
SELECT COUNT(*) AS total_championships FROM championship JOIN institution ON championship.institution_id = institution.institution_id WHERE institution.affiliation = 'Public';
SELECT SUM(number_of_championships) FROM championship JOIN institution ON championship.institution_id = institution.institution_id WHERE institution.affiliation = 'Public';
SELECT affiliation, COUNT(*) AS num_institutions FROM institution GROUP BY affiliation;
SELECT institution.affiliation, COUNT(institution.institution_id) as num_institutions FROM institution GROUP BY institution.affiliation;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT founded FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1;
SELECT founded, COUNT(institution_id) FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1;
SELECT nickname FROM championship JOIN institution ON championship.institution_id = institution.institution_id ORDER BY capacity DESC;
SELECT nickname FROM championship JOIN institution ON championship.institution_id = institution.institution_id ORDER BY institution.capacity DESC;
SELECT sum(enrollment) FROM institution WHERE city = 'Vancouver' OR city = 'Calgary';
SELECT enrollment FROM institution WHERE city = 'Vancouver' OR city = 'Calgary';
SELECT province FROM institution WHERE founded < 1920 INTERSECT SELECT province FROM institution WHERE founded > 1950;
SELECT province FROM institution WHERE founded < 1920 INTERSECT SELECT province FROM institution WHERE founded > 1950;
SELECT COUNT(DISTINCT province) FROM institution;
SELECT COUNT(DISTINCT province) FROM institution;
SELECT * FROM warehouses;
SELECT * FROM warehouses;
SELECT DISTINCT contents FROM boxes WHERE warehouse = (SELECT code FROM warehouses WHERE location = 'New York');
SELECT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York' GROUP BY contents;
SELECT contents FROM boxes WHERE value > 150;
SELECT contents FROM boxes WHERE value > 150;
SELECT warehouse, AVG(value) FROM boxes GROUP BY warehouse;
SELECT warehouse, AVG(value) AS average_value FROM boxes GROUP BY warehouse;
SELECT AVG(value), SUM(value) FROM boxes;
SELECT AVG(value), SUM(value) FROM boxes;
SELECT AVG(capacity) AS avg_capacity, SUM(capacity) AS total_capacity FROM warehouses;
SELECT AVG(capacity) as average_capacity, SUM(capacity) as total_capacity from warehouses;
SELECT contents, AVG(value) AS avg_value, MAX(value) AS max_value FROM boxes GROUP BY contents;
SELECT contents, AVG(value) AS average_value, MAX(value) AS max_value FROM boxes GROUP BY contents;
SELECT contents FROM boxes GROUP BY contents ORDER BY SUM(value) DESC LIMIT 1;
SELECT contents FROM boxes ORDER BY value DESC LIMIT 1;
SELECT AVG(value) FROM boxes;
SELECT AVG(value) FROM boxes;
SELECT DISTINCT contents FROM boxes;
SELECT DISTINCT contents FROM boxes;
SELECT COUNT(DISTINCT contents) AS num_contents FROM boxes;
SELECT COUNT(DISTINCT contents) FROM boxes;
SELECT DISTINCT location FROM warehouses;
SELECT DISTINCT location FROM warehouses;
SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York');
SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York');
SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'));
SELECT SUM(value) FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE location IN ('Chicago', 'New York');
SELECT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago' INTERSECT SELECT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York';
SELECT contents FROM boxes WHERE warehouse = 'Chicago' INTERSECT SELECT contents FROM boxes WHERE warehouse = 'New York';
SELECT DISTINCT contents FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York'); 
SELECT DISTINCT contents FROM boxes WHERE contents NOT IN (SELECT DISTINCT contents FROM boxes WHERE warehouse = (SELECT code FROM warehouses WHERE location = 'New York'));
SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Rocks' ) EXCEPT SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Scissors' );
SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Rocks' EXCEPT SELECT warehouse FROM boxes WHERE contents = 'Scissors' );
SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors'));
SELECT DISTINCT location FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse WHERE contents = 'Rocks' OR contents = 'Scissors';
SELECT DISTINCT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors'));
SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Rocks' ) INTERSECT SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Scissors' );
SELECT code, contents FROM boxes ORDER BY value;
SELECT code, contents FROM boxes ORDER BY value;
SELECT code, contents FROM boxes ORDER BY value LIMIT 1;
SELECT code, contents FROM boxes ORDER BY value ASC LIMIT 1;
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(value) FROM boxes);
SELECT contents FROM boxes WHERE value > (SELECT AVG(value) FROM boxes);
SELECT DISTINCT contents FROM boxes ORDER BY contents;
SELECT DISTINCT contents FROM boxes ORDER BY contents ASC;
SELECT code FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Rocks');
SELECT MAX(value) FROM boxes WHERE contents = 'Rocks' INTERSECT SELECT value FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Rocks');
SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors');
SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors');
SELECT sum(value) FROM boxes WHERE warehouse = (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1);
SELECT SUM(value) FROM boxes WHERE warehouse = (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1);
SELECT warehouse, AVG(value) as avg_value FROM boxes GROUP BY warehouse HAVING avg_value > 150;
SELECT warehouse, AVG(value) as average_value FROM boxes GROUP BY warehouse HAVING AVG(value) > 150;
SELECT contents, SUM(value) as total_value, COUNT(code) as total_boxes FROM boxes GROUP BY contents;
SELECT contents, SUM(value) as total_value, COUNT(*) as num_boxes FROM boxes GROUP BY contents;
SELECT location, SUM(capacity) as total_capacity, AVG(capacity) as average_capacity, MAX(capacity) as max_capacity FROM warehouses GROUP BY location;
SELECT location, SUM(capacity) AS total_capacity, AVG(capacity) AS average_capacity, MAX(capacity) AS max_capacity FROM warehouses GROUP BY location;
SELECT SUM(capacity) FROM warehouses;
SELECT SUM(capacity) FROM warehouses;
SELECT MAX(value) AS max_value, warehouse FROM(SELECT value, warehouse FROM boxes ORDER BY value DESC) GROUP BY warehouse;
SELECT warehouse, max(value) as max_value FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(code) FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(*) as box_count FROM boxes GROUP BY warehouse;
SELECT COUNT(DISTINCT warehouses.location) FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE contents = 'Rocks';
SELECT COUNT(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks';
SELECT boxes.code, warehouses.location FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code;
SELECT boxes.code, warehouses.location FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code;
SELECT warehouses.code FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago';
SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago');
SELECT warehouse, COUNT(*) as num_boxes FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(*) as num_boxes FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(DISTINCT contents) AS num_distinct_content_types FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(DISTINCT contents) FROM boxes GROUP BY warehouse;
SELECT code FROM warehouses WHERE capacity < 0;
SELECT code FROM warehouses WHERE code IN (SELECT warehouse FROM boxes GROUP BY warehouse HAVING COUNT(*) > (SELECT capacity FROM warehouses WHERE code = boxes.warehouse));
SELECT SUM(value) FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location <> 'Chicago');
SELECT SUM(boxes.value) FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location != 'Chicago';
SELECT university_name, city, state FROM university ORDER BY university_name;
SELECT university_name, city, state FROM university ORDER BY university_name;
SELECT COUNT(DISTINCT university_id) FROM university WHERE state IN ('Illinois', 'Ohio');
SELECT COUNT(DISTINCT university_id) FROM university WHERE state IN ('Illinois', 'Ohio');
SELECT MAX(enrollment) AS max_enrollment, AVG(enrollment) AS avg_enrollment, MIN(enrollment) AS min_enrollment FROM university;
SELECT MAX(enrollment) AS max_enrollment, AVG(enrollment) AS avg_enrollment, MIN(enrollment) AS min_enrollment FROM university;
SELECT team_name FROM university WHERE enrollment > (SELECT AVG(enrollment) FROM university);
SELECT team_name FROM university WHERE enrollment > (SELECT AVG(enrollment) FROM university);
SELECT DISTINCT home_conference FROM university;
SELECT DISTINCT home_conference FROM university;
SELECT home_conference, COUNT(university_id) as num_universities FROM university GROUP BY home_conference;
SELECT home_conference, count(university_id) as num_universities FROM university GROUP BY home_conference;
SELECT state FROM university GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT state FROM university GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT home_conference FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000;
SELECT home_conference FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000;
SELECT home_conference FROM university GROUP BY home_conference ORDER BY SUM(enrollment) ASC LIMIT 1;
SELECT home_conference FROM university GROUP BY home_conference ORDER BY SUM(enrollment) ASC LIMIT 1;
SELECT major_name, major_code FROM major ORDER BY major_code;
SELECT major_name, major_code FROM major ORDER BY major_code;
SELECT major.major_name, major_ranking.rank FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE university.university_name = "Augustana College";
SELECT mr.rank, m.major_name FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id JOIN university u ON mr.university_id = u.university_id WHERE u.university_name = 'Augustana College';
SELECT university.university_name, university.city, university.state FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND overall_ranking.rank = 1;
SELECT university.university_name, university.city, university.state FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND major_ranking.rank = 1;
SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id WHERE major_ranking.rank = 1 GROUP BY university.university_id ORDER BY COUNT(major_ranking.rank) DESC LIMIT 1;
SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id WHERE rank = 1 GROUP BY university.university_id ORDER BY COUNT(major_id) DESC LIMIT 1;
SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1);
SELECT university_name FROM university WHERE university_id NOT IN ( SELECT university_id FROM major_ranking WHERE rank = 1 );
SELECT university.university_name FROM university WHERE university.university_id IN (SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Accounting') INTERSECT SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Urban Education'));
SELECT university_name FROM university WHERE university_id IN ( SELECT university_id FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_name = 'Accounting' ) INTERSECT SELECT university_name FROM university WHERE university_id IN ( SELECT university_id FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_name = 'Urban Education' );
SELECT university.university_name, overall_ranking.rank FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE university.state = 'Wisconsin';
SELECT university_name, rank FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state = 'Wisconsin';
SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM overall_ranking ORDER BY research_point DESC LIMIT 1);
SELECT university_name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY research_point DESC LIMIT 1;
SELECT university_name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY reputation_point ASC;
SELECT university.university_name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY overall_ranking.reputation_point ASC;
SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE major_id = (SELECT major_id FROM major WHERE major_name = 'Accounting') AND rank >= 3);
SELECT university_name FROM university WHERE university_id IN ( SELECT university_id FROM major_ranking WHERE major_id IN ( SELECT major_id FROM major WHERE major_name = 'Accounting' ) AND rank >= 3 );
SELECT SUM(enrollment) FROM university WHERE university_id IN ( SELECT university_id FROM overall_ranking WHERE rank <= 5 );
SELECT sum(enrollment) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking WHERE rank <= 5);
SELECT university.university_name, overall_ranking.citation_point FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id WHERE overall_ranking.reputation_point >= 3 ORDER BY overall_ranking.reputation_point DESC;
SELECT university.university_name, overall_ranking.citation_point FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id ORDER BY reputation_point DESC LIMIT 3;
SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(university_id) > 2;
SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(university_id) > 2;
SELECT title FROM movies WHERE rating IS NULL;
SELECT title FROM movies WHERE code NOT IN (SELECT code FROM movies WHERE rating IS NOT NULL);
SELECT name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE rating = 'G';
SELECT title FROM movies WHERE rating = 'G';
SELECT title FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE name = 'Odeon';
SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon';
SELECT movies.title, movietheaters.name FROM movies JOIN movietheaters ON movies.code = movietheaters.movie;
SELECT movies.title, movietheaters.name FROM movies JOIN movietheaters ON movies.code = movietheaters.movie;
SELECT COUNT(*) FROM movies WHERE rating = 'G';
SELECT COUNT(*) FROM movies WHERE rating = 'G';
SELECT COUNT(DISTINCT title) FROM movies;
SELECT count(distinct movie) FROM movietheaters;
SELECT COUNT(DISTINCT title) FROM movies;
SELECT COUNT(DISTINCT title) FROM movies;
SELECT COUNT(DISTINCT name) FROM movietheaters;
SELECT COUNT(DISTINCT name) FROM movietheaters;
SELECT rating FROM movies WHERE title LIKE '%Citizen%';
SELECT rating FROM movies WHERE title LIKE '%Citizen%';
SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G' OR rating = 'PG');
SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G' OR rating = 'PG');
SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial');
SELECT DISTINCT title FROM movies JOIN movietheaters ON movies.code = movietheaters.code WHERE name = 'Imperial' OR name = 'Odeon';
SELECT title FROM movies WHERE code IN ( SELECT movie FROM movietheaters WHERE name = 'Odeon' INTERSECT SELECT movie FROM movietheaters WHERE name = 'Imperial' );
SELECT movie FROM movietheaters WHERE name = 'Odeon' INTERSECT SELECT movie FROM movietheaters WHERE name = 'Imperial';
SELECT DISTINCT movies.title FROM movies WHERE movies.code NOT IN (SELECT code FROM movietheaters WHERE name = 'Odeon');
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon');
SELECT title FROM movies ORDER BY title ASC;
SELECT title FROM movies ORDER BY title ASC;
SELECT title FROM movies ORDER BY rating;
SELECT title FROM movies ORDER BY rating;
SELECT name FROM movietheaters GROUP BY name ORDER BY COUNT(movie) DESC LIMIT 1;
SELECT name FROM movietheaters GROUP BY name ORDER BY COUNT(movie) DESC LIMIT 1;
SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(*) DESC LIMIT 1);
SELECT title FROM movies WHERE code = ( SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT rating, COUNT(title) FROM movies GROUP BY rating;
SELECT rating, COUNT(code) FROM movies GROUP BY rating;
SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL;
SELECT count(*) FROM movies WHERE rating IS NOT NULL;
SELECT name FROM movietheaters;
SELECT DISTINCT name FROM movietheaters;
SELECT name FROM movietheaters WHERE movie IS NULL;
SELECT DISTINCT name FROM movietheaters WHERE name NOT IN (SELECT name FROM movietheaters WHERE movie IS NOT NULL);
SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G');
SELECT name FROM movietheaters WHERE code IN (SELECT code FROM movies WHERE rating = 'G');
SELECT title FROM movies
SELECT title FROM movies;
SELECT DISTINCT rating FROM movies;
SELECT DISTINCT rating FROM movies;
SELECT title FROM movies WHERE rating IS NULL;
SELECT * FROM movies WHERE rating IS NULL;
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters);
SELECT title FROM movies WHERE code NOT IN (SELECT DISTINCT movie FROM movietheaters);
SELECT recipient FROM package ORDER BY weight DESC LIMIT 1;
SELECT c.name FROM client c JOIN package p ON p.recipient = c.accountnumber WHERE p.weight = (SELECT MAX(weight) FROM package);
SELECT sum(weight) FROM package WHERE sender = ( SELECT accountnumber FROM client WHERE name = 'Leo Wong' );
SELECT SUM(weight) FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong';
SELECT position FROM employee WHERE name = 'Amy Wong';
SELECT position FROM employee WHERE name = 'Amy Wong';
SELECT salary, position FROM employee WHERE name = 'Turanga Leela';
SELECT salary, position FROM employee WHERE name = 'Turanga Leela';
SELECT AVG(salary) FROM employee WHERE position = 'Intern';
SELECT ROUND(AVG(salary), 2) as average_salary FROM employee WHERE position = 'Intern';
SELECT level FROM has_clearance JOIN employee ON has_clearance.employee = employee.employeeid WHERE employee.position = 'Physician';
SELECT level FROM employee JOIN has_clearance ON employee.employeeid = has_clearance.employee WHERE employee.position = 'Physician';
SELECT packagenumber FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong';
SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong');
SELECT packagenumber FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong');
SELECT packagenumber FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = "Leo Wong");
SELECT * FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = "Leo Wong") OR sender = (SELECT accountnumber FROM client WHERE name = "Leo Wong");
SELECT DISTINCT packagenumber FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong') OR sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong');
SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = "Ogden Wernstrom") AND recipient = (SELECT accountnumber FROM client WHERE name = "Leo Wong");
SELECT COUNT(*) FROM package p JOIN client c1 ON p.sender = c1.accountnumber JOIN client c2 ON p.recipient = c2.accountnumber WHERE c1.name = 'Ogden Wernstrom' AND c2.name = 'Leo Wong';
SELECT contents FROM client JOIN package ON client.accountnumber = package.sender WHERE client.name = "John Zoidfarb";
SELECT contents FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'John Zoidfarb';
SELECT MAX(weight) as heaviest_package_weight, packagenumber FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name LIKE '%John%'
SELECT packagenumber, weight FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name LIKE 'John%') ORDER BY weight DESC LIMIT 1;
SELECT package.packagenumber, package.weight FROM package ORDER BY package.weight LIMIT 3;
SELECT packagenumber, weight FROM package ORDER BY weight ASC LIMIT 3;
SELECT client.name, COUNT(package.packagenumber) as packages_sent FROM client JOIN package ON client.accountnumber = package.sender GROUP BY client.name ORDER BY packages_sent DESC LIMIT 1;
SELECT name, count(packagenumber) FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name ORDER BY count(packagenumber) DESC LIMIT 1;
SELECT name, COUNT(packagenumber) as number_of_packages FROM client JOIN package ON client.accountnumber = package.recipient GROUP BY name ORDER BY COUNT(packagenumber) LIMIT 1;
SELECT recipient FROM package GROUP BY recipient ORDER BY COUNT(*) ASC LIMIT 1;
SELECT name FROM client JOIN package ON client.accountnumber = package.sender GROUP BY name HAVING COUNT(package.packagenumber) > 1;
SELECT name FROM client WHERE accountnumber IN ( SELECT sender FROM package GROUP BY sender HAVING COUNT(packagenumber) > 1 );
SELECT Coordinates FROM planet WHERE name = 'Mars';
SELECT coordinates FROM planet WHERE name = 'Mars';
SELECT name, coordinates FROM planet ORDER BY name;
SELECT name, coordinates FROM planet ORDER BY name;
SELECT shipmentid FROM shipment WHERE manager = (SELECT employeeid FROM employee WHERE name = "Phillip J. Fry");
SELECT shipmentid FROM shipment JOIN employee ON shipment.manager = employee.employeeid WHERE employee.name = 'Phillip J Fry';
SELECT date FROM shipment;
SELECT date FROM shipment;
SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = "Mars" AND employee.name = "Turanga Leela";
SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') AND manager = (SELECT employeeid FROM employee WHERE name = 'Turanga Leela');
SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' OR employee.name = 'Turanga Leela';
SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela';
SELECT planet.name, COUNT(shipment.shipmentid) FROM planet JOIN shipment ON planet.planetid = shipment.planet GROUP BY planet.name;
SELECT planet.name, COUNT(shipment.planet) as shipment_count FROM planet JOIN shipment ON planet.planetid = shipment.planet GROUP BY planet.name;
SELECT planet.name FROM planet JOIN shipment ON planet.planetid = shipment.planet GROUP BY planet.name ORDER BY COUNT(shipment.shipmentid) DESC LIMIT 1;
SELECT name FROM planet WHERE planetid = ( SELECT planet FROM shipment GROUP BY planet ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT manager.name, COUNT(shipmentid) FROM shipment JOIN employee AS manager ON shipment.manager = manager.employeeid GROUP BY manager.name;
SELECT COUNT(shipmentid), name FROM shipment JOIN employee ON shipment.manager = employee.employeeid GROUP BY manager;
SELECT SUM(weight) FROM package JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT TOTAL(weight) FROM package JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT planet.name, SUM(package.weight) as total_weight FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON shipment.shipmentid = package.shipment GROUP BY planet.name;
SELECT planet.name, SUM(package.weight) as total_weight FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON package.shipment = shipment.shipmentid GROUP BY planet.name;
SELECT planet.name FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON shipment.shipmentid = package.shipment GROUP BY planet.name HAVING SUM(package.weight) > 30;
SELECT Planet.name FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON shipment.shipmentid = package.shipment GROUP BY planet.name HAVING SUM(package.weight) > 30;
SELECT packagenumber FROM package JOIN client ON package.sender = client.accountnumber JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Omicron Persei 8' AND client.name = 'Zapp Brannigan';
SELECT COUNT(*) FROM package JOIN client ON package.sender = client.accountnumber JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE client.name = 'Zapp Brannigan' AND planet.name = 'Omicron Persei 8';
SELECT packagenumber FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')) OR sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan');
SELECT COUNT(*) FROM package WHERE shipment IN ( SELECT shipmentid FROM shipment WHERE planet = ( SELECT planetid FROM planet WHERE name = 'Omicron Persei 8' ) OR sender = ( SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan' ) );
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30;
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30;
SELECT name FROM employee WHERE employeeid NOT IN ( SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') );
SELECT name FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'));
SELECT employee.name FROM employee INNER JOIN has_clearance ON employee.employeeid = has_clearance.employee INNER JOIN planet ON has_clearance.planet = planet.planetid WHERE planet.name = "Omega III";
SELECT name FROM employee WHERE employeeid IN ( SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omega III') );
SELECT planet.name FROM planet JOIN has_clearance ON planet.planetid = has_clearance.planet GROUP BY planet.name HAVING COUNT(has_clearance.employee) = 1;
SELECT planet.name FROM planet WHERE planet.planetid IN ( SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(DISTINCT employee) = 1 );
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000;
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000;
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee) OR salary > 5000;
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee) OR salary > 5000;
SELECT count(*) FROM employee WHERE employeeid NOT IN ( SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') );
SELECT COUNT(*) FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'));
SELECT COUNT(*) FROM game;
SELECT COUNT(*) FROM game;
SELECT title, developers FROM game ORDER BY units_sold_millions DESC;
SELECT title, developers FROM game ORDER BY units_sold_millions DESC;
SELECT avg(units_sold_millions) FROM game WHERE developers != 'Nintendo';
SELECT AVG(units_sold_millions) FROM game WHERE developers <> 'Nintendo';
SELECT platform_name, market_district FROM platform;
SELECT platform_name, market_district FROM platform;
SELECT platform_name, platform_id FROM platform WHERE download_rank = 1;
SELECT platform_id, platform_name FROM platform WHERE download_rank = 1;
SELECT MAX(rank_of_the_year), MIN(rank_of_the_year) FROM player;
SELECT MAX(rank_of_the_year) AS max_rank, MIN(rank_of_the_year) AS min_rank FROM player;
SELECT COUNT(*) FROM player WHERE rank_of_the_year < 3;
SELECT COUNT(*) FROM player WHERE rank_of_the_year <= 3;
SELECT player_name FROM player ORDER BY player_name ASC;
SELECT player_name FROM player ORDER BY player_name ASC;
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC;
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC;
SELECT player_name, rank_of_the_year FROM player JOIN game_player ON player.player_id = game_player.player_id JOIN game ON game_player.game_id = game.game_id WHERE game.title = "Super Mario World";
SELECT player.player_name, player.rank_of_the_year FROM player JOIN game_player ON player.player_id = game_player.player_id JOIN game ON game_player.game_id = game.game_id WHERE game.title = "Super Mario World";
SELECT DISTINCT game.developers FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn';
SELECT developers FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON player.player_id = game_player.player_id WHERE college = 'Auburn';
SELECT avg(units_sold_millions) FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = "Guard";
SELECT AVG(units_sold_millions) FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard';
SELECT title, platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id;
SELECT game.title, platform.platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id;
SELECT title FROM game WHERE platform_id IN (SELECT platform_id FROM platform WHERE market_district IN ('Asia', 'USA'));
SELECT title FROM game JOIN platform ON game.platform_id = platform.platform_id WHERE market_district = 'Asia' OR market_district = 'USA';
SELECT franchise, COUNT(title) as num_games FROM game GROUP BY franchise;
SELECT franchise, count(game_id) FROM game GROUP BY franchise;
SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(*) DESC LIMIT 1;
SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(*) DESC LIMIT 1;
SELECT franchise FROM game GROUP BY franchise HAVING COUNT(game_id) >= 2;
SELECT franchise FROM game GROUP BY franchise HAVING COUNT(game_id) >= 2;
SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM game_player);
SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM game_player);
SELECT game.title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Oklahoma' INTERSECT SELECT game.title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn';
SELECT title FROM game WHERE game_id IN (SELECT game_id FROM game_player INNER JOIN player ON player.player_id = game_player.player_id WHERE college = 'Oklahoma' UNION SELECT game_id FROM game_player INNER JOIN player ON player.player_id = game_player.player_id WHERE college = 'Auburn');
SELECT DISTINCT franchise FROM game;
SELECT DISTINCT franchise FROM game;
SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player INNER JOIN player ON game_player.player_id = player.player_id WHERE position = 'Guard');
SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = "Guard" ) );
SELECT name FROM press ORDER BY year_profits_billion DESC;
SELECT name FROM press ORDER BY year_profits_billion DESC;
SELECT name FROM press WHERE year_profits_billion > 15 OR month_profits_billion > 1;
SELECT name FROM press WHERE year_profits_billion > 15 OR month_profits_billion > 1;
SELECT AVG(year_profits_billion) AS average_yearly_profit, MAX(year_profits_billion) AS maximum_yearly_profit FROM press;
SELECT press.name, AVG(press.year_profits_billion) AS avg_yearly_profit, MAX(press.year_profits_billion) AS max_yearly_profit FROM press GROUP BY press.name;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1;
SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR month_profits_billion = (SELECT MIN(month_profits_billion) FROM press);
SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR month_profits_billion = (SELECT MIN(month_profits_billion) FROM press);
SELECT COUNT(DISTINCT author_id) FROM author WHERE age < 30;
SELECT COUNT(*) FROM author WHERE age < 30;
SELECT AVG(age), gender FROM author GROUP BY gender;
SELECT gender, AVG(age) as avg_age FROM author GROUP BY gender;
SELECT gender, COUNT(*) FROM author WHERE age > 30 GROUP BY gender;
SELECT gender, COUNT(author_id) FROM author WHERE age > 30 GROUP BY gender;
SELECT title FROM book ORDER BY release_date DESC;
SELECT title FROM book ORDER BY release_date DESC;
SELECT book_series, COUNT(book_id) AS num_books FROM book GROUP BY book_series;
SELECT book_series, COUNT(book_id) as book_count FROM book GROUP BY book_series;
SELECT title, release_date FROM book ORDER BY sale_amount DESC LIMIT 5;
SELECT title, release_date FROM book ORDER BY sale_amount DESC LIMIT 5;
SELECT book_series FROM book GROUP BY book_series HAVING MAX(sale_amount) > 1000 AND MIN(sale_amount) < 500;
SELECT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT book_series FROM book WHERE sale_amount < 500;
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = 'MM') INTERSECT SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = 'LT');
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = "MM") INTERSECT SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = "LT");
SELECT name, age FROM author WHERE author_id NOT IN (SELECT author_id FROM book);
SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book);
SELECT name FROM author WHERE author_id IN ( SELECT author_id FROM book GROUP BY author_id HAVING COUNT(book_id) > 1 );
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(book_id) > 1);
SELECT title, author.name, press.name FROM book JOIN author ON book.author_id = author.author_id JOIN press ON book.press_id = press.press_id ORDER BY sale_amount DESC LIMIT 3;
SELECT title, author.name, press.name FROM book JOIN author ON book.author_id = author.author_id JOIN press ON book.press_id = press.press_id ORDER BY sale_amount DESC LIMIT 3;
SELECT name, SUM(sale_amount) as total_sale_amount FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.press_id;
SELECT press.name, SUM(book.sale_amount) AS total_sales FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.name;
SELECT press.name, COUNT(*) FROM book JOIN press ON book.press_id = press.press_id WHERE sale_amount > 1000 GROUP BY press.name;
SELECT press.name, COUNT(book.book_id) FROM press JOIN book ON press.press_id = book.press_id WHERE book.sale_amount > 1000 GROUP BY press.name;
SELECT author.name FROM author INNER JOIN book ON author.author_id = book.author_id ORDER BY book.sale_amount DESC LIMIT 1;
SELECT author.name FROM author JOIN book ON author.author_id = book.author_id ORDER BY book.sale_amount DESC LIMIT 1;
SELECT name, gender FROM author WHERE author_id = ( SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(book_id) DESC LIMIT 1 );
SELECT name, gender FROM author WHERE author_id = ( SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM author WHERE author_id NOT IN ( SELECT author_id FROM book JOIN press ON book.press_id = press.press_id WHERE press.name = 'Accor' );
SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book WHERE press_id = (SELECT press_id FROM press WHERE name = "Accor"));
SELECT name, year_profits_billion FROM press WHERE press_id IN ( SELECT press_id FROM book GROUP BY press_id HAVING COUNT(*) > 2 );
SELECT name, year_profits_billion FROM press WHERE press_id IN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(*) > 2);
SELECT COUNT(DISTINCT author_name) FROM authors;
SELECT author_name FROM authors;
SELECT author_name, other_details FROM authors;
SELECT other_details FROM authors WHERE author_name = 'Addison Denesik';
SELECT COUNT(*) FROM documents;
SELECT author_name FROM documents WHERE document_id = 4;
SELECT author_name FROM documents WHERE document_name = "Travel to Brazil";
SELECT COUNT(*) FROM documents WHERE author_name = 'Era Kerluke';
SELECT document_name, document_description FROM documents;
SELECT document_id, document_name FROM documents WHERE author_name = "Bianka Cummings";
SELECT authors.author_name, authors.other_details FROM documents JOIN authors ON documents.author_name = authors.author_name WHERE document_name = "Travel to China";
SELECT author_name, COUNT(document_id) FROM authors JOIN documents ON authors.author_name = documents.author_name GROUP BY author_name;
SELECT author_name FROM authors GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT author_name FROM authors WHERE author_name IN (SELECT author_name FROM documents GROUP BY author_name HAVING COUNT(document_id) >= 2);
SELECT COUNT(process_id) FROM business_processes;
SELECT next_process_id, process_name, process_description FROM business_processes WHERE process_id = 9;
SELECT process_name FROM business_processes WHERE process_id = (SELECT next_process_id FROM business_processes WHERE process_id = 9);
SELECT COUNT(*) FROM process_outcomes;
SELECT process_outcome_code, process_outcome_description FROM process_outcomes;
SELECT process_outcome_description FROM process_outcomes WHERE process_outcome_code = 'working';
SELECT COUNT(process_status_code) FROM process_status;
SELECT process_status_code, process_status_description FROM process_status;
SELECT process_status_description FROM process_status WHERE process_status_code = 'ct';
SELECT COUNT(DISTINCT staff_id) FROM staff;
SELECT staff_id, staff_details FROM staff;
SELECT staff_details FROM staff WHERE staff_id = 100;
SELECT COUNT(*) FROM ref_staff_roles;
SELECT staff_role_code, staff_role_description FROM ref_staff_roles;
SELECT staff_role_description FROM ref_staff_roles WHERE staff_role_code = "HR";
SELECT count(DISTINCT document_id) FROM documents_processes;
SELECT process_id FROM documents_processes;
SELECT document_id FROM documents WHERE document_id NOT IN (SELECT document_id FROM documents_processes);
SELECT process_id FROM business_processes WHERE process_id NOT IN (SELECT process_id FROM documents_processes);
SELECT process_outcomes.process_outcome_description, process_status.process_status_description FROM documents_processes JOIN process_outcomes ON documents_processes.process_outcome_code = process_outcomes.process_outcome_code JOIN process_status ON documents_processes.process_status_code = process_status.process_status_code JOIN documents ON documents_processes.document_id = documents.document_id WHERE documents.document_id = 0;
SELECT business_processes.process_name FROM business_processes JOIN documents_processes ON business_processes.process_id = documents_processes.process_id JOIN documents ON documents_processes.document_id = documents.document_id WHERE documents.document_name = "Travel to Brazil";
SELECT process_id, COUNT(document_id) AS num_documents FROM documents_processes GROUP BY process_id;
SELECT COUNT(*) FROM staff_in_processes WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, COUNT(process_id) AS num_document_processes FROM staff_in_processes GROUP BY staff_id;
SELECT staff_role_code, COUNT(*) AS num_document_processes FROM staff_in_processes GROUP BY staff_role_code;
SELECT COUNT(DISTINCT staff_in_processes.staff_role_code) FROM staff_in_processes WHERE staff_in_processes.staff_id = 3;
SELECT COUNT(DISTINCT agency_id) FROM agencies;
SELECT count(agency_id) FROM agencies;
SELECT agency_id, agency_details FROM agencies;
SELECT agency_id, agency_details FROM agencies;
SELECT COUNT(client_id) as Num_Clients FROM clients;
SELECT COUNT(*) as total_clients FROM clients;
SELECT client_id, client_details FROM clients;
SELECT client_id, client_details FROM clients;
SELECT agency_id, count(client_id) AS number_of_clients FROM clients GROUP BY agency_id;
SELECT agency_id, COUNT(client_id) FROM clients GROUP BY agency_id; 
SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1);
SELECT agency_id, agency_details FROM agencies WHERE agency_id = ( SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 );
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2);
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2);
SELECT agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id WHERE client_details = 'Mac';
SELECT agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id WHERE client_details = "Mac";
SELECT clients.client_details, agencies.agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT client_details, agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT sic_code, count(client_id) FROM clients GROUP BY sic_code;
SELECT sic_code, COUNT(client_id) FROM clients GROUP BY sic_code;
SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad';
SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad';
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients);
SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id;
SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM clients);
SELECT agency_id FROM agencies WHERE NOT EXISTS (SELECT 1 FROM clients WHERE clients.agency_id = agencies.agency_id);
SELECT COUNT(*) FROM invoices;
SELECT COUNT(*) FROM invoices;
SELECT invoice_id, invoice_status, invoice_details from invoices;
SELECT invoice_id, invoice_status, invoice_details FROM invoices;
SELECT clients.client_id, COUNT(invoice_id) FROM clients LEFT JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id;
SELECT client_id, COUNT(invoice_id) AS total_invoices FROM invoices GROUP BY client_id;
SELECT client_id, client_details FROM clients WHERE client_id = (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT client_id, client_details FROM clients WHERE client_id IN (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2;
SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2;
SELECT invoice_status, COUNT(invoice_id) FROM invoices GROUP BY invoice_status;
SELECT invoice_status, COUNT(*) FROM invoices GROUP BY invoice_status;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT invoice_status, clients.client_id, clients.client_details, clients.agency_id, agencies.agency_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT invoice_status, invoice_details, invoices.client_id, client_details, clients.agency_id, agency_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT meeting_type, purpose_of_meeting FROM meetings;
SELECT meeting_type, other_details FROM meetings;
SELECT meeting_outcome, purpose_of_meeting FROM meetings;
SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM meetings;
SELECT payment_id, payment_details FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id WHERE invoices.invoice_status = 'Working';
SELECT payment_id, payment_details FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id WHERE invoices.invoice_status = 'Working';
SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments);
SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments);
SELECT COUNT(*) FROM payments;
SELECT COUNT(payment_id) FROM payments;
SELECT payment_id, invoice_id, payment_details FROM payments;
SELECT payment_id, invoice_id, payment_details FROM payments;
SELECT DISTINCT p.invoice_id, i.invoice_status FROM payments p JOIN invoices i ON p.invoice_id = i.invoice_id;
SELECT DISTINCT invoices.invoice_id, invoices.invoice_status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id;
SELECT invoices.invoice_id, COUNT(payment_id) FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id;
SELECT invoice_id, COUNT(payment_id) FROM payments GROUP BY invoice_id;
SELECT invoice_id, invoice_status, invoice_details FROM invoices WHERE invoice_id = (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT invoice_id, invoice_status, invoice_details FROM invoices WHERE invoice_id IN (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Count(staff_id) FROM staff
SELECT COUNT(*) FROM staff;
SELECT agency_id, COUNT(staff_id) FROM staff GROUP BY agency_id;
SELECT agency_id, COUNT(staff_id) AS staff_count FROM staff GROUP BY agency_id;
SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT agency_id, agency_details FROM agencies WHERE agency_id = ( SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1 );
SELECT meeting_outcome, COUNT(*) AS num_meetings FROM meetings GROUP BY meeting_outcome;
SELECT COUNT(*), meeting_outcome FROM meetings GROUP BY meeting_outcome;
SELECT client_id, COUNT(meeting_id) AS meeting_count FROM meetings GROUP BY client_id;
SELECT client_id, COUNT(meeting_id) as meeting_count FROM meetings GROUP BY client_id;
SELECT clients.client_id, meeting_type, COUNT(*) as meeting_count FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id, meeting_type;
SELECT COUNT(meeting_id), meeting_type FROM meetings GROUP BY meeting_type;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id;
SELECT meeting_id, COUNT(staff_id) FROM staff_in_meetings GROUP BY meeting_id;
SELECT meeting_id, COUNT(staff_id) as num_staff FROM staff_in_meetings GROUP BY meeting_id;
SELECT staff_id, COUNT(*) as num_meetings_attended FROM staff_in_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_in_meetings GROUP BY staff_id HAVING COUNT(DISTINCT meeting_id) = ( SELECT COUNT(DISTINCT meeting_id) FROM staff_in_meetings GROUP BY staff_id ORDER BY COUNT(DISTINCT meeting_id) LIMIT 1 ) ) GROUP BY staff_id;
SELECT staff_id FROM staff_in_meetings GROUP BY staff_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(DISTINCT staff_id) AS attended_staff_number FROM staff_in_meetings;
SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings;
SELECT COUNT(DISTINCT staff.staff_id) FROM staff WHERE staff.staff_id NOT IN (SELECT staff_id FROM staff_in_meetings);
SELECT COUNT(*) FROM staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM staff_in_meetings);
SELECT client_id, client_details FROM clients WHERE client_id IN (SELECT client_id FROM meetings UNION SELECT client_id FROM invoices);
SELECT client_id, client_details FROM clients WHERE client_id IN ( SELECT client_id FROM meetings UNION SELECT client_id FROM invoices );
SELECT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE staff.staff_id IN (SELECT staff_id FROM staff_in_meetings GROUP BY staff_id HAVING COUNT(*) >= 1) AND staff_details LIKE '%s%';
SELECT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE staff.staff_details LIKE '%s%' GROUP BY staff.staff_id;
SELECT client_id, sic_code, agency_id FROM clients WHERE client_id IN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM invoices);
SELECT client_id, sic_code, agency_id FROM clients WHERE client_id IN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM invoices);
SELECT start_date_time, end_date_time, client_details, staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id;
SELECT start_date_time, end_date_time, client_details, staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id;
