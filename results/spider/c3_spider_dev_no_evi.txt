SELECT COUNT(*) FROM concert;
SELECT COUNT(*) as total_singers FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(singer_id) AS num_singers FROM singer GROUP BY country;
SELECT country, COUNT(singer_id) as num_singers FROM singer GROUP BY country;
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT singer.name from singer where age > (select avg(age) from singer);
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity), AVG(capacity) FROM stadium;
SELECT AVG(capacity), MAX(capacity) FROM stadium;
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT COUNT(concert_id) FROM concert WHERE year = 2014 OR year = 2015;
SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);
SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts_played FROM stadium LEFT JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.stadium_id;
SELECT stadium.name, stadium.capacity FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name, capacity FROM stadium WHERE stadium_id = ( SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);
SELECT concert_name, theme, COUNT(singer_in_concert.singer_id) as singer_count FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id;
SELECT concert_name, theme, COUNT(singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id;
SELECT singer.name, COUNT(singer_in_concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT name, count(concert_id) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id;
SELECT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE year = 2014;
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE year = 2014));
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%';
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%';
SELECT name, location FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE year = 2014 ) INTERSECT SELECT name, location FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE year = 2015 );
SELECT name, location FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE year = 2014 INTERSECT SELECT stadium_id FROM concert WHERE year = 2015 );
SELECT COUNT(concert.concert_id) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium);
SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT MIN(pets.weight) FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1;
SELECT MIN(weight) FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog');
SELECT MAX(weight), pettype FROM pets GROUP BY pettype;
SELECT MAX(weight), pettype FROM pets GROUP BY pettype;
SELECT COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20;
SELECT COUNT(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20;
SELECT count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid AND student.sex = 'F' JOIN pets ON has_pet.petid = pets.petid AND pets.pettype = 'dog';
SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' UNION SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog');
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype IN ('cat', 'dog'));
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat') INTERSECT SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog');
SELECT DISTINCT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'cat' ) INTERSECT SELECT stuid FROM has_pet WHERE petid IN ( SELECT petid FROM pets WHERE pettype = 'dog' ) );
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT stuid FROM student WHERE stuid NOT IN(SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' EXCEPT SELECT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat';
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') EXCEPT SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT petid, weight FROM pets WHERE pet_age > 1;
SELECT petid, weight FROM pets WHERE pet_age > 1;
SELECT pettype, AVG(age) as avg_age, MAX(age) as max_age FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid GROUP BY pettype;
SELECT pettype, AVG(age) AS avg_age, MAX(age) AS max_age FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid GROUP BY pettype;
SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype;
SELECT pettype, AVG(weight) as avg_weight FROM pets GROUP BY pettype;
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);
SELECT DISTINCT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);
SELECT pets.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith';
SELECT student.stuid, COUNT(has_pet.petid) AS pet_count FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT student.stuid, COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;
SELECT fname, sex FROM student WHERE stuid IN ( 	SELECT stuid 	FROM has_pet 	GROUP BY stuid 	HAVING COUNT(*) > 1 );
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);
SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3;
SELECT lname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' AND pet_age = 3 );
SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SELECT COUNT(DISTINCT contid) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) as num_countries FROM continents JOIN countries ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent;
SELECT contid, continent, COUNT(countryid) as country_count FROM continents JOIN countries ON countries.continent = continents.contid GROUP BY contid, continent;
SELECT COUNT(countryid) FROM countries;
SELECT COUNT(countryid) FROM countries;
SELECT fullname, car_makers.id, COUNT(model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY fullname, car_makers.id;
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id;
SELECT model FROM model_list WHERE modelid = ( SELECT modelid FROM cars_data ORDER BY horsepower LIMIT 1 );
SELECT model FROM model_list WHERE modelid = ( SELECT modelid FROM cars_data ORDER BY horsepower ASC LIMIT 1 );
SELECT model FROM model_list WHERE modelid IN (SELECT modelid FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data));
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list WHERE modelid IN (SELECT id FROM cars_data WHERE year = 1970));
SELECT DISTINCT cm.fullname FROM car_makers cm INNER JOIN model_list ml ON cm.id = ml.maker INNER JOIN car_names cn ON ml.model = cn.model INNER JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.year = 1970;
SELECT model_list.maker, year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE year = (SELECT MIN(year) FROM cars_data);
SELECT fullname, year FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE year = (SELECT MIN(year) FROM cars_data) LIMIT 1;
SELECT DISTINCT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE year > 1980;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980;
SELECT continent, COUNT(DISTINCT car_makers.maker) as maker_count FROM continents LEFT JOIN countries ON continents.contid = countries.continent LEFT JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;
SELECT continent, COUNT(*) FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continent;
SELECT countryname FROM countries WHERE countryid = ( SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT countryname FROM countries WHERE countryid = ( SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT COUNT(modelid), fullname FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.fullname;
SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.id, car_makers.fullname;
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = "amc" AND car_names.make = "amc hornet sportabout (sw)";
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'amc hornet sportabout (sw)';
SELECT COUNT(DISTINCT id) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france');
SELECT count(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');
SELECT COUNT(DISTINCT modelid) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'usa';
SELECT count(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States';
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4;
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT model_list.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model;
SELECT maker, model
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country FROM car_makers)
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT country FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT ROUND(AVG(weight),2), year FROM cars_data GROUP BY year;
SELECT avg(weight), year FROM cars_data GROUP BY year;
SELECT countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid WHERE continents.continent = 'europe' GROUP BY countryname HAVING COUNT(DISTINCT maker) >= 3;
SELECT DISTINCT countryname FROM countries WHERE continent = (SELECT contid FROM continents WHERE continent = 'europe') AND countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT maker) >= 3);
SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;
SELECT MAX(horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3;
SELECT car_names.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY mpg DESC LIMIT 1;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY mpg DESC LIMIT 1;
SELECT avg(horsepower) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE year < 1980;
SELECT AVG(horsepower) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.year < 1980;
SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE model_list.model = 'volvo';
SELECT ROUND(AVG(edispl), 2) AS avg_edispl FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'volvo';
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT max(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT modelid) DESC LIMIT 1;
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT modelid) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = "American Motor Company";
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = "American Motor Company";
SELECT id, fullname FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3 );
SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(modelid) > 3);
SELECT DISTINCT car_names.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT car_names.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;
SELECT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT year FROM cars_data WHERE weight > 3000;
SELECT max(horsepower) FROM cars_data WHERE accelerate = (SELECT max(accelerate) FROM cars_data);
SELECT MAX(horsepower) FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);
SELECT min(cylinders) AS min_cylinders FROM cars_data WHERE id IN ( SELECT makeid FROM car_names WHERE model = 'volvo' AND makeid = ( SELECT id FROM car_makers WHERE maker = 'volvo' ) );
SELECT MIN(cylinders) FROM cars_data WHERE id = ( SELECT id FROM car_makers WHERE maker = 'volvo' );
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data));
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(accelerate) FROM cars_data ORDER BY horsepower DESC LIMIT 1);
SELECT COUNT(DISTINCT countries.countryname) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(car_makers.maker) > 2;
SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;
SELECT model FROM model_list WHERE modelid IN ( SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1 );
SELECT car_names.makeid, car_makers.maker FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data);
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT car_names.model FROM model_list JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE weight < 3500 AND country != "ford";
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers);
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);
SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) >= 2) AND id IN (SELECT makeid FROM car_names GROUP BY makeid HAVING COUNT(model) > 3);
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(*) > 3;
SELECT countryid, countryname FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(DISTINCT id) > 3 UNION SELECT country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' );
SELECT countryid, countryname FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(id) > 3 ) OR countryid IN ( SELECT country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model AND car_names.make = "fiat" );
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = "JetBlue Airways";
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(DISTINCT airline) AS total_airlines FROM airlines;
SELECT COUNT(airportcode) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(flightno) FROM flights;
SELECT count(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline from airlines where abbreviation = 'UAL';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = "Aberdeen";
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = "Aberdeen");
SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE destairport = 'ABZ';
SELECT COUNT(*) FROM airports a JOIN flights f ON a.airportcode = f.sourceairport JOIN airports a2 ON f.destairport = a2.airportcode WHERE a.city = 'Aberdeen' AND a2.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley');
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.abbreviation = 'JetBlue';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.airportcode = 'ASY';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.abbreviation JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.airline = "United Airlines" AND airports.airportcode = "AHD";
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';
SELECT city FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city FROM airports WHERE airportcode = ( SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT city FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT city FROM airports WHERE airportcode in (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1);
SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport GROUP BY airportcode ORDER BY COUNT(flightno) DESC LIMIT 1;
SELECT airportcode FROM ( SELECT airportcode, COUNT(*) AS num_flights FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport OR airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY num_flights DESC LIMIT 1 );
SELECT airportcode FROM airports ORDER BY ( SELECT COUNT(*) FROM flights WHERE destairport = airportcode OR sourceairport = airportcode ) ASC LIMIT 1;
SELECT airportname FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) ASC LIMIT 1);
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT abbreviation, country FROM airlines WHERE uid = ( SELECT uid FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT abbreviation, country FROM airlines WHERE abbreviation = (SELECT airline FROM flights GROUP BY airline ORDER BY count(*) LIMIT 1);
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline WHERE flights.sourceairport = 'AHD';
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT flights.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT airline FROM flights WHERE destairport = 'APG' INTERSECT SELECT airline FROM flights WHERE destairport = 'CVO';
SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT airports.airportcode) = 2;
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');
SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'CVO' EXCEPT SELECT airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'APG';
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10;
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) < 200);
SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) < 200 );
SELECT flightno FROM flights WHERE airline = 'United Airlines';
SELECT flightno FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = "United Airlines";
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE city = "Aberdeen";
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE city = "Aberdeen";
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen");
SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city IN ('Aberdeen', 'Abilene') );
SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city IN ('Aberdeen', 'Abilene'));
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT COUNT(employee_id) FROM employee;
SELECT Count(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city, COUNT(employee_id) as num_of_employees FROM employee GROUP BY city;
SELECT city, COUNT(employee_id) as num_employees FROM employee GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT location, COUNT(shop_id) FROM shop GROUP BY location;
SELECT shop.location, COUNT(shop.shop_id) FROM shop GROUP BY shop.location;
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1;
SELECT manager_name, district FROM shop WHERE number_products = ( SELECT MAX(number_products) FROM shop );
SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation ORDER BY bonus DESC LIMIT 1 );
SELECT name FROM employee WHERE employee_id IN ( SELECT employee_id FROM evaluation ORDER BY bonus DESC LIMIT 1 );
SELECT name FROM employee WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM evaluation);
SELECT name FROM employee WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM evaluation);
SELECT shop.name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT name FROM shop WHERE shop_id = (SELECT shop.shop_id FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1);
SELECT name FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring);
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name, count(hiring.employee_id) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id;
SELECT shop.name, count(employee.employee_id) as num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name;
SELECT SUM(bonus) FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT district FROM shop GROUP BY district HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0;
SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(*) FROM documents;
SELECT COUNT(*) FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%';
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%';
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';
SELECT COUNT(DISTINCT template_id) FROM documents;
SELECT COUNT(DISTINCT template_id) FROM documents;
SELECT COUNT(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE template_type_code = 'PPT';
SELECT COUNT(DISTINCT documents.document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT';
SELECT templates.template_id, COUNT(documents.document_id) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;
SELECT template_id, COUNT(document_id) FROM documents GROUP BY template_id;
SELECT template_id, template_type_code FROM templates WHERE template_id = ( SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(document_id) DESC LIMIT 1 );
SELECT template_id, template_type_code FROM templates WHERE template_id = ( SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT template_id FROM templates WHERE template_id IN (SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1);
SELECT template_id FROM templates WHERE template_id IN ( SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(DISTINCT document_id) > 1 );
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);
SELECT COUNT(*) FROM templates;
SELECT COUNT(template_id) FROM templates;
SELECT template_id, version_number, template_type_code FROM templates;
SELECT template_id, version_number, template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM templates;
SELECT template_type_code FROM ref_template_types;
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');
SELECT COUNT(DISTINCT template_id) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT template_type_code, COUNT(template_id) FROM templates GROUP BY template_type_code;
SELECT template_type_code, COUNT(template_id) FROM templates GROUP BY template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3;
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3;
SELECT MIN(version_number), template_type_code FROM templates;
SELECT template_type_code, MIN(version_number) FROM templates GROUP BY template_type_code;
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Data base";
SELECT template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE document_name = 'Data base';
SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = "BK";
SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';
SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS document_count FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;
SELECT template_type_code, COUNT(document_id) FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code;
SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT DISTINCT template_type_code FROM templates);
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN ( SELECT template_type_code FROM templates );
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book";
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book";
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT DISTINCT templates.template_details FROM templates JOIN documents ON templates.template_id = documents.template_id;
SELECT template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE template_type_description = "Presentation";
SELECT template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE template_type_description = 'Presentation';
SELECT COUNT(1) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs;
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
SELECT COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE document_name = 'Summer Show';
SELECT paragraph_text, paragraph_id, document_id FROM paragraphs WHERE paragraph_text = 'Korea';
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea %';
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE document_name = 'Welcome to NY';
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT document_id, COUNT(*) AS paragraph_count FROM paragraphs GROUP BY document_id ORDER BY document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;
SELECT document_id, document_name FROM documents WHERE document_id = (SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1);
SELECT document_id FROM documents GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT document_id FROM documents ORDER BY (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id = documents.document_id) LIMIT 1;
SELECT document_id FROM documents WHERE document_id IN ( SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2 );
SELECT document_id FROM documents WHERE document_id IN ( SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2 );
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');
SELECT COUNT(teacher_id) FROM teacher;
SELECT COUNT(teacher_id) FROM teacher;
SELECT name FROM teacher ORDER BY age ASC;
SELECT name FROM teacher ORDER BY age ASC;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT hometown FROM teacher ORDER BY age LIMIT 1;
SELECT hometown FROM teacher ORDER BY age LIMIT 1;
SELECT DISTINCT hometown, COUNT(teacher_id) FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(teacher_id) AS num_teachers FROM teacher GROUP BY hometown;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id = (SELECT course_id FROM course WHERE course = 'Math'));
SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course = 'Math';
SELECT teacher.name, COUNT(course.course_id) as num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id GROUP BY teacher.teacher_id;
SELECT name, COUNT(course_id) FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id, name;
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2);
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
SELECT name FROM museum WHERE num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010 );
SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id HAVING COUNT(*) > 1;
SELECT id, name, level_of_membership FROM visitor WHERE id = ( SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY SUM(total_spent) DESC LIMIT 1 );
SELECT museum.museum_id, museum.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit);
SELECT name, age FROM visitor WHERE id = ( SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1 );
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;
SELECT total_spent FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE level_of_membership = 1
SELECT name FROM visitor WHERE id IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011 );
SELECT count(DISTINCT visitor_id) FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year <= 2010 );
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;
SELECT COUNT(DISTINCT player_id) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(match_num) AS total_matches FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches;
SELECT MIN(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;
SELECT first_name, last_name FROM players WHERE player_id IN ( SELECT winner_id FROM matches WHERE year = 2013 ) INTERSECT SELECT first_name, last_name FROM players WHERE player_id IN ( SELECT winner_id FROM matches WHERE year = 2016 );
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT Distinct country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') INTERSECT SELECT DISTINCT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open');
SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') INTERSECT SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open');
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name || ' ' || last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(DISTINCT tours) DESC LIMIT 1 );
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1);
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT player_id, first_name, last_name, country_code, birth_date FROM players WHERE player_id = ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT winner_name, MAX(match_num), MAX(rank_points) FROM ( SELECT winner_name, COUNT(*) as match_num, MAX(ranking_points) as rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY winner_name ) ORDER BY match_num DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches ORDER BY minutes DESC LIMIT 1) UNION SELECT first_name, last_name FROM players WHERE player_id IN (SELECT loser_id FROM matches ORDER BY minutes DESC LIMIT 1);
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT players.first_name, SUM(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT first_name, SUM(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT country_code, COUNT(player_id) as num_players FROM players GROUP BY country_code;
SELECT players.country_code, COUNT(player_id) as player_count FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT COUNT(DISTINCT tours), ranking_date FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;
SELECT year, COUNT(match_num) FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;
SELECT COUNT(DISTINCT P.player_id) FROM players P JOIN matches M ON P.player_id = M.winner_id WHERE M.tourney_name = 'WTA Championships' AND P.hand = 'L';
SELECT count(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT first_name, country_code, birth_date FROM players WHERE player_id = ( SELECT winner_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1 );
SELECT hand, COUNT(player_id) FROM players GROUP BY hand
SELECT COUNT(player_id), hand FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed), MIN(killed) FROM death;
SELECT avg(injured) as avg_injuries FROM death;
SELECT death.killed, death.note, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig';
SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY lost_in_battle HAVING SUM(killed) > 10);
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT count(distinct battle.name) FROM battle WHERE battle.id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225);
SELECT b.name, b.date FROM battle b JOIN ship s ON s.lost_in_battle = b.id WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE location = 'English Channel' );
SELECT notes FROM death WHERE notes LIKE '%East%';
SELECT line_1, line_2 FROM addresses;
SELECT line_1, line_2 FROM addresses;
SELECT COUNT(*) FROM courses;
SELECT COUNT(course_id) FROM courses;
SELECT course_description FROM courses WHERE course_name = "math";
SELECT course_description FROM courses WHERE course_name = 'math';
SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";
SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";
SELECT department_id, department_name FROM departments WHERE department_id = ( SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1 );
SELECT department_name, departments.department_id FROM departments WHERE department_id = (SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT COUNT(DISTINCT department_id) FROM degree_programs;
SELECT COUNT(DISTINCT department_id) FROM departments;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT course_id, course_name FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) <= 2 );
SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) < 2);
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT semester_name, semester_id FROM semesters WHERE semester_id = ( SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT semester_name, semester_id FROM semesters WHERE semester_id = ( SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1 );
SELECT department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id WHERE se.semester_id = 1 GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelor';
SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT se.student_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors' );
SELECT degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT degree_summary_name FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1 );
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 );
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 );
SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS num_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id, students.first_name, students.middle_name, students.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT first_name, middle_name, last_name, students.student_id, COUNT(*) AS num_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id NOT IN ( SELECT semester_id FROM student_enrolment );
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);
SELECT DISTINCT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;
SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM student_enrolment_courses )
SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1 );
SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id LEFT JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL;
SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' EXCEPT SELECT last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id;
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT tc.transcript_id FROM transcript_contents tc GROUP BY tc.transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2);
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2;
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM students ORDER BY student_id LIMIT 1;
SELECT first_name, middle_name, last_name FROM students WHERE student_id = ( SELECT student_id FROM student_enrolment ORDER BY student_enrolment_id LIMIT 1 );
SELECT first_name, middle_name, last_name FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE semester_id IN ( SELECT MIN(semester_id) FROM student_enrolment WHERE degree_program_id IS NOT NULL ) );
SELECT first_name, middle_name, last_name FROM students WHERE student_id = ( SELECT student_id FROM student_enrolment ORDER BY semester_id LIMIT 1 );
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id;
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
SELECT address_id, line_1, line_2 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT AVG(transcript_date) AS average_transcript_date FROM transcripts;
SELECT AVG(transcript_date) FROM transcripts;
SELECT MIN(transcript_date), other_details FROM transcripts;
SELECT min(transcript_date), other_details FROM transcripts;
SELECT COUNT(transcript_id) FROM transcripts;
SELECT COUNT(transcript_id) FROM transcripts;
SELECT MAX(transcript_date) FROM transcripts;
SELECT MAX(transcript_date) AS last_transcript_date FROM transcripts;
SELECT student_course_id, COUNT(transcript_id) AS count FROM transcript_contents GROUP BY student_course_id ORDER BY count DESC LIMIT 1;
SELECT MAX(cnt) as max_count, sec.student_enrolment_id FROM (SELECT SEC.student_course_id, count(*) as cnt FROM transcript_contents TC JOIN student_enrolment_courses SEC ON TC.student_course_id = SEC.student_course_id GROUP BY SEC.student_course_id) AS course_count JOIN student_enrolment_courses sec ON course_count.student_course_id = sec.student_course_id;
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id = ( SELECT transcript_id FROM transcript_contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT semester_id FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Master') AND semester_id IN (SELECT semester_id FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelor');
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Masters', 'Bachelors') GROUP BY degree_program_id HAVING COUNT(DISTINCT degree_summary_name) = 2);
SELECT count(DISTINCT students.current_address_id) FROM students;
SELECT DISTINCT line_1, line_2, line_3, city FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students);
SELECT * FROM students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM students ORDER BY last_name DESC;
SELECT section_name FROM sections WHERE section_id = 'h';
SELECT section_description FROM sections WHERE section_name = 'h';
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT title FROM cartoon ORDER BY title ASC;
SELECT title FROM cartoon ORDER BY title ASC;
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
SELECT title FROM cartoon WHERE directed_by = "Ben Jones";
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY original_air_date;
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT country, COUNT(id) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT country, COUNT(*) as channel_count FROM tv_channel GROUP BY country ORDER BY channel_count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT content FROM tv_channel WHERE series_name = "Sky Radio";
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM tv_channel WHERE language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';
SELECT language, COUNT(id) AS num_of_channels FROM tv_channel GROUP BY language ORDER BY num_of_channels LIMIT 1;
SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels LIMIT 1;
SELECT language, COUNT(id) FROM tv_channel GROUP BY language;
SELECT language, count(id) FROM tv_channel GROUP BY language;
SELECT tv_channel.series_name FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = "The Rise of the Blue Beetle!";
SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = "The Rise of the Blue Beetle!");
SELECT title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";
SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");
SELECT episode FROM tv_series ORDER BY rating;
SELECT episode FROM tv_series ORDER BY rating;
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT MIN(share), MAX(share) FROM tv_series;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime');
SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime');
SELECT episode FROM tv_series WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");
SELECT directed_by, COUNT(id) FROM cartoon GROUP BY directed_by;
SELECT directed_by, COUNT(id) AS num_cartoons FROM cartoon GROUP BY directed_by;
SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon);
SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1;
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 1;
SELECT country FROM tv_channel WHERE id IN ( SELECT channel FROM cartoon WHERE written_by = 'Todd Casey' );
SELECT DISTINCT tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = "Todd Casey";
SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');
SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = "Todd Casey");
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Ben Jones' INTERSECT SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by = 'Michael Chang';
SELECT series_name, country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' INTERSECT SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang');
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(id) > 2);
SELECT id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2;
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT DISTINCT c.channel FROM cartoon c WHERE c.directed_by = 'Ben Jones' );
SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT tv_channel.package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT DISTINCT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT final_table_made, best_finish FROM poker_player;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT MAX(money_rank) AS money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT name FROM people;
SELECT name FROM people;
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;
SELECT name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY final_table_made ASC;
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY final_table_made ASC;
SELECT birth_date FROM people WHERE people_id = (SELECT people_id FROM poker_player ORDER BY earnings LIMIT 1);
SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings LIMIT 1;
SELECT max(p.money_rank) FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height = (SELECT max(height) FROM people);
SELECT money_rank FROM poker_player WHERE people_id = (SELECT people_id FROM people ORDER BY height DESC LIMIT 1);
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id ORDER BY pp.earnings DESC;
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC;
SELECT nationality, COUNT(people_id) as num_people FROM people GROUP BY nationality;
SELECT nationality, count(people_id) FROM people GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name FROM people WHERE nationality != 'Russia';
SELECT name FROM people WHERE nationality <> 'Russia';
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) AS num_nationalities FROM people;
SELECT COUNT(DISTINCT state) FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT max(area_code), min(area_code) from area_code_state;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT DISTINCT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes;
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN ( SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(vote_id) >= 2 );
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = ( SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1 ); 
SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');
SELECT count(DISTINCT contestant_number) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
SELECT (SELECT area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT created, state, phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestant_name = 'Tabatha Gehling';
SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY area_code HAVING COUNT(DISTINCT contestants.contestant_name) = 2;
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';
SELECT name FROM country WHERE indepyear > 1950;
SELECT name FROM country WHERE indepyear > 1950;
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';
SELECT sum(surfacearea) from country where region = "Caribbean";
SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1;
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT name FROM country WHERE lifeexpectancy = ( SELECT MIN(lifeexpectancy) FROM country WHERE continent = "Asia" );
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;
SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS max_gnp FROM country WHERE country.continent = 'Asia';
SELECT SUM(city.population) AS TotalPopulation, MAX(country.gnp) AS LargestGNP FROM country JOIN city ON country.code = city.countrycode WHERE country.continent = 'Asia';
SELECT avg(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';
SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE governmentform = 'US Territory';
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT( DISTINCT language ) FROM countrylanguage;
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = "Africa";
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT count(distinct language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
SELECT (SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1));
SELECT name FROM country WHERE code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(language) DESC LIMIT 1 );
SELECT continent FROM ( SELECT c.continent, COUNT(DISTINCT cl.language) AS language_count FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code GROUP BY c.continent ORDER BY language_count DESC LIMIT 1 );
SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT(country.code)) DESC LIMIT 1;
SELECT COUNT(countrycode) FROM countrylanguage WHERE language IN ('English', 'Dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2;
SELECT COUNT(countrycode) FROM countrylanguage WHERE language IN ('Dutch', 'English');
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) INTERSECT SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' );
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2 );
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T' ) INTERSECT SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T' );
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') INTERSECT SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T');
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');
SELECT COUNT(DISTINCT continent) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'Chinese';
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));
SELECT DISTINCT region FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ('Dutch', 'English') );
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') OR code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' AND isofficial = 'T');
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE (language = 'Dutch' OR language = 'English') AND isofficial = 1 );
SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;
SELECT language FROM countrylanguage WHERE language IN ( SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1 ) AND countrycode IN ( SELECT code FROM country WHERE governmentform = 'Republic' );
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = "English" ORDER BY city.population DESC LIMIT 1;
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" ORDER BY city.population DESC LIMIT 1;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English" AND isofficial = 'T');
SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT SUM(country.population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT language FROM countrylanguage WHERE countrycode = ( SELECT code FROM country WHERE headofstate = 'Beatrix' ) AND isofficial = 'T';
SELECT language FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE indepyear < 1930 );
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930 AND indepyear != 0) AND isofficial = 'T';
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT c1.name FROM country c1 WHERE c1.continent = 'Africa' AND c1.population < (SELECT MIN(c2.population) FROM country c2 WHERE c2.continent = 'Asia');
SELECT c1.name FROM country c1 WHERE c1.continent = 'Asia' AND c1.population > (SELECT MAX(c2.population) FROM country c2 WHERE c2.continent = 'Africa');
SELECT country.name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English');
SELECT country.code FROM country WHERE country.code NOT IN ( SELECT countrycode FROM countrylanguage WHERE language <> "English" );
SELECT country.code FROM country WHERE governmentform != 'Republic' EXCEPT SELECT countrylanguage.countrycode FROM countrylanguage WHERE language = 'English';
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English') AND governmentform <> 'Republic';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language = 'English' AND countrylanguage.isofficial = 'F' ;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'F' 
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T');
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT name, indepyear, surfacearea FROM country WHERE population = ( SELECT MIN(population) FROM country );
SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1;
SELECT name, COUNT(language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(language) >= 3;
SELECT name, COUNT(language) AS num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY name HAVING num_languages > 2;
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT district, COUNT(name) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT governmentform, SUM(population) AS total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population) as total_population FROM country WHERE governmentform IN ( SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform;
SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT continent, SUM(population), AVG(lifeexpectancy) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name FROM country WHERE continent = "Europe" AND population = 80000;
SELECT sum(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT country.name, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = country.code);
SELECT code, language FROM ( SELECT c.code, cl.language, cl.percentage, RANK() OVER (PARTITION BY c.code ORDER BY cl.percentage DESC) as r FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode ) t WHERE r = 1;
SELECT COUNT(*) FROM ( SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode );
SELECT COUNT(*) FROM ( SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' GROUP BY countrycode HAVING MAX(percentage) );
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Spanish" GROUP BY country.code HAVING MAX(countrylanguage.percentage);
SELECT COUNT(conductor_id) FROM conductor;
SELECT COUNT(conductor_id) FROM conductor;
SELECT name FROM conductor ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;
SELECT name FROM conductor WHERE nationality <> "USA";
SELECT name FROM conductor WHERE nationality <> 'USA';
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type <> 'Live final';
SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'Live final';
SELECT COUNT(DISTINCT nationality) AS number_of_nationalities FROM conductor;
SELECT COUNT(DISTINCT nationality) FROM conductor;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT name, orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra) > 1;
SELECT name FROM conductor WHERE conductor_id IN ( SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1 );
SELECT name FROM conductor WHERE conductor_id = ( SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1 );
SELECT name FROM conductor WHERE conductor_id = ( SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(orchestra_id) DESC LIMIT 1 );
SELECT name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id JOIN performance ON orchestra.orchestra_id = performance.orchestra_id JOIN show ON performance.performance_id = show.performance_id WHERE year_of_founded > 2008;
SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008);
SELECT record_company, COUNT(orchestra_id) as num_orchestras FROM orchestra GROUP BY record_company;
SELECT record_company, count(orchestra) as total_orchestras FROM orchestra GROUP BY record_company;
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT orchestra) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN ( SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1 );
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN ( SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(DISTINCT performance_id) > 1 );
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT count(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);
SELECT COUNT(*), grade FROM highschooler GROUP BY grade;
SELECT grade, count(id) FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT friend.student_id, COUNT(friend_id) FROM friend GROUP BY friend.student_id;
SELECT highschooler.id, count(friend.friend_id) as num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT name, COUNT(friend_id) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT name, COUNT(friend_id) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM ( SELECT name, COUNT(friend_id) AS num_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY name ) AS friend_count ORDER BY num_friends DESC LIMIT 1;
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3);
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3);
SELECT name FROM highschooler WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle'));
SELECT h2.name FROM highschooler h1 JOIN friend f ON f.student_id = h1.id JOIN highschooler h2 ON h2.id = f.friend_id WHERE h1.name = 'Kyle';
SELECT COUNT(*) FROM highschooler JOIN friend ON highschooler.id = friend.student_id WHERE highschooler.name = 'Kyle';
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = "Kyle");
SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT id FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend);
SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend);
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT id FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT liked_id FROM likes);
SELECT id FROM highschooler WHERE id IN (SELECT student_id FROM friend) INTERSECT SELECT student_id FROM likes;
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT liked_id FROM likes);
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) INTERSECT SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes);
SELECT student_id, COUNT(liked_id) FROM likes GROUP BY student_id;
SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;
SELECT name, count(*) as num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id;
SELECT name, count(*) as like_count FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1 );
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1);
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2 );
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT name FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id WHERE grade > 5 GROUP BY highschooler.id HAVING COUNT(friend_id) >= 2;
SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 )
SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT count(likes.student_id) FROM highschooler LEFT JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle';
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend)
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2);
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( 	SELECT professional_id 	FROM treatments 	GROUP BY professional_id 	HAVING COUNT(*) > 2 );
SELECT dog_id, name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000);
SELECT name FROM dogs WHERE owner_id IN (SELECT owner_id FROM owners JOIN treatments ON owners.owner_id = treatments.dog_id GROUP BY owner_id HAVING SUM(cost_of_treatment) <= 1000);
SELECT first_name FROM professionals EXCEPT SELECT first_name FROM owners UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs;
SELECT first_name FROM ( SELECT first_name FROM owners UNION SELECT first_name from professionals ) AS combined_names EXCEPT SELECT name FROM dogs;
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments WHERE dog_id IS NOT NULL);
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 );
SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
SELECT breed_name FROM breeds WHERE breed_code IN (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT breed_name FROM breeds WHERE breed_code IN ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT owner_id, last_name FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY COUNT(*) DESC LIMIT 1 ) );
SELECT owner_id, last_name FROM owners WHERE owner_id = ( SELECT owner_id FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1 );
SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatment_types INNER JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT owner_id, zip_code FROM owners WHERE owner_id = ( SELECT owner_id FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN charges ON treatments.cost_of_treatment = charges.charge_amount GROUP BY owner_id ORDER BY SUM(charges.charge_amount) DESC LIMIT 1 );
SELECT owner_id, zip_code FROM owners WHERE owner_id IN ( SELECT d.owner_id FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id GROUP BY d.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1 );
SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT first_name, last_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM treatments) );
SELECT professional_id, first_name, last_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM treatments) );
SELECT date_of_treatment, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT date_of_treatment, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT first_name, name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = ( SELECT breed_code FROM breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT d.name, t.date_of_treatment FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN treatments t ON d.dog_id = t.dog_id JOIN ( SELECT breed_code FROM breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) rarest ON b.breed_code = rarest.breed_code;
SELECT first_name, name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE state = 'Virginia';
SELECT first_name FROM owners WHERE state = 'Virginia';
SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs);
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs);
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT date_arrived, date_departed FROM dogs;
SELECT date_arrived, date_departed FROM dogs;
SELECT COUNT(DISTINCT dog_id) as num_dogs FROM treatments;
SELECT COUNT(DISTINCT dog_id) FROM treatments;
SELECT count(DISTINCT professional_id) FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);
SELECT MAX(cost_of_treatment) AS recent_treatment_cost FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT max(cost_of_treatment) FROM treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM treatments);
SELECT COUNT(DISTINCT dog_id) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(DISTINCT dog_id) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE abandoned_yn = 'N');
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs);
SELECT COUNT(DISTINCT professionals.professional_id) FROM professionals WHERE professionals.professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT COUNT(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1;
SELECT name, age, weight FROM dogs WHERE abandoned_yn = 1;
SELECT AVG(age) FROM dogs;
SELECT AVG(age) FROM dogs;
SELECT MAX(age) AS age FROM dogs;
SELECT MAX(age) FROM dogs;
SELECT charge_type, SUM(charge_amount) as total_cost FROM charges GROUP BY charge_type;
SELECT charge_type, charge_amount FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT email_address, cell_number, home_phone FROM professionals
SELECT breed_name, size_description FROM breeds, sizes;
SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship != 'France';
SELECT name FROM singer WHERE citizenship <> 'French';
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT citizenship, COUNT(singer_id) FROM singer GROUP BY citizenship;
SELECT citizenship, count(singer_id) FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;
SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1 );
SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1 );
SELECT name, sum(sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT Distinct citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT DISTINCT citizenship FROM singer WHERE birth_year > 1955;
SELECT COUNT(DISTINCT feature_id) as total_available_features FROM other_available_features;
SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = "AirCon";
SELECT property_type_description FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code;
SELECT property_address FROM properties WHERE room_count > 1 AND property_type_code IN ( SELECT property_type_code FROM ref_property_types WHERE property_type_description IN ('Apartment', 'House') );
