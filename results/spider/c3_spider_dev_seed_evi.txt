SELECT COUNT(singer_id) FROM singer;
SELECT COUNT(singer_id) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer);
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(singer_id) AS "number of singers" FROM singer GROUP BY country;
SELECT COUNT(singer_id), country FROM singer GROUP BY country;
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity) AS maximum_capacity, AVG(average) AS average_capacity FROM stadium;
SELECT AVG(capacity), MAX(capacity) FROM stadium;
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (SELECT MAX(average) FROM stadium);
SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = (SELECT MAX(average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE year = '2014' OR year = '2015';
SELECT COUNT(concert_id) FROM concert WHERE year = '2014' OR year = '2015';
SELECT stadium.name, COUNT(concert.concert_id) FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id GROUP BY stadium.name;
SELECT stadium.stadium_id, count(concert.concert_id) FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id;
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year > 2013 GROUP BY stadium.stadium_id ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(concert_id) DESC LIMIT 1;
SELECT MAX(year) FROM concert GROUP BY year ORDER BY COUNT(concert_id) DESC LIMIT 1;
SELECT name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT country FROM singer WHERE Age > 40 INTERSECT SELECT country FROM singer WHERE Age < 30;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year <> '2014' OR concert.year IS NULL;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014');
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer_in_concert.concert_id;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer_in_concert.concert_id;
SELECT singer.name, COUNT(singer_in_concert.concert_id) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name, count(singer_in_concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = '2014';
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = '2014';
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%';
SELECT name, country FROM singer WHERE song_name LIKE '%Hey%';
SELECT Name, Location FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE Year = '2014' INTERSECT SELECT stadium_id FROM concert WHERE Year = '2015' );
SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = '2014') INTERSECT SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = '2015');
SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));
SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));
SELECT COUNT(petid) FROM pets WHERE weight > 10;
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT MIN(pets.weight) FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog');
SELECT MIN(pets.weight) FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog');
SELECT Pets.pettype, MAX(Pets.weight) FROM pets GROUP BY Pets.pettype;
SELECT MAX(weight), pettype FROM pets GROUP BY pettype;
SELECT COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20;
SELECT COUNT(*) FROM student JOIN has_pet on student.stuid = has_pet.stuid JOIN pets on has_pet.petid = pets.petid WHERE student.age > 20;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';
SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT COUNT(DISTINCT pettype) FROM pets;
SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype IN ('cat', 'dog');
SELECT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' OR pettype = 'dog';
SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' ) INTERSECT SELECT fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' );
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN (SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog');
SELECT major, age FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' );
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat');
SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat');
SELECT stuid FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' );
SELECT fname, age FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog') ) EXCEPT SELECT fname, age FROM student WHERE stuid IN ( SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat') );
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat';
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);
SELECT petID, weight FROM Pets WHERE pet_age > 1;
SELECT petid, weight FROM pets WHERE pet_age > 1;
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pettype FROM pets GROUP BY pettype;
SELECT AVG(pet_age), MAX(pet_age), pettype FROM pets GROUP BY pettype;
SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype;
SELECT AVG(weight), pettype FROM pets GROUP BY pettype;
SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);
SELECT DISTINCT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);
SELECT Pets.PetID FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT pets.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';
SELECT stuid, COUNT(petid) FROM has_pet GROUP BY stuid HAVING COUNT(petid) > 0;
SELECT stuid, COUNT(petid) FROM has_pet GROUP BY stuid;
SELECT fname, sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY has_pet.stuid HAVING COUNT(has_pet.petid) > 1;
SELECT Student.Fname, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);
SELECT COUNT(contid) FROM continents;
SELECT COUNT(DISTINCT contid) FROM continents;
SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS number_of_countries FROM continents JOIN countries ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent;
SELECT contid, continents.continent, COUNT(countryid) as country_count FROM continents JOIN countries ON continents.contid = countries.Continent GROUP BY continents.contid;
SELECT COUNT(*) FROM countries;
SELECT COUNT(countryid) FROM countries;
SELECT car_makers.FullName, car_makers.Id, COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.model = model_list.model GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.id, car_makers.fullname, COUNT(car_names.model) as total_models FROM car_makers LEFT JOIN car_names ON car_makers.id = car_names.makeid GROUP BY car_makers.id, car_makers.fullname
SELECT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower = (SELECT MIN(horsepower) FROM cars_data);
SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);
SELECT model FROM car_names WHERE car_names.makeid IN (SELECT id FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data));
SELECT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;
SELECT DISTINCT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id WHERE cars_data.year = 1970;
SELECT make, year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT MIN(year) FROM cars_data);
SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;
SELECT DISTINCT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980;
SELECT model_list.model FROM model_list JOIN cars_data ON model_list.maker = cars_data.id WHERE cars_data.year > 1980;
SELECT continents.Continent, count(car_makers.Id) as maker_count FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.Continent;
SELECT continents.continent, COUNT(car_makers.id) FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.continent;
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY COUNT(maker) DESC LIMIT 1;
SELECT countryname FROM countries WHERE countryid = ( SELECT country FROM car_makers GROUP BY country ORDER BY COUNT(maker) DESC LIMIT 1 );
SELECT COUNT(car_names.MakeId) as model_count, car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.fullname;
SELECT COUNT(model_list.model), car_makers.id, car_makers.fullname FROM model_list JOIN car_makers ON model_list.maker = car_makers.id GROUP BY model_list.maker, car_makers.id, car_makers.fullname;
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'amc hornet sportabout (sw)';
SELECT accelerate FROM cars_data JOIN car_names on cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'amc hornet sportabout (sw)';
SELECT count(id) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france');
SELECT COUNT(*) FROM car_makers WHERE maker IN (SELECT maker FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countryname = 'france');
SELECT COUNT(DISTINCT car_names.model) FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN countries ON car_names.makeid = countries.countryid WHERE countries.countryname = 'usa';
SELECT COUNT(car_names.Model) FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model WHERE countries.countryname = 'usa';
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4;
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4;
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;
SELECT model_list.maker, model_list.model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model;
SELECT model_list.maker, car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON car_names.model = model_list.model;
SELECT countryName, CountryId FROM countries WHERE countryId IN (SELECT DISTINCT country FROM car_makers);
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;
SELECT AVG(weight), year FROM cars_data GROUP BY year;
SELECT AVG(weight), AVG(year), year FROM cars_data GROUP BY year;
SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid WHERE continents.continent = 'europe' GROUP BY countries.countryname HAVING COUNT(car_makers.id) >= 3;
SELECT countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.continent = 'europe' GROUP BY countries.countryid HAVING COUNT(car_makers.maker) >= 3;
SELECT max(horsepower), model_list.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders = 3;
SELECT max(cars_data.horsepower) as Max_Horsepower, car_names.make as Make FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3;
SELECT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1;
SELECT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1;
SELECT avg(horsepower) FROM cars_data WHERE year < 1980;
SELECT avg(CAST(horsepower AS REAL)) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE year < 1980;
SELECT avg(cars_data.edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE model_list.model = 'volvo';
SELECT avg(cars_data.edispl) FROM car_names JOIN cars_data ON cars_data.id = car_names.makeid WHERE car_names.make LIKE '%Volvo%';
SELECT MAX(accelerate) as max_accelerate, cylinders FROM cars_data GROUP BY cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model GROUP BY model_list.model ORDER BY COUNT(car_names.make) DESC LIMIT 1;
SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model GROUP BY model_list.model ORDER BY COUNT(DISTINCT car_names.make) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;
SELECT COUNT(id) FROM cars_data WHERE cylinders > 4;
SELECT count(id) FROM cars_data WHERE year = 1980;
SELECT COUNT(*) FROM cars_data WHERE year = 1980;
SELECT COUNT(DISTINCT car_names.model) FROM car_names JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company';
SELECT COUNT(car_names.model) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON car_names.makeid = car_makers.id WHERE car_makers.fullname = 'American Motor Company';
SELECT fullname, id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(car_names.model) > 3;
SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) > 3);
SELECT DISTINCT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE (car_makers.fullname = 'General Motors' OR cars_data.weight > 3500);
SELECT model_list.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;
SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;
SELECT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT year FROM cars_data WHERE weight > 3000;
SELECT cars_data.horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);
SELECT MAX(cars_data.horsepower) FROM cars_data WHERE cars_data.accelerate = (SELECT MAX(accelerate) FROM cars_data);
SELECT min(cylinders) FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE model_list.model = 'volvo' AND cars_data.accelerate = (SELECT min(accelerate) FROM cars_data);
SELECT cylinders FROM cars_data WHERE id IN ( SELECT makeid FROM car_names WHERE model = 'volvo' ) AND accelerate = ( SELECT MIN(accelerate) FROM cars_data WHERE id IN ( SELECT makeid FROM car_names WHERE model = 'volvo' ) );
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT accelerate FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data));
SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT accelerate FROM cars_data WHERE horsepower = (SELECT MAX(horsepower) FROM cars_data));
SELECT COUNT(DISTINCT countries.countryid) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT(car_makers.id) > 2;
SELECT COUNT(DISTINCT car_makers.country) FROM car_makers GROUP BY car_makers.country HAVING COUNT(car_makers.id) > 2;
SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;
SELECT count(Id) FROM cars_data WHERE cylinders > 6;
SELECT model_list.model FROM model_list JOIN car_names ON model_list.modelid = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY CAST(cars_data.horsepower as INTEGER) DESC LIMIT 1;
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cylinders = 4 GROUP BY model ORDER BY MAX(horsepower) DESC LIMIT 1;
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower != (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 4;
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT max(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT model_list.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT country FROM car_makers);
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers);
SELECT DISTINCT id, maker FROM car_makers WHERE id IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) >= 2 ) GROUP BY id, maker HAVING COUNT(id) > 3;
SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(cars_data.Id) > 3;
SELECT countryid, countryname FROM countries WHERE countryid IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(id) > 3 ) OR countryid IN ( SELECT country FROM car_names JOIN car_makers ON car_names.makeid = car_makers.id WHERE model = 'fiat' );
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(id) > 3 ) OR countryid IN (SELECT c.countryid FROM countries c JOIN car_makers cm ON c.countryid = cm.country JOIN model_list ml ON cm.id = ml.maker JOIN car_names cn ON ml.model = cn.model WHERE cn.model = 'fiat'); 
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline LIKE '%JetBlue Airways%';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(airportcode) FROM airports;
SELECT COUNT(airportcode) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT city, country FROM airports WHERE airportname = 'Alton';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportName FROM airports WHERE airportCode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT count(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT (*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley');
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode AND flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' AND airports.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.airline = 'United Airlines' AND flights.destairport = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.destairport = 'ASY' AND airlines.airline = 'United Airlines';
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT COUNT(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines') AND sourceairport = 'AHD';
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';
SELECT airports.city FROM airports JOIN flights ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(flights.destairport) DESC LIMIT 1;
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1;
SELECT city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY COUNT(flights.sourceairport) DESC LIMIT 1;
SELECT city FROM airports JOIN flights ON flights.sourceairport = airports.airportcode GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.airportcode FROM flights JOIN airports ON flights.destairport = airports.airportcode OR flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT(flights.sourceairport) + COUNT(flights.destairport) DESC LIMIT 1;
SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.destairport OR airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport GROUP BY airportcode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airportcode FROM airports JOIN flights ON flights.sourceairport = airports.airportcode OR flights.destairport = airports.airportcode GROUP BY airportcode ORDER BY COUNT(*) LIMIT 1;
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(flightno) DESC LIMIT 1;
SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline ORDER BY COUNT(flights.flightno) DESC LIMIT 1;
SELECT abbreviation, country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY flights.airline ORDER BY COUNT(flights.airline) ASC LIMIT 1;
SELECT abbreviation, country FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT airlines.airline FROM airlines WHERE airlines.uid IN (SELECT airline FROM flights WHERE sourceairport = 'AHD');
SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'AHD';
SELECT airline FROM airlines WHERE uid IN (SELECT airline from flights where destairport = 'AHD');
SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE destairport = 'AHD');
SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM flights WHERE sourceairport = 'CVO';
SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT sourceairport) = 2;
SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' EXCEPT SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG';
SELECT airlines.airline FROM flights INNER JOIN airlines on flights.airline = airlines.airline WHERE flights.sourceairport = 'CVO' AND flights.sourceairport != 'APG';
SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10);
SELECT airline FROM airlines WHERE uid IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10 );
SELECT airline FROM airlines WHERE uid IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) < 200 );
SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200);
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
SELECT flightno FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'United Airlines');
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flightno FROM flights WHERE sourceairport = 'APG';
SELECT flights.flightno FROM flights WHERE flights.destairport = 'APG';
SELECT flightno FROM flights WHERE destairport = 'APG';
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen' OR airports.city = 'Abilene';
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);
SELECT airportcode FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights);
SELECT COUNT(DISTINCT employee_id) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee ORDER BY age ASC;
SELECT city, COUNT(employee_id) as num_employees FROM employee GROUP BY city; 
SELECT city, COUNT(employee_id) FROM employee GROUP BY city;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT COUNT(shop_id), location FROM shop GROUP BY location;
SELECT COUNT(shop.shop_id), location FROM shop GROUP BY location;
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT shop.manager_name, shop.district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
SELECT MIN(number_products) AS minimum_number_of_products, MAX(number_products) AS maximum_number_of_products FROM shop;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT name FROM employee WHERE employee_id = ( SELECT employee_id FROM evaluation WHERE bonus = ( SELECT MAX(bonus) FROM evaluation ) );
SELECT name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY bonus DESC LIMIT 1;
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);
SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT employee_id FROM evaluation);
SELECT name FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(employee_id) DESC LIMIT 1);
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT name FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring);
SELECT name FROM shop WHERE shop.shop_id NOT IN (SELECT shop_id FROM hiring);
SELECT shop.name, COUNT(hiring.employee_id) AS num_employees_hired FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY hiring.shop_id;
SELECT shop.name, COUNT(hiring.employee_id) as num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY hiring.shop_id;
SELECT SUM(bonus) as total_bonus FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT hiring.shop_id, hiring.employee_id, hiring.start_from, hiring.is_full_time from hiring;
SELECT district FROM shop GROUP BY district HAVING COUNT(CASE WHEN number_products < 3000 THEN 1 END)>0 AND COUNT(CASE WHEN number_products > 10000 THEN 1 END)>0;
SELECT district FROM shop GROUP BY district HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0
SELECT Count(DISTINCT location) FROM shop;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT COUNT(document_id) FROM documents;
SELECT COUNT(document_id) FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%';
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV';
SELECT COUNT(DISTINCT templates.template_id) FROM documents JOIN templates ON documents.template_id = templates.template_id;
SELECT COUNT(DISTINCT documents.template_id) AS num_different_templates FROM documents;
SELECT COUNT(DISTINCT document_id) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');
SELECT COUNT(documents.document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'PPT';
SELECT templates.template_id, count(documents.document_id) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;
SELECT DISTINCT documents.template_id, COUNT(documents.template_id) FROM documents GROUP BY documents.template_id;
SELECT template_id, template_type_code FROM templates WHERE template_id = (SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(document_id) DESC LIMIT 1);
SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_id FROM templates WHERE template_id IN (SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(document_id) > 1);
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(document_id) > 1;
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT DISTINCT template_id FROM documents);
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);
SELECT COUNT(*) FROM templates;
SELECT COUNT(template_id) FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM templates;
SELECT DISTINCT template_type_code FROM ref_template_types;
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');
SELECT template_id FROM templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT version_number, template_type_code FROM templates WHERE version_number > 5;
SELECT template_type_code, COUNT(template_id) FROM templates GROUP BY template_type_code;
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3;
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code HAVING COUNT(templates.template_id) < 3;
SELECT MIN(templates.version_number), templates.template_type_code FROM templates;
SELECT MIN(version_number) as lowest_version_number, template_type_code FROM templates;
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';
SELECT template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE document_name = 'Data base';
SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE template_type_code = 'BK';
SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';
SELECT template_type_code, count(document_id) FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code;
SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
SELECT ref_template_types.template_type_code FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code ORDER BY COUNT(templates.template_id) DESC LIMIT 1;
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents))
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN ( SELECT template_type_code FROM templates WHERE template_id IN ( SELECT template_id FROM documents ) );
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT template_type_code, template_type_description FROM ref_template_types;
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation');
SELECT COUNT(paragraph_id) as total_paragraphs FROM paragraphs;
SELECT COUNT(paragraph_id) FROM paragraphs;
SELECT count(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE document_name = 'Summer Show';
SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
SELECT paragraph_id, document_id, paragraph_text, other_details FROM paragraphs WHERE paragraph_text = 'Korea';
SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Welcome to NY';
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE document_name = 'Welcome to NY';
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) as num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id;
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id;
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.document_id) DESC LIMIT 1;
SELECT document_id, document_name FROM documents WHERE document_id = ( SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1 );
SELECT document_id FROM paragraphs group by document_id order by count(paragraph_id) asc limit 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) LIMIT 1;
SELECT document_id FROM ( SELECT document_id, COUNT(paragraph_id) AS num_paragraphs FROM paragraphs GROUP BY document_id ) AS paragraph_count WHERE num_paragraphs BETWEEN 1 AND 2;
SELECT document_id FROM documents WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2);
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland';
SELECT COUNT(DISTINCT teacher_id) FROM teacher;
SELECT COUNT(teacher_id) FROM teacher;
SELECT name FROM teacher ORDER BY CAST(age AS INTEGER) ASC;
SELECT name FROM teacher ORDER BY CAST(age AS INTEGER) ASC;
SELECT name, age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT name FROM teacher WHERE age = '32' OR age = '33';
SELECT hometown FROM teacher WHERE age = (SELECT MIN(CAST(age AS INTEGER)) FROM teacher);
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);
SELECT hometown, COUNT(teacher_id) FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(teacher_id) AS num_teachers FROM teacher GROUP BY hometown;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(hometown) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'Math';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, count(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id;
SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY course_arrange.teacher_id HAVING COUNT(course_arrange.course_id) >= 2;
SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.course_id) >= 2;
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT avg(num_of_staff) FROM museum WHERE CAST(open_year AS INTEGER) < 2009;
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010' );
SELECT id, name, age FROM visitor WHERE id IN ( SELECT visitor_id FROM visit GROUP BY visitor_id HAVING COUNT(visitor_id) > 1 );
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
SELECT museum.museum_id, museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY visit.museum_id ORDER BY COUNT(visit.museum_id) DESC LIMIT 1;
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit);
SELECT visitor.name, visitor.age FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit);
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;
SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE level_of_membership = 1;
SELECT name FROM visitor WHERE id IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009) AND id IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011);
SELECT COUNT(DISTINCT id) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 );
SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;
SELECT COUNT(DISTINCT player_id) as total_players FROM players;
SELECT COUNT(DISTINCT player_id) as total_players FROM players;
SELECT COUNT(match_num) FROM matches;
SELECT COUNT(DISTINCT match_num) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) AS highest_rank FROM matches;
SELECT MIN(loser_rank) FROM matches;
SELECT COUNT(DISTINCT(country_code)) FROM players;
SELECT count(distinct country_code) as distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016);
SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name FROM players WHERE players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open');
SELECT players.first_name, players.country_code FROM players WHERE player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' ) INTERSECT SELECT first_name, country_code FROM players WHERE player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' );
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT players.first_name || " " || players.last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_names FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings);
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(year) FROM ( SELECT year, COUNT(match_num) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1 );
SELECT winner_name, winner_rank_points FROM matches WHERE winner_name = ( SELECT winner_name FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(winner_id) DESC LIMIT 1);
SELECT winner_name FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open') AND tourney_name = 'Australian Open';
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id;
SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT players.first_name, SUM(ranking_points) as total_ranking_points FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.player_id;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT country_code, COUNT(player_id) as number_of_players FROM players GROUP BY country_code;
SELECT COUNT(player_id), country_code FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, SUM(tours) AS total_number_of_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT COUNT(match_num), year FROM matches GROUP BY year;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches));
SELECT COUNT(*), hand FROM players GROUP BY hand;
SELECT COUNT(player_id), hand FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death, MIN(killed) AS min_death FROM death;
SELECT AVG(injured) FROM death;
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type LIKE '%Brig%');
SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY death.caused_by_ship_id ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT battle.id) FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = '225' );
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta';
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel');
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM addresses;
SELECT line_1, line_2 FROM addresses;
SELECT COUNT(course_id) FROM courses;
SELECT count(distinct course_id) FROM courses;
SELECT courses.course_description FROM courses WHERE courses.course_name = 'math';
SELECT course_description FROM courses WHERE course_name = 'math';
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';
SELECT department_name, department_id FROM departments WHERE department_id = ( SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1 );
SELECT department_id, department_name FROM departments WHERE department_id = ( SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1 );
SELECT COUNT(DISTINCT department_id) FROM departments;
SELECT COUNT(DISTINCT Department_Id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;
SELECT count(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'engineering' );
SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) <= 2);
SELECT course_id, course_name FROM courses WHERE course_id IN (SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) < 2);
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT semesters.semester_id, semesters.semester_name FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY student_enrolment.semester_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT departments.department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id, student_enrolment.semester_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelor';
SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelor';
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1 );
SELECT degree_program_id, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1 );
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) as number_of_enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id) as number_of_enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);
SELECT DISTINCT course_name FROM courses WHERE course_id IN (SELECT DISTINCT course_id FROM student_enrolment_courses);
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses);
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT(student_enrolment_courses.student_course_id) DESC LIMIT 1;
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1;
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'NorthCarolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment);
SELECT students.last_name FROM students, addresses WHERE students.current_address_id = addresses.address_id AND addresses.state_province_county = 'NorthCarolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment);
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2;
SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2);
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM students );
SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students) LIMIT 1;
SELECT first_name, middle_name, last_name FROM students WHERE date_left = (SELECT MIN(date_left) FROM students);
SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id JOIN addresses AS a2 ON students.current_address_id = a2.address_id WHERE students.permanent_address_id <> students.current_address_id;
SELECT first_name FROM students WHERE permanent_address_id != current_address_id;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM students JOIN addresses ON students.current_address_id = addresses.address_id GROUP BY students.current_address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
SELECT MAX(address_id), line_1, line_2 FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION ALL SELECT permanent_address_id FROM students) GROUP BY address_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM transcripts;
SELECT datetime( AVG(strftime('%s', transcript_date)), 'unixepoch') as average_transcript_date FROM transcripts;
SELECT MIN(transcript_date) AS date, other_details FROM transcripts;
SELECT MIN(transcript_date), other_details FROM transcripts;
SELECT COUNT(transcript_id) FROM transcripts;
SELECT COUNT(*) FROM transcripts;
SELECT MAX(transcript_date) FROM transcripts;
SELECT MAX(transcript_date) FROM transcripts;
SELECT MAX(course_count) AS max_count, student_course_id FROM (SELECT student_course_id, COUNT(transcript_id) AS course_count FROM transcript_contents GROUP BY student_course_id) as course_counts;
SELECT student_course_id, COUNT(transcript_id) AS occurrences FROM transcript_contents GROUP BY student_course_id ORDER BY occurrences DESC LIMIT 1;
SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date ORDER BY COUNT(transcript_contents.transcript_id) ASC LIMIT 1;
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT(transcript_contents.transcript_id) ASC LIMIT 1;
SELECT semester_name FROM semesters WHERE semester_id IN ( SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master' ) ) AND semester_id IN ( SELECT semester_id FROM student_enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor' ) );
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor');
SELECT COUNT(DISTINCT current_address_id) FROM students;
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM addresses WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students);
SELECT * FROM students ORDER BY last_name DESC;
SELECT other_student_details FROM students ORDER BY last_name DESC, first_name DESC;
SELECT section_description FROM sections WHERE section_name = 'h';
SELECT section_description FROM sections WHERE section_name = 'h';
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582';
SELECT title FROM cartoon ORDER BY title ASC;
SELECT title FROM cartoon ORDER BY title ASC;
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones';
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';
SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM cartoon WHERE written_by LIKE '%Joseph Kuhr%';
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;
SELECT title FROM cartoon WHERE directed_by = "Ben Jones" OR directed_by = "Brandon Vietti";
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';
SELECT country, COUNT(id) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT country, COUNT(id) FROM tv_channel GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM tv_channel WHERE Language = 'English';
SELECT COUNT(DISTINCT id) FROM tv_channel WHERE Language = 'English';
SELECT language, COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) LIMIT 1;
SELECT language, COUNT(tv_channel.id) FROM tv_channel GROUP BY language ORDER BY COUNT(tv_channel.id) LIMIT 1;
SELECT language, COUNT(tv_channel.id) FROM tv_channel GROUP BY tv_channel.language;
SELECT language, COUNT(tv_channel.id) FROM tv_channel GROUP BY tv_channel.language;
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.title = 'The Rise of the Blue Beetle!';
SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');
SELECT Title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';
SELECT episode FROM tv_series ORDER BY CAST(tv_series.rating AS REAL);
SELECT episode FROM tv_series ORDER BY CAST(rating AS REAL) DESC;
SELECT episode, rating FROM tv_series ORDER BY CAST(rating AS REAL) DESC LIMIT 3;
SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;
SELECT MIN(share) AS minimum_share, MAX(share) AS maximum_share FROM tv_series;
SELECT MAX(share), MIN(share) FROM tv_series;
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';
SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = 'A Love of a Lifetime';
SELECT series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE episode = 'A Love of a Lifetime';
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');
SELECT COUNT(id), directed_by FROM cartoon GROUP BY directed_by;
SELECT directed_by, COUNT(id) AS num_cartoons_created FROM cartoon GROUP BY directed_by;
SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon);
SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon);
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes';
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = 'yes';
SELECT tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';
SELECT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');
SELECT DISTINCT country FROM tv_channel WHERE country NOT IN ( SELECT country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.written_by = 'Todd Casey' );
SELECT country FROM tv_channel WHERE country NOT IN ( SELECT country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE written_by = 'Todd Casey' );
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by LIKE '%Ben Jones%' OR cartoon.directed_by LIKE '%Michael Chang%';
SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' INTERSECT SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang' );
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';
SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language <> 'English';
SELECT id FROM tv_channel GROUP BY country HAVING COUNT(id) > 2;
SELECT id FROM tv_channel WHERE id IN ( SELECT channel FROM cartoon GROUP BY channel HAVING COUNT(channel) > 2 ) OR id IN ( SELECT channel FROM tv_series GROUP BY channel HAVING COUNT(channel) > 2 );
SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');
SELECT package_option FROM tv_channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' );
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' );
SELECT COUNT(DISTINCT poker_player_id) FROM poker_player;
SELECT COUNT(DISTINCT poker_player.poker_player_id) FROM poker_player;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT final_table_made, best_finish FROM poker_player;
SELECT final_table_made, best_finish FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT AVG(earnings) FROM poker_player;
SELECT MAX(money_rank) FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(money_rank) FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id;
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id;
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000;
SELECT people.Name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.Earnings > 300000;
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made;
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.final_table_made ASC;
SELECT MIN(people.birth_date) FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE earnings = (SELECT MIN(earnings) FROM poker_player);
SELECT birth_date FROM people WHERE people_id = ( SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player) );
SELECT money_rank FROM poker_player WHERE poker_player.people_id = (SELECT people_id FROM people WHERE height = (SELECT MAX(height) FROM people));
SELECT MAX(poker_player.money_rank) AS money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height = (SELECT MAX(height) FROM people);
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC;
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT Nationality, COUNT(People_id) FROM people GROUP BY Nationality;
SELECT nationality, COUNT(people_id) AS num_people FROM people GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(people_id) >= 2;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(people_id) >= 2;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name FROM people WHERE nationality != 'Russia';
SELECT name FROM people WHERE Nationality != 'Russia';
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MIN(area_code) AS min_area_code, MAX(area_code) AS max_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM votes;
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(vote_id) >= 2);
SELECT contestants.contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;
SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);
SELECT MAX(area_code) FROM ( SELECT area_code_state.area_code, COUNT(votes.vote_id) AS total_votes FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY total_votes DESC LIMIT 1 ) counter;
SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling');
SELECT area_code FROM area_code_state JOIN votes ON votes.state = area_code_state.state JOIN contestants ON contestants.contestant_number = votes.contestant_number WHERE contestants.contestant_name = 'Kelly Clauss' INTERSECT SELECT area_code FROM area_code_state JOIN votes ON votes.state = area_code_state.state JOIN contestants ON contestants.contestant_number = votes.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';
SELECT name FROM country WHERE IndepYear > 1950 AND IndepYear IS NOT NULL;
SELECT name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT continent FROM country WHERE name = 'Anguilla';
SELECT region FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Kabul';
SELECT region FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Kabul';
SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT region, population FROM country WHERE name = 'Angola';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';
SELECT name FROM country WHERE lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia');
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE continent = 'Asia';
SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%';
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform LIKE '%Republic%';
SELECT SUM(SurfaceArea) FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT SUM(population) FROM city WHERE district = 'Gelderland';
SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';
SELECT AVG(gnp) as mean_gnp, SUM(population) as total_population FROM country WHERE governmentform = 'US Territory';
SELECT COUNT(DISTINCT language) AS unique_languages FROM countrylanguage;
SELECT COUNT(DISTINCT language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT COUNT(Language) FROM countrylanguage WHERE countrycode = ( SELECT code FROM country WHERE name = 'Aruba' );
SELECT COUNT(`countrylanguage`.`Language`) FROM countrylanguage WHERE countrycode = ( SELECT code FROM country WHERE name = 'Aruba' );
SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.name = 'Afghanistan' AND isofficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';
SELECT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(language) DESC LIMIT 1;
SELECT (SELECT name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1);
SELECT continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1;
SELECT continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;
SELECT COUNT(*) FROM countrylanguage WHERE language = 'English' AND countrycode IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' );
SELECT COUNT(DISTINCT country.code) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language IN ('English', 'Dutch') GROUP BY country.code HAVING COUNT(DISTINCT countrylanguage.language) = 2;
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) INTERSECT SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' );
SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) INTERSECT SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' );
SELECT country.Name FROM country WHERE country.Code IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' ) INTERSECT SELECT country.Name FROM country WHERE country.Code IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'French' AND cl.IsOfficial = 'T' );
SELECT country.name FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') INTERSECT SELECT country.name FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French' AND isofficial = 'T');
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language LIKE '%Chinese%';
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');
SELECT DISTINCT region FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch' );
SELECT DISTINCT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('Dutch', 'English');
SELECT Name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T');
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T';
SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1;
SELECT language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE continent = 'Asia' GROUP BY language ORDER BY COUNT(DISTINCT country.code) DESC LIMIT 1;
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.GovernmentForm LIKE '%Republic%' GROUP BY language HAVING COUNT(DISTINCT country.code) = 1;
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.GovernmentForm LIKE '%Republic%' GROUP BY language HAVING COUNT(countrylanguage.CountryCode) = 1;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' ORDER BY city.population DESC LIMIT 1;
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country WHERE continent = 'Asia');
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T');
SELECT AVG(LifeExpectancy) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE language = 'English' AND isofficial = 'F';
SELECT SUM(Population) FROM country WHERE code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT SUM(country.Population) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English';
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = ( SELECT code FROM country WHERE headofstate = 'Beatrix' );
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix');
SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 AND isofficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE country.indepyear < 1930 AND countrylanguage.isofficial = 'T';
SELECT name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT name FROM country WHERE continent = 'Africa' AND population < ALL (SELECT population FROM country WHERE continent = 'Asia');
SELECT name FROM country WHERE continent = 'Africa' AND population < ( SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa');
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT countrycode FROM countrylanguage WHERE language != 'English';
SELECT countrycode FROM countrylanguage WHERE language != 'English';
SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language != 'English' OR countrylanguage.isofficial != 'T') AND country.governmentform NOT LIKE '%Republic%';
SELECT country.code FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English' AND country.governmentform NOT LIKE '%Republic%';
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language = 'English' AND countrylanguage.isofficial = 'F';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);
SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT country.Name, COUNT(countrylanguage.Language) as num_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT governmentform, SUM(population) FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population) FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT AVG(LifeExpectancy) AS avg_life_expectancy, SUM(Population) AS total_population, Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT continent, SUM(population) as total_population, AVG(lifeexpectancy) as average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;
SELECT name FROM country ORDER BY population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT name FROM country ORDER BY population LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;
SELECT SUM(population), AVG(surfacearea) FROM country WHERE region = 'North America' AND surfacearea > 3000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;
SELECT MAX(language) AS language FROM countrylanguage GROUP BY countrycode;
SELECT countrylanguage.countrycode, language FROM countrylanguage JOIN country ON country.code = countrylanguage.countrycode WHERE (countrylanguage.countrycode, countrylanguage.percentage) IN (SELECT countrycode, MAX(percentage) FROM countrylanguage GROUP BY countrycode);
SELECT COUNT(DISTINCT country.code) FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode HAVING percentage = MAX(percentage) );
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode);
SELECT country.code FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;
SELECT code FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode HAVING MAX(percentage) );
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT name FROM conductor ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;
SELECT name FROM conductor WHERE nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM show;
SELECT AVG(attendance) FROM show;
SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';
SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';
SELECT COUNT(DISTINCT conductor.nationality) FROM conductor;
SELECT COUNT(DISTINCT conductor.Nationality) as num_diff_nationalities FROM conductor;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;
SELECT name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra) > 1;
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(orchestra.orchestra_id) > 1;
SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;
SELECT name FROM conductor WHERE conductor_id = ( SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(orchestra_id) DESC LIMIT 1 );
SELECT name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008 );
SELECT Name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company;
SELECT COUNT(*) as num_orchestras, record_company FROM orchestra GROUP BY record_company;
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(major_record_format) ASC;
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) DESC;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');
SELECT COUNT(DISTINCT orchestra) FROM orchestra WHERE major_record_format LIKE '%CD%' OR major_record_format LIKE '%DVD%';
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(performance_id) > 1);
SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(performance_id) > 1);
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(id) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade FROM highschooler;
SELECT grade	FROM highschooler;
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;
SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;
SELECT COUNT(id), grade FROM highschooler GROUP BY grade;
SELECT COUNT(id), grade FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(id) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(id) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;
SELECT friend.student_id, COUNT(friend.friend_id) FROM friend GROUP BY friend.student_id;
SELECT highschooler.id, COUNT(friend.friend_id) as num_of_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY friend.student_id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;
SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;
SELECT name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(friend.student_id) >= 3;
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(student_id) >= 3);
SELECT name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE highschooler.name = 'Kyle' ORDER BY name;
SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN highschooler AS kyle ON kyle.id = friend.student_id WHERE kyle.name = 'Kyle';
SELECT count(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT count(friend_id) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (SELECT student_id FROM friend);
SELECT Highschooler.ID FROM highschooler WHERE highschooler.ID NOT IN (SELECT friend.student_id FROM friend);
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend);
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend);
SELECT id FROM highschooler INTERSECT SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes;
SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes;
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT liked_id FROM likes);
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT liked_id FROM likes);
SELECT COUNT(liked_id) as like_count, student_id FROM likes GROUP BY student_id;
SELECT student_id, COUNT( * ) FROM likes GROUP BY student_id;
SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY likes.liked_id;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.id = Likes.liked_id GROUP BY Highschooler.id;
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY highschooler.id ORDER BY COUNT (likes.liked_id) DESC LIMIT 1;
SELECT name FROM highschooler WHERE id IN ( SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(liked_id) DESC LIMIT 1 );
SELECT Highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;
SELECT Highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id WHERE highschooler.grade > 5 GROUP BY highschooler.id HAVING COUNT(friend.friend_id) >= 2;
SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id HAVING highschooler.grade > 5 AND COUNT(friend.student_id) >= 2;
SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT count(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade) FROM highschooler AS h WHERE h.id IN (SELECT f.student_id FROM friend AS f);
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT state FROM owners INTERSECT SELECT state FROM professionals;
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals);
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT AVG(CAST(dogs.age AS NUMERIC)) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2 );
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(professional_id) > 2 );
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000);
SELECT name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id HAVING SUM(treatments.cost_of_treatment) <= 1000;
SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs;
SELECT first_name FROM owners UNION SELECT first_name FROM professionals EXCEPT SELECT name FROM dogs;
SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (SELECT professional_id FROM treatments WHERE treatments.professional_id = professionals.professional_id AND treatments.dog_id IS NOT NULL)
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(professional_id) >= 2);
SELECT professional_id AS id, role_code AS role, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) >= 2 );
SELECT breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breed_name ORDER BY COUNT(dog_id) DESC LIMIT 1;
SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(dog_id) DESC LIMIT 1);
SELECT owner_id, last_name FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs WHERE owner_id IN ( SELECT owner_id FROM dogs WHERE owner_id IN ( SELECT owner_id FROM dogs WHERE owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1 ) ) ) );
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;
SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1;
SELECT owner_id, zip_code FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments GROUP BY dog_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1 ) );
SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT first_name, last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT first_name, last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);
SELECT date_of_treatment, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;
SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT Dogs.name, Treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY Dogs.name HAVING COUNT(DISTINCT Dogs.breed_code) = ( SELECT COUNT(*) as cnt FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY cnt LIMIT 1 );
SELECT first_name, name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE state = 'Virginia';
SELECT first_name, name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE state = 'Virginia';
SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);
SELECT owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM dogs);
SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs));
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT date_arrived, date_departed FROM dogs;
SELECT date_arrived, date_departed FROM dogs;
SELECT COUNT(DISTINCT treatments.dog_id) FROM treatments;
SELECT COUNT(DISTINCT treatments.dog_id) FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT COUNT(DISTINCT professional_id) FROM treatments;
SELECT city, role_code, street, state FROM professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';
SELECT COUNT(dog_id) FROM dogs WHERE CAST(age AS DECIMAL) < (SELECT AVG(CAST(age AS DECIMAL)) FROM dogs);
SELECT COUNT(dog_id) FROM dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM dogs);
SELECT MAX(cost_of_treatment) FROM treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM treatments);
SELECT cost_of_treatment FROM treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM treatments);
SELECT COUNT(DISTINCT dog_id) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments);
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs WHERE abandoned_yn = '0');
SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);
SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';
SELECT AVG(age) FROM dogs;
SELECT AVG(CAST(age AS INTEGER)) FROM dogs;
SELECT MAX(CAST(`age` AS UNSIGNED)) AS "Oldest Dog Age" FROM dogs;
SELECT MAX(age) FROM dogs;
SELECT charge_type, charge_amount FROM charges;
SELECT charge_type, charge_amount FROM charges
SELECT MAX(charge_amount) FROM charges;
SELECT MAX(charge_amount) FROM charges;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT email_address, cell_number, home_phone FROM professionals;
SELECT breed_name, size_description FROM breeds CROSS JOIN sizes;
SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT COUNT(singer_id) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE citizenship <> 'France';
SELECT name FROM singer WHERE citizenship != 'France';
SELECT name FROM singer WHERE birth_year = 1948.0 OR birth_year = 1949.0;
SELECT singer.name FROM singer WHERE birth_year = 1948.0 OR birth_year = 1949.0;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT citizenship, COUNT(singer_id) FROM singer GROUP BY citizenship;
SELECT citizenship, COUNT(singer_id) FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;
SELECT singer.citizenship, MAX(singer.net_worth_millions) FROM singer GROUP BY singer.citizenship;
SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1);
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1);
SELECT name, SUM(sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.singer_id;
SELECT singer.Name, SUM(song.Sales) as total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);
SELECT name from singer where singer_id not in (select singer_id from song);
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT COUNT(*) FROM other_available_features;
SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon');
SELECT property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code;
SELECT property_name FROM properties WHERE property_type_code IN ('House', 'Apartment') AND room_count > 1;
