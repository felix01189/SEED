SELECT COUNT(club_id) FROM club;
SELECT COUNT(DISTINCT club_id) FROM club;
SELECT name FROM club ORDER BY name ASC;
SELECT name FROM club ORDER BY name ASC;
SELECT manager, captain FROM club;
SELECT manager, captain FROM club;
SELECT name FROM club WHERE manufacturer != 'Nike';
SELECT name FROM club WHERE manufacturer <> 'Nike';
SELECT name FROM player ORDER BY wins_count ASC;
SELECT name FROM player ORDER BY wins_count ASC;
SELECT name FROM player ORDER BY earnings DESC LIMIT 1;
SELECT name FROM player ORDER BY earnings DESC LIMIT 1;
SELECT DISTINCT country FROM player WHERE earnings > 1200000;
SELECT country FROM player WHERE earnings > 1200000;
SELECT country FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1;
SELECT country FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1;
SELECT player.name, club.name FROM player JOIN club ON player.club_id = club.club_id;
SELECT player.name, club.name FROM player JOIN club ON player.club_id = club.club_id;
SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2);
SELECT DISTINCT club.name FROM club JOIN player ON club.club_id = player.club_id WHERE player.wins_count > 2;
SELECT name FROM player WHERE club_id = (SELECT club_id FROM club WHERE manager = 'Sam Allardyce');
SELECT player.name FROM player JOIN club ON player.club_id = club.club_id WHERE club.manager = 'Sam Allardyce';
SELECT club.name FROM club JOIN player ON player.club_id = club.club_id GROUP BY club.name ORDER BY AVG(player.earnings) DESC;
SELECT club.name FROM club JOIN player ON club.club_id = player.club_id GROUP BY club.name ORDER BY AVG(player.earnings) DESC;
SELECT manufacturer, COUNT(club_id) FROM club GROUP BY manufacturer;
SELECT manufacturer, COUNT(club_id) FROM club GROUP BY manufacturer;
SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY count(*) DESC LIMIT 1;
SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(DISTINCT club_id) > 1;
SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(DISTINCT club_id) > 1;
SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1;
SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1;
SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);
SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);
SELECT Country FROM Player WHERE Earnings > 1400000 UNION SELECT Country FROM Player WHERE Earnings < 1100000;
SELECT country FROM player GROUP BY country HAVING SUM(CASE WHEN earnings > 1400000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN earnings < 1100000 THEN 1 ELSE 0 END) > 0;
SELECT COUNT(DISTINCT country) FROM player;
SELECT COUNT(DISTINCT country) FROM player;
SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe');
SELECT earnings FROM player WHERE country = 'Australia' OR country = 'Zimbabwe';
SELECT customer_id, customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2 ) AND customer_id IN ( SELECT customer_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) >= 3 );
SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customers.customer_id, customers.customer_first_name, customers.customer_last_name HAVING COUNT(orders.order_id) > 2 AND COUNT(order_items.order_item_id) >= 3;
SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.order_item_id) FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY Orders.order_id;
SELECT COUNT(order_items.product_id) as num_products, orders.order_status_code, orders.order_id FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT MIN(date_order_placed) FROM orders WHERE order_id IN ( SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1 );
SELECT MIN(date_order_placed) FROM orders; SELECT date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id HAVING COUNT(order_item_id) > 1;
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);
SELECT product_id, product_name, product_price, product_color FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(product_id) >= 2 );
SELECT product_id, product_name, product_price, product_color FROM products WHERE product_id IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2 );
SELECT Orders.order_id, Orders.date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(order_items.product_id) >= 2;
SELECT order_id, date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) >= 2);
SELECT Products.product_id, Products.product_name, Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id ORDER BY COUNT(Order_Items.product_id) DESC LIMIT 1;
SELECT products.product_id, products.product_name, products.product_price FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id ORDER BY COUNT(order_items.product_id) DESC LIMIT 1;
SELECT order_id, SUM(product_price) AS total_product_price FROM order_items JOIN products ON order_items.product_id = products.product_id GROUP BY order_id ORDER BY total_product_price LIMIT 1;
SELECT orders.order_id, SUM(products.product_price) AS total_cost FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id ORDER BY total_cost LIMIT 1;
SELECT MAX(payment_method_code) FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1;
SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT customers.gender_code, COUNT(order_items.product_id) FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customers.gender_code;
SELECT customers.gender_code, COUNT(products.product_id) FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY customers.gender_code;
SELECT customers.gender_code, COUNT(orders.order_id) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.gender_code;
SELECT customers.gender_code, COUNT(orders.order_id) as order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.gender_code;
SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, customer_payment_methods.payment_method_code FROM customers JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id;
SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, customer_payment_methods.payment_method_code FROM customers JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id;
SELECT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices JOIN shipments ON invoices.invoice_number = shipments.invoice_number;
SELECT invoice_status_code, invoice_date, shipment_date FROM invoices JOIN shipments ON invoices.invoice_number = shipments.invoice_number;
SELECT products.product_name, shipments.shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT products.product_name, shipments.shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipments.shipment_id = shipment_items.shipment_id;
SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipments.shipment_id = shipment_items.shipment_id;
SELECT Products.product_name, Products.product_color FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT products.product_name, products.product_color FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT DISTINCT product_name, product_price, product_description FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE gender_code = 'Female';
SELECT Products.product_name, Products.product_price, Products.product_description FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.gender_code = 'Female';
SELECT invoices.invoice_status_code FROM invoices INNER JOIN shipments ON invoices.invoice_number = shipments.invoice_number WHERE shipments.order_id NOT IN (SELECT order_id FROM orders);
SELECT invoices.invoice_status_code FROM invoices WHERE invoices.invoice_number NOT IN (SELECT shipments.invoice_number FROM shipments);
SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_cost FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed;
SELECT orders.order_id, orders.date_order_placed, sum(products.product_price) as total_amount_paid FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id JOIN invoices ON orders.order_id = invoices.invoice_number WHERE invoices.invoice_status_code = 'Paid' GROUP BY orders.order_id, orders.date_order_placed;
SELECT COUNT(DISTINCT customer_id) FROM orders;
SELECT COUNT(DISTINCT customer_id) FROM orders;
SELECT COUNT(DISTINCT order_item_status_code) FROM order_items;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT payment_method_code) FROM customer_payment_methods;
SELECT COUNT(DISTINCT payment_method_code) FROM customer_payment_methods;
SELECT login_name, login_password FROM customers WHERE phone_number LIKE '+12%';
SELECT login_name, login_password FROM customers WHERE phone_number LIKE '+12%';
SELECT product_size FROM products WHERE product_name LIKE '%Dell%';
SELECT products.product_size FROM products WHERE product_name LIKE '%Dell%';
SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT COUNT(DISTINCT product_id) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(products.product_id) FROM products LEFT JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.product_id IS NULL;
SELECT COUNT(customer_id) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods);
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods);
SELECT order_status_code, date_order_placed FROM orders;
SELECT order_status_code, date_order_placed FROM orders;
SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA';
SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA';
SELECT Customers.customer_first_name, Products.product_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT customers.customer_first_name, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id;
SELECT count(order_item_id) FROM shipment_items;
SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id;
SELECT AVG(product_price) FROM products;
SELECT AVG(product_price) FROM Products;
SELECT AVG(products.product_price) as average_price FROM products INNER JOIN order_items ON products.product_id = order_items.product_id;
SELECT AVG(product_price) as average_price FROM order_items JOIN products ON order_items.product_id = products.product_id;
SELECT email_address, town_city, county FROM customers GROUP BY gender_code ORDER BY COUNT(gender_code) LIMIT 1;
SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT gender_code FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code ORDER BY COUNT(order_id) ASC LIMIT 1); 
SELECT date_order_placed FROM orders JOIN customers ON orders.customer_id = customers.customer_id JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id GROUP BY orders.order_id HAVING COUNT(DISTINCT customer_payment_methods.payment_method_code) >= 2;
SELECT date_order_placed FROM orders WHERE customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2);
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1;
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Products.product_id, Products.product_description FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id, products.product_description HAVING SUM(order_items.order_item_id) > 3;
SELECT product_id, product_description FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_item_id) > 3);
SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN ( SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(invoice_number) >= 2 );
SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(*) >= 2);
SELECT shipments.shipment_tracking_number, shipments.shipment_date FROM shipments;
SELECT shipment_tracking_number, shipment_date FROM shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products);
SELECT name FROM director WHERE age > (SELECT AVG(age) FROM director);
SELECT Name FROM director ORDER BY Age DESC LIMIT 1;
SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%';
SELECT COUNT(DISTINCT digital_terrestrial_channel) FROM channel;
SELECT title FROM program ORDER BY start_year DESC;
SELECT director.name FROM director JOIN program ON director.director_id = program.director_id GROUP BY director.director_id ORDER BY COUNT(program.program_id) DESC LIMIT 1;
SELECT director.name, director.age FROM program JOIN director ON program.director_id = director.director_id GROUP BY program.director_id ORDER BY COUNT(program.program_id) DESC LIMIT 1;
SELECT title FROM program ORDER BY start_year DESC LIMIT 1;
SELECT name, internet FROM channel WHERE channel_id IN ( SELECT channel_id FROM program GROUP BY channel_id HAVING COUNT(program_id) > 1 );
SELECT channel.name, COUNT(program.program_id) as num_programs FROM channel JOIN program ON program.channel_id = channel.channel_id GROUP BY channel.channel_id;
SELECT COUNT(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program);
SELECT director.name FROM director JOIN program ON director.director_id = program.director_id WHERE program.title = 'Dracula';
SELECT channel.name, channel.internet FROM channel JOIN director_admin ON channel.channel_id = director_admin.channel_id GROUP BY channel.channel_id ORDER BY COUNT(director_admin.director_id) DESC LIMIT 1;
SELECT name FROM director WHERE age BETWEEN 30 AND 60;
SELECT name FROM channel WHERE channel_id IN ( SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.age < 40 INTERSECT SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.age > 60 );
SELECT channel_id, name FROM channel WHERE channel_id NOT IN ( SELECT DISTINCT c.channel_id FROM channel c JOIN director_admin da ON c.channel_id = da.channel_id JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett' );
SELECT COUNT(DISTINCT radio_id) FROM radio;
SELECT transmitter FROM radio ORDER BY erp_kw ASC;
SELECT tv_show_name, original_airdate FROM tv_show;
SELECT city_channel.station_name FROM city_channel WHERE affiliation != 'ABC';
SELECT transmitter FROM radio WHERE CAST(erp_kw AS REAL) > 150 OR CAST(erp_kw AS REAL) < 30;
SELECT transmitter FROM radio WHERE ERP_kw = (SELECT MAX(CAST(ERP_kw AS REAL)) FROM radio);
SELECT AVG(CAST(ERP_kW AS REAL)) FROM radio;
SELECT affiliation, COUNT(id) FROM city_channel GROUP BY affiliation;
SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(id) > 3;
SELECT city, station_name FROM city_channel ORDER BY station_name ASC;
SELECT radio.transmitter, city_channel.city FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id;
SELECT radio.transmitter, city_channel.station_name FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id ORDER BY radio.ERP_kW DESC;
SELECT radio.transmitter, COUNT(city_channel_radio.city_channel_id) FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id GROUP BY radio.transmitter;
SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio);
SELECT model FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000);
SELECT model FROM vehicle WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1;
SELECT name FROM driver WHERE citizenship = 'United States';
SELECT name FROM driver WHERE citizenship = 'United States';
SELECT MAX(cnt) AS max_vehicle_count, driver_id FROM ( SELECT driver_id, COUNT(vehicle_id) AS cnt FROM vehicle_driver GROUP BY driver_id ) GROUP BY driver_id ORDER BY cnt DESC LIMIT 1;
SELECT driver_id, COUNT(vehicle_id) AS total_vehicles_driven FROM vehicle_driver GROUP BY driver_id ORDER BY total_vehicles_driven DESC LIMIT 1;
SELECT MAX(power), AVG(power) FROM vehicle WHERE builder = 'Zhuzhou';
SELECT max(power) as max_power, avg(power) as avg_power from vehicle where builder = "Zhuzhou";
SELECT vehicle.vehicle_id FROM vehicle INNER JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id GROUP BY vehicle.vehicle_id ORDER BY COUNT(vehicle_driver.vehicle_id) ASC LIMIT 1;
SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT top_speed, power FROM vehicle WHERE build_year = '1996';
SELECT top_speed, power FROM vehicle WHERE build_year = '1996';
SELECT build_year, model, builder FROM vehicle;
SELECT build_year, model, builder FROM vehicle
SELECT COUNT(DISTINCT driver_id) FROM vehicle_driver JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.build_year = '2012';
SELECT COUNT(DISTINCT driver.driver_id) FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.build_year = '2012';
SELECT COUNT(driver_id) FROM driver WHERE racing_series = 'NASCAR';
SELECT COUNT(*) FROM driver WHERE racing_series = 'NASCAR';
SELECT AVG(top_speed) from vehicle;
SELECT AVG(top_speed) FROM vehicle;
SELECT DISTINCT driver.name FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.power > 5000;
SELECT name FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.power > 5000;
SELECT model FROM vehicle WHERE CAST(total_production AS INT) > 100 OR top_speed > 150;
SELECT model FROM vehicle WHERE total_production > 100 OR top_speed > 150;
SELECT model, build_year FROM vehicle WHERE model LIKE '%DJ%';
SELECT model, build_year FROM vehicle WHERE model LIKE '%DJ%';
SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver);
SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver);
SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN ( SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) = 2 ) OR builder = 'Ziyang';
SELECT vehicle.vehicle_id, vehicle.model FROM vehicle JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id GROUP BY vehicle.vehicle_id, vehicle.model HAVING COUNT(vehicle_driver.driver_id) = 2 OR vehicle.builder = 'Ziyang';
SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN ( SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) > 2 ) OR vehicle_id IN ( SELECT vehicle_id FROM vehicle_driver JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon' );
SELECT vehicle.vehicle_id, vehicle.model FROM vehicle JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon' OR vehicle.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) > 2);
SELECT COUNT(vehicle_id) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle);
SELECT COUNT(vehicle_id) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle);
SELECT name FROM driver ORDER BY name ASC;
SELECT name FROM driver ORDER BY name ASC;
SELECT COUNT(driver_id), racing_series FROM driver GROUP BY racing_series;
SELECT racing_series, COUNT(driver_id) FROM driver GROUP BY racing_series;
SELECT name, citizenship FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.model = 'DJ1';
SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver JOIN vehicle ON vehicle.vehicle_id = vehicle_driver.vehicle_id WHERE model = 'DJ1');
SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver);
SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver);
SELECT count(*) FROM exams;
SELECT COUNT(exam_id) FROM exams;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC;
SELECT Exam_Name, Exam_Date FROM exams WHERE Subject_Code != 'Database';
SELECT exam_date, exam_name FROM exams WHERE subject_code != 'Database';
SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC;
SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC;
SELECT type_of_question_code, COUNT(*) as counts FROM questions GROUP BY type_of_question_code;
SELECT type_of_question_code, COUNT(question_id) FROM questions GROUP BY type_of_question_code;
SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal';
SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal';
SELECT COUNT(DISTINCT comments)FROM student_answers;
SELECT COUNT(DISTINCT comments) AS num_different_comments FROM student_answers;
SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(student_answer_text) DESC;
SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(student_answer_text) DESC;
SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id;
SELECT students.first_name, student_answers.date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id;
SELECT students.email_adress, student_answers.date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id ORDER BY student_answers.date_of_answer DESC;
SELECT student_answers.date_of_answer, students.email_adress FROM student_answers JOIN students ON student_answers.student_id = students.student_id ORDER BY student_answers.date_of_answer DESC;
SELECT assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) ASC LIMIT 1;
SELECT assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) LIMIT 1;
SELECT First_Name FROM students JOIN student_answers ON students.student_id = student_answers.student_id GROUP BY students.student_id HAVING COUNT(student_answers.student_answer_id) >= 2;
SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_id) >= 2);
SELECT valid_answer_text FROM valid_answers GROUP BY valid_answer_text ORDER BY COUNT(*) DESC LIMIT 1;
SELECT valid_answer_text FROM valid_answers GROUP BY valid_answer_text ORDER BY COUNT(*) DESC LIMIT 1;
SELECT last_name FROM students WHERE gender_mfu != 'M';
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT gender_mfu, COUNT(student_id) FROM students GROUP BY gender_mfu;
SELECT gender_mfu, COUNT(student_id) as num_students FROM students GROUP BY gender_mfu;
SELECT Last_Name FROM students WHERE Gender_MFU IN ('F', 'M');
SELECT last_name FROM students WHERE gender_mfu IN ('F', 'M');
SELECT first_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_answers);
SELECT first_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_answers);
SELECT student_answer_text FROM student_answers WHERE comments IN ('Normal', 'Absent') GROUP BY student_answer_text HAVING COUNT(DISTINCT comments) = 2;
SELECT student_answer_text FROM student_answers WHERE comments = 'Normal' INTERSECT SELECT student_answer_text FROM student_answers WHERE comments = 'Absent';
SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(question_id) >= 3;
SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(question_id) >= 3;
SELECT * FROM students;
SELECT student_id, first_name, middle_name, last_name FROM students;
SELECT COUNT(address_id) FROM addresses;
SELECT COUNT(DISTINCT address_id) FROM Addresses;
SELECT addresses.address_id, addresses.address_details FROM addresses;
SELECT address_id, address_details FROM addresses;
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM products;
SELECT product_id, product_type_code, product_name FROM products;
SELECT product_id, product_type_code, product_name FROM products;
SELECT product_price FROM products WHERE product_name = 'Monitor';
SELECT product_price FROM products WHERE product_name = 'Monitor';
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM products;
SELECT MIN(product_price) AS minimum_price, AVG(product_price) AS average_price, MAX(product_price) AS maximum_price FROM products;
SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes';
SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes';
SELECT COUNT(product_id) FROM products WHERE product_type_code = 'Hardware';
SELECT COUNT(product_id) FROM products WHERE product_type_code = 'Hardware';
SELECT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware');
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > ( SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware' );
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_name FROM products WHERE product_price = ( SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes' ) AND product_type_code = 'Clothes';
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1;
SELECT product_name FROM products ORDER BY product_price DESC;
SELECT products.product_name FROM products ORDER BY products.product_price DESC;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT products.product_type_code, COUNT(products.product_id) FROM products GROUP BY products.product_type_code;
SELECT product_type_code, COUNT(product_id) FROM products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code;
SELECT AVG(product_price), product_type_code FROM products GROUP BY product_type_code;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT products.product_type_code FROM products GROUP BY products.product_type_code ORDER BY COUNT(products.product_id) DESC LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(customer_id) FROM customers;
SELECT COUNT(customer_id) FROM customers;
SELECT customer_id, customer_name FROM customers;
SELECT customer_id, customer_name FROM customers;
SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = 'Jeromy';
SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM customers JOIN addresses ON customers.address_id = addresses.address_id WHERE customers.customer_name = 'Jeromy';
SELECT payment_method_code, COUNT(customer_id) FROM customers GROUP BY payment_method_code;
SELECT customers.payment_method_code, COUNT(customers.customer_id) FROM customers GROUP BY customers.payment_method_code;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1;
SELECT customer_name FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT customer_name FROM customers GROUP BY customer_name HAVING COUNT(payment_method_code) = ( SELECT COUNT(payment_method_code) FROM customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) LIMIT 1 );
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code FROM customers;
SELECT DISTINCT payment_method_code FROM customers;
SELECT product_id, product_type_code FROM products ORDER BY product_name;
SELECT product_id, product_type_code FROM products ORDER BY product_name ASC;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(product_id) LIMIT 1;
SELECT products.product_type_code FROM products GROUP BY products.product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(order_id) FROM customer_orders;
SELECT COUNT(order_id) FROM customer_orders;
SELECT customer_orders.order_id, customer_orders.order_date, customer_orders.order_status_code FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customers.customer_name = 'Jeromy';
SELECT customer_orders.order_id, customer_orders.order_date, customer_orders.order_status_code FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customers.customer_name = 'Jeromy';
SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) as num_orders FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;
SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) as number_of_orders FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id;
SELECT Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1;
SELECT customer_id, customer_name, customer_phone, customer_email FROM customers WHERE customer_id = ( SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1 );
SELECT order_status_code, COUNT(order_id) FROM customer_orders GROUP BY order_status_code;
SELECT COUNT(order_id), order_status_code FROM customer_orders GROUP BY order_status_code;
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT customer_id) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders);
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders);
SELECT product_name FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items );
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(order_quantity) FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE product_name = 'Monitor';
SELECT SUM(order_quantity) FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE product_name = 'Monitor';
SELECT COUNT(DISTINCT customers.customer_id) FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor';
SELECT COUNT(DISTINCT Customer_Orders.customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor';
SELECT COUNT(DISTINCT customer_id) FROM customer_orders;
SELECT COUNT(DISTINCT customer_orders.customer_id) FROM customer_orders;
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders);
SELECT customers.customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders;
SELECT customer_orders.order_date, customer_orders.order_id FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE CAST(order_items.order_quantity AS INTEGER) > 6 OR (SELECT COUNT(order_items.product_id) FROM order_items WHERE customer_orders.order_id = order_items.order_id) > 3;
SELECT customer_orders.order_id, customer_orders.order_date FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id GROUP BY customer_orders.order_id HAVING SUM(order_quantity) > 6 OR COUNT(product_id) > 3;
SELECT COUNT(building_id) FROM building;
SELECT COUNT(building_id) FROM building;
SELECT name FROM building ORDER BY number_of_stories ASC;
SELECT `Name` FROM `building` ORDER BY `Number_of_Stories` ASC;
SELECT address FROM building ORDER BY completed_year DESC;
SELECT address FROM building ORDER BY completed_year DESC;
SELECT MAX(number_of_stories) FROM building WHERE completed_year != 1980;
SELECT MAX(number_of_stories) from building where completed_year != 1980;
SELECT AVG(population) FROM region;
SELECT AVG(population) as average_population FROM region;
SELECT name FROM region ORDER BY name ASC;
SELECT region.name FROM region ORDER BY region.name ASC;
SELECT capital FROM region WHERE area > 10000;
SELECT capital FROM region WHERE area > 10000;
SELECT capital FROM region WHERE population = (SELECT MAX(population) FROM region);
SELECT region.capital FROM region WHERE population = (SELECT MAX(population) FROM region);
SELECT name FROM region ORDER BY area DESC LIMIT 5;
SELECT name FROM region ORDER BY area DESC LIMIT 5;
SELECT building.name, region.name FROM building JOIN region ON building.region_id = region.region_id;
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT region.name FROM region INNER JOIN building ON region.region_id = building.region_id GROUP BY region.name HAVING COUNT(building.building_id) > 1;
SELECT region.name FROM region JOIN building ON region.region_id = building.region_id GROUP BY region.name HAVING COUNT(building.building_id) > 1;
SELECT region.capital FROM region JOIN building ON region.region_id = building.region_id GROUP BY region.region_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region.name, region.capital FROM region JOIN building ON region.region_id = building.region_id GROUP BY building.region_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT building.address, region.capital FROM building JOIN region ON building.region_id = region.region_id;
SELECT building.address, region.name FROM building JOIN region ON building.region_id = region.region_id;
SELECT number_of_stories FROM building WHERE region_id = (SELECT region_id FROM region WHERE name = 'Abruzzo');
SELECT number_of_stories FROM building WHERE region_id IN (SELECT region_id FROM region WHERE name = 'Abruzzo');
SELECT completed_year, COUNT(building_id) FROM building GROUP BY completed_year;
SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year;
SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(building_id) DESC LIMIT 1;
SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(building_id) DESC LIMIT 1;
SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building);
SELECT DISTINCT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building);
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15;
SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories < 15;
SELECT DISTINCT address FROM building;
SELECT DISTINCT address FROM building;
SELECT completed_year FROM building ORDER BY number_of_stories DESC;
SELECT Completed_Year FROM building ORDER BY number_of_stories DESC;
SELECT * FROM channels ORDER BY channel_details ASC;
SELECT channel_details FROM channels ORDER BY channel_details ASC;
SELECT COUNT(service_id) FROM services;
SELECT COUNT(service_id) FROM services;
SELECT MAX(Analytical_Layer.Analytical_Layer_Type_Code) AS Most_Common_Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer.Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer.Analytical_Layer_Type_Code) DESC LIMIT 1;
SELECT MAX(analytical_layer_type_code) FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id JOIN customers ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details = 'Hardy Kutch';
SELECT services.service_details FROM customers_and_services JOIN customers ON customers_and_services.customer_id = customers.customer_id JOIN services ON customers_and_services.service_id = services.service_id WHERE customers.customer_details = 'Hardy Kutch';
SELECT service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id GROUP BY services.service_id HAVING COUNT(customer_interactions.service_id) > 3;
SELECT services.service_details FROM customer_interactions JOIN services ON customer_interactions.service_id = services.service_id GROUP BY customer_interactions.service_id HAVING COUNT(customer_interactions.service_id) > 3;
SELECT Customers.Customer_Details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id GROUP BY customers.customer_id ORDER BY COUNT(customer_interactions.service_id) DESC LIMIT 1;
SELECT Customers.Customer_Details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers_and_services.customer_id ORDER BY COUNT(customers_and_services.service_id) DESC LIMIT 1;
SELECT customers.customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers.customer_id ORDER BY COUNT(DISTINCT customers_and_services.service_id) DESC LIMIT 1;
SELECT customers.customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id GROUP BY customers_and_services.customer_id ORDER BY COUNT(DISTINCT customers_and_services.service_id) DESC LIMIT 1;
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services);
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services);
SELECT customer_details FROM customers_and_services JOIN customers ON customers_and_services.customer_id = customers.customer_id GROUP BY customers.customer_id ORDER BY COUNT(customers_and_services.service_id) LIMIT 1;
SELECT customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN services ON customer_interactions.service_id = services.service_id GROUP BY customers.customer_id ORDER BY COUNT(customer_interactions.service_id) LIMIT 1;
SELECT COUNT(DISTINCT customers_and_services.customers_and_services_details) as distinct_customer_service_details FROM customers_and_services;
SELECT COUNT(customers.customer_details) + COUNT(services.service_details) AS total_details FROM customers, services;
SELECT customer_id FROM customers WHERE customer_details LIKE '%Kutch%';
SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%';
SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch') UNION SELECT service_id FROM customer_interactions WHERE services_and_channels_details = 'good');
SELECT services.service_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN services ON customer_interactions.service_id = services.service_id WHERE customers.customer_details = 'Hardy Kutch' OR customer_interactions.services_and_channels_details = 'good';
SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON cs.customer_id = ci.customer_id AND cs.service_id = ci.service_id JOIN customers c ON cs.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch' AND ci.services_and_channels_details = 'bad';
SELECT services.service_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id JOIN services ON customers_and_services.service_id = services.service_id JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id AND customers_and_services.service_id = customer_interactions.service_id WHERE customers.customer_details = 'Hardy Kutch' AND customer_interactions.services_and_channels_details = 'bad';
SELECT services.service_details FROM customer_interactions JOIN channels ON customer_interactions.channel_id = channels.channel_id JOIN services ON customer_interactions.service_id = services.service_id WHERE channels.channel_details = '15 ij';
SELECT service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id JOIN channels ON customer_interactions.channel_id = channels.channel_id WHERE channels.channel_details = '15 ij';
SELECT customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id WHERE customer_interactions.status_code = 'Stuck' AND customer_interactions.services_and_channels_details = 'bad';
SELECT customers.customer_details FROM customer_interactions JOIN customers ON customer_interactions.customer_id = customers.customer_id WHERE customer_interactions.status_code = 'Stuck' AND customer_interactions.services_and_channels_details = 'bad';
SELECT COUNT(*) FROM integration_platform WHERE integration_platform_details = 'Success';
SELECT COUNT(DISTINCT Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'
SELECT customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN integration_platform ON customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id WHERE integration_platform.integration_platform_details = 'Fail';
SELECT customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN integration_platform ON customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id WHERE integration_platform.integration_platform_details = 'Fail';
SELECT services.service_id, services.service_details FROM services WHERE services.service_id NOT IN (SELECT service_id FROM customer_interactions) AND services.service_id NOT IN (SELECT service_id FROM customers_and_services);
SELECT services.service_details FROM services WHERE services.service_id NOT IN (SELECT service_id FROM customers_and_services);
SELECT analytical_layer_type_code, COUNT(analytical_layer_type_code) FROM analytical_layer GROUP BY analytical_layer_type_code;
SELECT analytical_layer_type_code, COUNT(*) FROM analytical_layer GROUP BY analytical_layer_type_code;
SELECT services.service_details FROM customers_and_services JOIN services ON customers_and_services.service_id = services.service_id WHERE customers_and_services.customers_and_services_details = 'Unsatisfied';
SELECT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id WHERE customers_and_services_details = 'Unsatisfied';
SELECT COUNT(*) FROM vehicles;
SELECT COUNT(id) FROM vehicles;
SELECT Vehicles.name FROM vehicles ORDER BY vehicles.model_year DESC;
SELECT name FROM vehicles ORDER BY model_year DESC;
SELECT DISTINCT type_of_powertrain FROM vehicles;
SELECT DISTINCT type_of_powertrain FROM vehicles;
SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014);
SELECT Vehicles.name, Vehicles.type_of_powertrain, Vehicles.annual_fuel_cost FROM vehicles WHERE vehicles.model_year IN (2013, 2014);
SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year = 2013;
SELECT type_of_powertrain FROM vehicles WHERE model_year = 2013 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014;
SELECT type_of_powertrain, COUNT(id) FROM vehicles GROUP BY type_of_powertrain;
SELECT COUNT(*), type_of_powertrain FROM vehicles GROUP BY type_of_powertrain;
SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles;
SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) from vehicles;
SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;
SELECT Vehicles.name, Vehicles.model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;
SELECT type_of_powertrain, AVG(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) >= 2;
SELECT type_of_powertrain, AVG(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) >= 2;
SELECT name, age, membership_credit FROM customers;
SELECT name, age, membership_credit FROM customers;
SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers);
SELECT Customers.name, Customers.age FROM Customers ORDER BY membership_credit DESC LIMIT 1;
SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers);
SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers);
SELECT * FROM discount;
SELECT * FROM discount;
SELECT vehicles.name, SUM(renting_history.total_hours) FROM vehicles INNER JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name;
SELECT name, SUM(total_hours) FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY name;
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history);
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history);
SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2);
SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2);
SELECT name, model_year FROM vehicles WHERE id = ( SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name, model_year FROM vehicles WHERE id = ( SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT Vehicles.name FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id ORDER BY renting_history.total_hours DESC;
SELECT Vehicles.name FROM renting_history JOIN vehicles ON renting_history.vehicles_id = vehicles.id ORDER BY renting_history.total_hours DESC;
SELECT name FROM discount WHERE id = ( SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1 ); 
SELECT name FROM discount JOIN renting_history ON discount.id = renting_history.discount_id GROUP BY discount.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name, type_of_powertrain FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE total_hours > 30;
SELECT vehicles.name, vehicles.type_of_powertrain FROM renting_history JOIN vehicles ON renting_history.vehicles_id = vehicles.id WHERE renting_history.total_hours > 30;
SELECT avg(city_fuel_economy_rate), avg(highway_fuel_economy_rate), type_of_powertrain FROM vehicles GROUP BY type_of_powertrain;
SELECT AVG(city_fuel_economy_rate), AVG(highway_fuel_economy_rate), type_of_powertrain FROM vehicles GROUP BY type_of_powertrain;
SELECT AVG(amount_of_loan) FROM student_loans;
SELECT AVG(amount_of_loan) FROM student_loans;
SELECT Students.student_id, Students.bio_data FROM students JOIN classes ON students.student_id = classes.student_id JOIN detention ON students.student_id = detention.student_id GROUP BY students.student_id, Students.bio_data HAVING COUNT(DISTINCT classes.class_id) >= 2 AND COUNT(DISTINCT detention.detention_id) < 2;
SELECT bio_data, student_id FROM students WHERE student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(student_id) >= 2) OR student_id IN (SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(student_id) < 2);
SELECT teachers.teacher_details FROM teachers WHERE teacher_id IN ( SELECT teacher_id FROM classes WHERE class_details LIKE '%data%' EXCEPT SELECT teacher_id FROM classes WHERE class_details LIKE 'net%' );
SELECT teachers.teacher_details FROM teachers INNER JOIN classes ON teachers.teacher_id = classes.teacher_id WHERE class_details LIKE '%data%' EXCEPT SELECT teachers.teacher_details FROM teachers INNER JOIN classes ON teachers.teacher_id = classes.teacher_id WHERE class_details LIKE 'net%';
SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention) AND student_id NOT IN (SELECT student_id FROM student_loans);
SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention) AND student_id NOT IN (SELECT student_id FROM student_loans);
SELECT student_loans.amount_of_loan, student_loans.date_of_loan FROM student_loans INNER JOIN achievements ON student_loans.student_id = achievements.student_id GROUP BY achievements.student_id HAVING COUNT(achievements.achievement_id) >= 2;
SELECT amount_of_loan, date_of_loan FROM student_loans WHERE student_id IN ( SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2 );
SELECT teacher_id, teacher_details FROM teachers WHERE teacher_id = ( SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1 );
SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = ( SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1 );
SELECT DISTINCT ref_detention_type.detention_type_description FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code;
SELECT DISTINCT detention.detention_summary, ref_detention_type.detention_type_description FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code;
SELECT students.bio_data, ref_address_types.address_type_description FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code;
SELECT Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM students INNER JOIN students_addresses ON students.student_id = students_addresses.student_id INNER JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code;
SELECT addresses.address_details, students.bio_data FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN addresses ON students_addresses.address_id = addresses.address_id;
SELECT students.bio_data, addresses.address_details FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN addresses ON students_addresses.address_id = addresses.address_id;
SELECT bio_data, date_of_transcript FROM students JOIN transcripts ON students.student_id = transcripts.student_id
SELECT bio_data, date_of_transcript FROM students JOIN transcripts ON students.student_id = transcripts.student_id;
SELECT COUNT(DISTINCT student_id), behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1;
SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) AS count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1;
SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(DISTINCT student_id) = 3 ORDER BY COUNT(*) DESC LIMIT 1) AND student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1));
SELECT students.bio_data, students.student_details FROM students JOIN behaviour_monitoring ON students.student_id = behaviour_monitoring.student_id GROUP BY behaviour_monitoring.behaviour_monitoring_details HAVING COUNT(behaviour_monitoring.student_id) = 3 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bio_data FROM students WHERE student_id IN ( SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1 );
SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1) ;
SELECT students.bio_data, student_events.event_date FROM students JOIN student_events ON students.student_id = student_events.student_id;
SELECT bio_data, event_date FROM students JOIN student_events ON students.student_id = student_events.student_id;
SELECT Count(DISTINCT `Student_Events`.`student_id`) AS student_count, `Student_Events`.`event_type_code`, `Ref_Event_Types`.`event_type_description` FROM student_events JOIN ref_event_types ON `Student_Events`.`event_type_code` = `Ref_Event_Types`.`event_type_code` GROUP BY `Student_Events`.`event_type_code` ORDER BY student_count DESC LIMIT 1;
SELECT ref_event_types.event_type_code, ref_event_types.event_type_description, COUNT(DISTINCT student_events.student_id) AS num_students FROM student_events JOIN ref_event_types ON student_events.event_type_code = ref_event_types.event_type_code GROUP BY ref_event_types.event_type_code ORDER BY COUNT(DISTINCT student_events.student_id) DESC LIMIT 1;
SELECT achievement_details, achievement_type_description FROM achievements JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code;
SELECT achievements.achievement_details, ref_achievement_type.achievement_type_description FROM achievements JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code;
SELECT COUNT(DISTINCT teacher_id) FROM teachers WHERE teacher_id IN (SELECT DISTINCT teacher_id from classes WHERE student_id NOT IN (SELECT student_id FROM achievements))
SELECT COUNT(DISTINCT teachers.teacher_id) FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN students ON classes.student_id = students.student_id WHERE NOT EXISTS ( SELECT 1 FROM achievements WHERE students.student_id = achievements.student_id );
SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts;
SELECT date_of_transcript, transcript_details FROM transcripts;
SELECT achievement_type_code, achievement_details, date_achievement FROM achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM achievements;
SELECT detention.datetime_detention_start, detention.datetime_detention_end FROM detention;
SELECT datetime_detention_start, datetime_detention_end FROM detention;
SELECT bio_data FROM students WHERE student_details LIKE '%Suite%';
SELECT bio_data FROM students WHERE student_details LIKE '%Suite%';
SELECT teachers.teacher_details, students.bio_data FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN students ON classes.student_id = students.student_id;
SELECT teachers.teacher_details, students.bio_data FROM classes JOIN teachers ON classes.teacher_id = teachers.teacher_id JOIN students ON classes.student_id = students.student_id
SELECT COUNT(class_id) AS num_courses, teacher_id FROM classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;
SELECT teacher_id, COUNT(class_id) as num_courses FROM classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;
SELECT MAX(course_count), student_id FROM (SELECT COUNT(class_id) as course_count, student_id FROM classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1);
SELECT student_id, COUNT ( class_id ) FROM classes GROUP BY student_id ORDER BY COUNT ( class_id ) DESC LIMIT 1;
SELECT student_id, student_details FROM students WHERE student_id IN ( SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) = 2 );
SELECT student_id, bio_data FROM students WHERE student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) = 2);
SELECT detention.detention_type_code, ref_detention_type.detention_type_description FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code GROUP BY detention.detention_type_code, ref_detention_type.detention_type_description ORDER BY COUNT(detention.detention_type_code) ASC LIMIT 1;
SELECT detention_type_code, detention_type_description FROM ref_detention_type WHERE detention_type_code IN ( SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_loans GROUP BY student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans));
SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans));
SELECT MIN(date_of_loan) AS earliest_date_of_loan FROM student_loans;
SELECT MIN(date_of_loan) AS earliest_date_of_loan FROM student_loans;
SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans));
SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans)); 
SELECT date_of_transcript FROM transcripts WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1);
SELECT MAX(date_of_transcript) FROM transcripts JOIN student_loans ON transcripts.student_id = student_loans.student_id WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans);
SELECT teacher_details FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN transcripts ON classes.student_id = transcripts.student_id WHERE transcripts.date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts);
SELECT teacher_details FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN (SELECT student_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)) earliest_transcript_student ON classes.student_id = earliest_transcript_student.student_id;
SELECT student_id, SUM(amount_of_loan) as total_loan FROM student_loans GROUP BY student_id;
SELECT student_id, SUM(amount_of_loan) AS total_loan FROM student_loans GROUP BY student_id;
SELECT students.student_id, students.bio_data, COUNT(classes.class_id) FROM students JOIN classes ON students.student_id = classes.student_id GROUP BY students.student_id, students.bio_data;
SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS num_courses FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id;
SELECT COUNT(DISTINCT student_id) FROM detention;
SELECT COUNT(DISTINCT detention.student_id) AS num_students_with_detention FROM detention;
SELECT address_type_code, address_type_description FROM ref_address_types WHERE address_type_code = (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT address_type_code, address_type_description FROM ref_address_types WHERE address_type_code = (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT student_events.student_id, students.bio_data FROM student_events JOIN students ON student_events.student_id = students.student_id WHERE student_events.student_id NOT IN (SELECT student_id FROM student_loans);
SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM student_events) AND student_id NOT IN (SELECT student_id FROM student_loans);
SELECT students_addresses.date_from, students_addresses.date_to FROM students_addresses WHERE student_id IN ( SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(student_id) = 2 );
SELECT date_from AS start_time, date_to AS end_time FROM students_addresses WHERE student_id IN ( SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(student_id) = 2 );
SELECT datetime_detention_start FROM Detention;
SELECT datetime_detention_start FROM Detention;
SELECT Name FROM Author;
SELECT Name FROM author;
SELECT name, address FROM client;
SELECT name, address FROM client;
SELECT title, isbn, saleprice FROM book;
SELECT title, isbn, saleprice FROM book;
SELECT COUNT(ISBN) FROM Book;
SELECT COUNT(DISTINCT ISBN) FROM book;
SELECT COUNT(DISTINCT Author.idAuthor) FROM Author;
SELECT COUNT(DISTINCT author) FROM author_book;
SELECT COUNT(IdClient) FROM Client;
SELECT COUNT(idclient) FROM client;
SELECT name, address FROM client ORDER BY name ASC;
SELECT name, address FROM client ORDER BY name ASC;
SELECT book.title, author.name FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor;
SELECT book.title, author.name FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor;
SELECT o.idorder, c.name FROM orders o JOIN client c ON o.idclient = c.idclient;
SELECT orders.idorder, client.name FROM orders JOIN client ON orders.idclient = client.idclient;
SELECT Author.Name, COUNT(Author_Book.ISBN) FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.idAuthor;
SELECT Author.Name, COUNT(Author_Book.Author) as Books_Written FROM Author JOIN Author_Book ON Author.idauthor = Author_Book.author GROUP BY Author_Book.Author;
SELECT book.ISBN, COUNT(books_order.IdOrder) as NumOrders FROM book LEFT JOIN books_order ON book.ISBN = books_order.ISBN GROUP BY book.ISBN;
SELECT book.ISBN, SUM(books_order.amount) as total_ordered FROM book JOIN books_order ON book.ISBN = books_order.ISBN GROUP BY book.title;
SELECT isbn, SUM(amount) FROM books_order GROUP BY isbn;
SELECT isbn, SUM(amount) FROM books_order GROUP BY isbn;
SELECT title FROM book JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT title FROM book JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.title ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT Book.Title, Book.PurchasePrice FROM book JOIN books_order ON book.ISBN = books_order.ISBN GROUP BY book.ISBN ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT title, purchaseprice FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder GROUP BY book.title, book.purchaseprice ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT title FROM book WHERE isbn IN (SELECT isbn FROM books_order);
SELECT DISTINCT title FROM book JOIN books_order ON book.isbn = books_order.isbn;
SELECT name FROM client WHERE idclient IN (SELECT DISTINCT idclient FROM orders);
SELECT DISTINCT client.name FROM client JOIN orders ON client.idclient = orders.idclient;
SELECT name, COUNT(idorder) as order_count FROM client LEFT JOIN orders ON client.idclient = orders.idclient GROUP BY client.idclient;
SELECT Client.Name, COUNT(Orders.IdOrder) FROM client JOIN orders ON client.IdClient = orders.IdClient GROUP BY orders.IdClient;
SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(idorder) DESC LIMIT 1);
SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient GROUP BY client.idclient ORDER BY COUNT(orders.idorder) DESC LIMIT 1;
SELECT Client.name, SUM(Books_Order.amount) AS total_books_ordered FROM Client JOIN Orders ON Client.idclient = Orders.idclient JOIN Books_Order ON Orders.idorder = Books_Order.idorder GROUP BY Client.name;
SELECT client.name, SUM(books_order.amount) FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.name;
SELECT Client.Name FROM client JOIN orders ON client.IdClient = orders.IdClient JOIN books_order ON orders.IdOrder = books_order.IdOrder GROUP BY client.IdClient ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.idclient ORDER BY SUM(books_order.amount) DESC LIMIT 1;
SELECT title FROM book WHERE ISBN NOT IN (SELECT ISBN FROM books_order);
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order);
SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders);
SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders);
SELECT MIN(SalePrice) AS min_sale_price, MAX(SalePrice) AS max_sale_price FROM book;
SELECT MAX(SalePrice) AS MaximumSalePrice, MIN(SalePrice) AS MinimumSalePrice FROM Book;
SELECT AVG(purchaseprice), AVG(saleprice) FROM book;
SELECT AVG(purchaseprice), AVG(saleprice) FROM book;
SELECT MAX(saleprice - purchaseprice) AS max_price_diff FROM book;
SELECT MAX(saleprice - purchaseprice) as LargestDifference FROM book;
SELECT Title FROM book WHERE SalePrice > (SELECT AVG(SalePrice) FROM book);
SELECT title FROM book WHERE saleprice > (SELECT AVG(saleprice) FROM book);
SELECT title FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book);
SELECT title FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book);
SELECT title FROM book WHERE purchaseprice = (SELECT MAX(purchaseprice) FROM book);
SELECT title FROM book WHERE purchaseprice = (SELECT MAX(purchaseprice) FROM book);
SELECT AVG(saleprice) FROM book WHERE author = (SELECT idauthor FROM author WHERE name = 'George Orwell');
SELECT ROUND(SUM(b.saleprice) / COUNT(DISTINCT b.isbn), 2) FROM author a JOIN author_book ab ON a.idauthor = ab.author JOIN book b ON ab.isbn = b.isbn WHERE a.name = 'George Orwell';
SELECT b.saleprice FROM author a JOIN author_book ab ON a.idauthor = ab.author JOIN book b ON ab.isbn = b.isbn WHERE a.name = 'Plato';
SELECT saleprice FROM book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato');
SELECT title FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell' AND saleprice = (SELECT MIN(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author = idauthor));
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'George Orwell' AND b.saleprice = (SELECT MIN(saleprice) FROM book WHERE isbn = b.isbn);
SELECT title FROM book WHERE author = (SELECT idauthor FROM author WHERE name = 'Plato') AND saleprice < (SELECT AVG(saleprice) FROM book);
SELECT title FROM book WHERE author = (SELECT idauthor FROM author WHERE name = 'Plato') AND saleprice < (SELECT AVG(saleprice) FROM book);
SELECT author.name FROM author_book JOIN author ON author_book.author = author.idauthor JOIN book ON author_book.isbn = book.isbn WHERE book.title = 'Pride and Prejudice';
SELECT author.name FROM author JOIN author_book ON author.idauthor = author_book.author JOIN book ON author_book.isbn = book.isbn WHERE book.title = 'Pride and Prejudice';
SELECT book.title FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name LIKE '%Plato%';
SELECT b.title FROM author a JOIN author_book ab ON a.idauthor = ab.author JOIN book b ON ab.isbn = b.isbn WHERE a.name LIKE '%Plato%';
SELECT count(idorder) FROM books_order WHERE isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice');
SELECT count(Books_Order.IdOrder) FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice') INTERSECT SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'The Little Prince');
SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice') INTERSECT SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'The Little Prince');
SELECT isbn FROM books_order WHERE idorder IN (SELECT idorder FROM orders WHERE idclient = (SELECT idclient FROM client WHERE name = 'Peter Doe')) INTERSECT SELECT isbn FROM books_order WHERE idorder IN (SELECT idorder FROM orders WHERE idclient = (SELECT idclient FROM client WHERE name = 'James Smith'));
SELECT bo.isbn FROM books_order bo JOIN orders o ON bo.idorder = o.idorder JOIN client c ON o.idclient = c.idclient WHERE c.name = 'Peter Doe' INTERSECT SELECT bo.isbn FROM books_order bo JOIN orders o ON bo.idorder = o.idorder JOIN client c ON o.idclient = c.idclient WHERE c.name = 'James Smith';
SELECT title FROM book WHERE isbn IN (SELECT isbn FROM books_order JOIN orders ON books_order.idorder = orders.idorder JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') AND isbn NOT IN (SELECT isbn FROM books_order JOIN orders ON books_order.idorder = orders.idorder JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith');
SELECT title FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe' EXCEPT SELECT title FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith';
SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice';
SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice';
SELECT Count(distinct book_id) as total_books FROM book;
SELECT title FROM book ORDER BY title ASC;
SELECT title FROM book ORDER BY Pages DESC;
SELECT type, release FROM book;
SELECT MIN(chapters), MAX(chapters), book_id FROM book GROUP BY book_id;
SELECT title FROM book WHERE type != 'Poet';
SELECT AVG(rating) FROM review;
SELECT book.title, review.rating FROM book JOIN review ON book.book_id = review.book_id;
SELECT MAX(rating) FROM review WHERE book_id = (SELECT book_id FROM book ORDER BY chapters DESC LIMIT 1);
SELECT rank FROM review WHERE book_id = ( SELECT book_id FROM book WHERE pages = (SELECT MIN(pages) FROM book) );
SELECT title FROM book WHERE book_id = (SELECT book_id FROM review ORDER BY rank ASC LIMIT 1);
SELECT AVG(review.readers_in_million) FROM book JOIN review ON book.book_id = review.book_id WHERE book.type = 'Novel';
SELECT type, COUNT(book_id) FROM book GROUP BY type;
SELECT type FROM book GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type FROM book GROUP BY type HAVING COUNT(book_id) >= 3;
SELECT book.title FROM book JOIN review ON book.book_id = review.book_id ORDER BY review.rating ASC;
SELECT book.title, book.audio FROM book JOIN review ON book.book_id = review.book_id ORDER BY review.readers_in_million DESC;
SELECT COUNT(Book_ID) FROM book WHERE book_id NOT IN (SELECT book_id FROM review);
SELECT book.Type FROM book WHERE book.Chapters > 75 INTERSECT SELECT book.Type FROM book WHERE book.Chapters < 50;
SELECT COUNT(DISTINCT type) FROM book;
SELECT type, title FROM book WHERE book_id NOT IN (SELECT book_id FROM review WHERE rating IS NOT NULL) OR book_id IN (SELECT book_id FROM review WHERE rating IS NULL);
SELECT COUNT(DISTINCT customer_id) AS customers FROM customer;
SELECT COUNT(DISTINCT customer_id) FROM customer;
SELECT name FROM customer ORDER BY level_of_membership ASC;
SELECT name FROM customer ORDER BY level_of_membership ASC;
SELECT nationality, card_credit FROM customer;
SELECT nationality, card_credit FROM customer;
SELECT name FROM customer WHERE nationality = 'England' OR nationality = 'Australia';
SELECT name FROM customer WHERE nationality IN ('England', 'Australia');
SELECT AVG(customer.Card_Credit) FROM customer WHERE level_of_membership > 1;
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;
SELECT MAX(card_credit) FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer);
SELECT card_credit FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer);
SELECT nationality, COUNT(customer_id) FROM customer GROUP BY nationality;
SELECT nationality, COUNT(customer_id) FROM customer GROUP BY nationality;
SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT Nationality FROM customer WHERE EXISTS (SELECT 1 FROM customer AS c1 WHERE c1.Nationality = customer.Nationality AND c1.card_credit < 50) AND EXISTS (SELECT 1 FROM customer AS c2 WHERE c2.Nationality = customer.Nationality AND c2.card_credit > 75);
SELECT nationality FROM customer WHERE card_credit > 50 INTERSECT SELECT nationality FROM customer WHERE card_credit < 75;
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID;
SELECT customer.Name, customer_order.Dish_Name FROM customer_order INNER JOIN customer ON customer_order.customer_id = customer.customer_id;
SELECT customer.name, customer_order.dish_name FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id ORDER BY customer_order.quantity DESC;
SELECT customer.name, customer_order.dish_name FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id ORDER BY customer_order.quantity DESC;
SELECT customer.Name, SUM(customer_order.Quantity) FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name;
SELECT customer.Name, SUM(customer_order.Quantity) FROM customer_order JOIN customer ON customer_order.Customer_ID = customer.Customer_ID GROUP BY customer.Name;
SELECT name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id HAVING SUM(quantity) > 1;
SELECT customer.Name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id HAVING SUM(customer_order.Quantity) > 1;
SELECT DISTINCT manager FROM branch;
SELECT DISTINCT manager FROM branch;
SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order);
SELECT name FROM customer WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_order);
SELECT COUNT(*) FROM member;
SELECT Name FROM member ORDER BY Age ASC;
SELECT name, nationality FROM member;
SELECT name FROM member WHERE nationality != 'England';
SELECT name FROM member WHERE age = 19 OR age = 20;
SELECT name FROM member ORDER BY age DESC LIMIT 1;
SELECT nationality, COUNT(*) AS member_count FROM member GROUP BY nationality;
SELECT nationality FROM member GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2;
SELECT member.name, club.club_name FROM member JOIN club_leader ON member.member_id = club_leader.member_id JOIN club ON club_leader.club_id = club.club_id;
SELECT club_leader.club_id, member.name FROM club_leader JOIN member ON club_leader.member_id = member.member_id JOIN club ON club_leader.club_id = club.club_id WHERE club.overall_ranking > 100;
SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < '2018';
SELECT team_leader FROM club WHERE club_name = 'Houston';
SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM club_leader);
SELECT nationality FROM member WHERE age > 22 AND nationality IN ( SELECT nationality FROM member WHERE age < 19 GROUP BY nationality );
SELECT AVG(Age) FROM member WHERE member_id IN (SELECT member_id FROM club_leader)
SELECT club_name FROM club WHERE club_name LIKE '%state%';
SELECT collection_subset_name FROM collection_subsets;
SELECT collection_subset_name FROM collection_subsets;
SELECT collecrtion_subset_details FROM collection_subsets WHERE collection_subset_name = 'Top collection';
SELECT collections.collection_name, collections.collection_description FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collection_subsets.collection_subset_name = 'Top collection';
SELECT document_subset_name FROM document_subsets;
SELECT document_subset_name FROM document_subsets;
SELECT document_subset_details FROM document_subsets WHERE document_subset_name = 'Best for 2000';
SELECT document_subsets.document_subset_details FROM document_subsets WHERE document_subsets.document_subset_name = 'Best for 2000';
SELECT document_object_id FROM document_objects;
SELECT document_object_id FROM document_objects;
SELECT document_objects.parent_document_object_id FROM document_objects WHERE document_objects.owner = 'Marlin';
SELECT document_object_id FROM document_objects WHERE owner = 'Marlin';
SELECT owner FROM document_objects WHERE description = 'Braeden Collection';
SELECT document_objects.owner FROM document_objects JOIN documents_in_collections ON document_objects.document_object_id = documents_in_collections.document_object_id JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collections.collection_name = 'Braeden Collection';
SELECT Document_objects2.owner FROM document_objects AS document_objects1 JOIN document_objects AS document_objects2 ON document_objects1.parent_document_object_id = document_objects2.document_object_id WHERE document_objects1.owner = 'Marlin';
SELECT owner FROM document_objects WHERE document_object_id IN ( SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin' );
SELECT DISTINCT description FROM document_objects WHERE parent_document_object_id IS NOT NULL;
SELECT DISTINCT do.description FROM document_objects do WHERE do.parent_document_object_id IS NOT NULL;
SELECT COUNT(document_object_id) FROM document_objects WHERE owner = 'Marlin';
SELECT COUNT(document_object_id) FROM document_objects WHERE owner = 'Marlin';
SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL);
SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects);
SELECT parent_document_object_id AS parent_document_id, COUNT(document_object_id) AS child_document_count FROM document_objects GROUP BY parent_document_object_id;
SELECT parent_document_object_id, COUNT(document_object_id) FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id;
SELECT collection_name FROM collections;
SELECT collection_name FROM collections;
SELECT collection_description FROM collections WHERE collection_name = 'Best';
SELECT collection_description FROM collections WHERE collection_name = 'Best';
SELECT collection_name FROM collections WHERE collection_id = (SELECT parent_collection_id FROM collections WHERE collection_name = 'Nice');
SELECT collection_name FROM collections WHERE collection_id = (SELECT parent_collection_id FROM collections WHERE collection_name = 'Nice');
SELECT collections.collection_name FROM collections WHERE collection_id NOT IN (SELECT DISTINCT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL);
SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL);
SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id HAVING COUNT(*) > 1;
SELECT document_object_id FROM document_objects GROUP BY document_object_id HAVING COUNT(parent_document_object_id) > 1;
SELECT count(*) FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT COUNT(*) FROM collections WHERE parent_collection_id = ( SELECT collection_id FROM collections WHERE collection_name = 'Best' );
SELECT document_objects.document_object_id FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.related_document_object_id WHERE document_objects.owner = 'Ransom';
SELECT document_subset_members.related_document_object_id FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id WHERE document_objects.owner = 'Ransom';
SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(DISTINCT collection_subset_members.collection_id) AS num_collections FROM collection_subsets JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id GROUP BY collection_subsets.collection_subset_id, collection_subsets.collection_subset_name;
SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(collection_subset_members.collection_id) FROM collection_subsets LEFT JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id GROUP BY collection_subsets.collection_subset_id;
SELECT document_object_id, COUNT(parent_document_object_id) as num_of_child FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY document_object_id ORDER BY num_of_child DESC LIMIT 1;
SELECT document_objects.document_object_id, COUNT(document_objects.parent_document_object_id) AS child_count FROM document_objects GROUP BY document_objects.document_object_id;
SELECT document_object_id, COUNT(related_document_object_id) AS num_related_documents FROM document_subset_members GROUP BY document_object_id ORDER BY num_related_documents LIMIT 1;
SELECT document_object_id FROM documents_in_collections GROUP BY document_object_id ORDER BY COUNT(collection_id) LIMIT 1;
SELECT document_object_id, COUNT(related_document_object_id) as number_of_related_documents FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) BETWEEN 2 AND 4;
SELECT document_object_id, COUNT(related_document_object_id) FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) BETWEEN 2 AND 4;
SELECT document_objects.owner FROM document_objects WHERE document_objects.document_object_id IN (SELECT document_subset_members.related_document_object_id FROM document_subset_members JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE document_objects.owner = 'Braeden');
SELECT DISTINCT owner FROM document_objects WHERE document_object_id IN ( SELECT related_document_object_id FROM document_subset_members WHERE document_object_id IN ( SELECT document_object_id FROM document_objects WHERE owner = 'Braeden' ) );
SELECT document_subsets.document_subset_name FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.related_document_object_id JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_objects.owner = 'Braeden';
SELECT document_subsets.document_subset_name FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_objects.owner = 'Braeden';
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) AS number_of_different_documents FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name;
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) AS number_of_different_documents FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name;
SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) AS num_documents FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id JOIN document_objects do ON dsm.document_object_id = do.document_object_id GROUP BY ds.document_subset_id, ds.document_subset_name ORDER BY num_documents DESC LIMIT 1;
SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) AS num_documents FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name ORDER BY num_documents DESC LIMIT 1;
SELECT document_objects.document_object_id FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_subsets.document_subset_name = 'Best for 2000';
SELECT document_objects.document_object_id FROM document_subset_members JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE document_subsets.document_subset_name = 'Best for 2000';
SELECT document_subsets.document_subset_name, document_objects.document_object_id FROM document_subsets JOIN document_subset_members ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN document_objects ON document_subset_members.related_document_object_id = document_objects.document_object_id
SELECT document_subsets.document_subset_name, document_objects.document_object_id FROM document_subset_members JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN document_objects ON document_subset_members.related_document_object_id = document_objects.document_object_id;
SELECT collections.collection_name FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE document_objects.owner = 'Ransom';
SELECT collection_name FROM collections JOIN documents_in_collections ON documents_in_collections.collection_id = collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE document_objects.owner = 'Ransom';
SELECT document_object_id, COUNT(collection_id) as num_collections FROM documents_in_collections GROUP BY document_object_id;
SELECT document_object_id, COUNT(collection_id) as num_collections FROM documents_in_collections GROUP BY document_object_id;
SELECT COUNT(DISTINCT document_object_id) FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id WHERE collection_name = 'Best';
SELECT COUNT(DISTINCT DOC.document_object_id) FROM collections COLL JOIN documents_in_collections DC ON COLL.collection_id = DC.collection_id JOIN document_objects DOC ON DC.document_object_id = DOC.document_object_id WHERE COLL.collection_name = 'Best';
SELECT document_object_id FROM documents_in_collections JOIN collections ON collections.collection_id = documents_in_collections.collection_id WHERE collections.collection_name = 'Best';
SELECT Count(document_object_id) FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT collections.collection_name, collections.collection_id, COUNT(documents_in_collections.document_object_id) FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id GROUP BY collections.collection_id ORDER BY COUNT(documents_in_collections.document_object_id) DESC LIMIT 1;
SELECT C.collection_name, C.collection_id, COUNT(DIC.document_object_id) as num_documents FROM collections C JOIN documents_in_collections DIC ON C.collection_id = DIC.collection_id WHERE C.collection_name = 'Best' GROUP BY C.collection_id ORDER BY num_documents DESC LIMIT 1;
SELECT documents_in_collections.document_object_id FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id JOIN documents_in_collections ON document_subset_members.related_document_object_id = documents_in_collections.document_object_id JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE document_subsets.document_subset_name = 'Best for 2000' AND collections.collection_name = 'Best';
SELECT document_subset_members.document_object_id FROM document_subset_members JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id JOIN documents_in_collections ON document_subset_members.document_object_id = documents_in_collections.document_object_id JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE document_subsets.document_subset_name = 'Best for 2000' AND collections.collection_name = 'Best';
SELECT document_objects.document_object_id FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE collections.collection_name = 'Best' AND document_objects.document_object_id NOT IN (SELECT document_object_id FROM document_subset_members WHERE related_document_object_id = document_objects.document_object_id AND document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') );
SELECT document_objects.document_object_id FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id LEFT JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id LEFT JOIN document_subset_members AS dsm ON document_objects.document_object_id = dsm.related_document_object_id JOIN collections AS c ON c.collection_name = 'Best' LEFT JOIN document_objects AS d2 ON dsm.document_object_id = d2.document_object_id WHERE c.collection_name = 'Best' AND dsm.related_document_object_id IS NULL;
SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT c.collection_name FROM collections c JOIN collection_subset_members s ON c.collection_id = s.related_collection_id WHERE s.collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT collections.collection_name FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id WHERE collection_subset_members.collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best');
SELECT COUNT(DISTINCT CS.related_collection_id) FROM collections C JOIN collection_subset_members CS ON C.collection_id = CS.collection_id WHERE C.collection_name = 'Best';
SELECT COUNT(DISTINCT Collection_Subset_Members.Related_Collection_ID) FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.collection_id WHERE collections.collection_name = 'Best';
SELECT Collection_Subsets.Collection_Subset_Name FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collections.collection_name = 'Best';
SELECT collection_subsets.collection_subset_name FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collections.collection_name = 'Best';
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%';
SELECT name FROM songs ORDER BY name ASC;
SELECT name, language FROM songs;
SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score;
SELECT performance_score.voice_sound_quality, performance_score.rhythm_tempo, performance_score.stage_presence FROM performance_score JOIN participants ON participants.id = performance_score.participant_id WHERE participants.name = 'Freeway';
SELECT id, language, original_artist FROM songs WHERE name != 'Love';
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love';
SELECT DISTINCT stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE language LIKE '%English%';
SELECT id, name FROM participants WHERE id IN ( SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(DISTINCT songs_id) >= 2 );
SELECT id, name, popularity FROM participants ORDER BY (SELECT COUNT(participant_id) FROM performance_score WHERE participant_id = id) DESC;
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 UNION SELECT participant_id FROM performance_score WHERE rhythm_tempo = 5);
SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language LIKE '%English%';
SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY performance_score.songs_id ORDER BY COUNT(participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT COUNT(*) FROM songs WHERE songs.id NOT IN ( SELECT songs_id FROM performance_score );
SELECT AVG(rhythm_tempo), songs.language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.language;
SELECT DISTINCT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language LIKE '%English%';
SELECT participants.name, participants.popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'Croatian') INTERSECT SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'));
SELECT songs.name FROM songs WHERE songs.name LIKE '%Is%';
SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;
SELECT COUNT(*) FROM city;
SELECT COUNT(city_code) FROM city;
SELECT DISTINCT state FROM city;
SELECT DISTINCT state FROM city;
SELECT COUNT(DISTINCT country) FROM city;
SELECT Count(distinct country) from City;
SELECT city_name, city_code, state, country FROM city;
SELECT city_name, city_code, state, country FROM city
SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore';
SELECT city_name FROM city WHERE state = 'PA';
SELECT city_name FROM city WHERE state = 'PA';
SELECT COUNT(city_name) FROM city WHERE country = 'CANADA';
SELECT COUNT(city_name) FROM city WHERE country = 'CANADA';
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude;
SELECT state, COUNT(city_code) as number_of_cities FROM city GROUP BY state;
SELECT COUNT(city_name) as city_count, state FROM city GROUP BY state;
SELECT country, COUNT(city_code) as num_cities FROM city GROUP BY country;
SELECT country, COUNT(city_code) as num_cities FROM city GROUP BY country;
SELECT state FROM city GROUP BY state HAVING COUNT(city_code) >= 2;
SELECT state FROM city GROUP BY state HAVING COUNT(city_code) >= 2;
SELECT state FROM city GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1;
SELECT state FROM city GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1;
SELECT country FROM city GROUP BY country ORDER BY COUNT(*) LIMIT 1;
SELECT country FROM city GROUP BY country ORDER BY COUNT(city_name) ASC LIMIT 1;
SELECT fname, lname FROM student JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD';
SELECT fname || ' ' || lname FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD';
SELECT COUNT(stuid) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country = 'CHINA');
SELECT COUNT(*) FROM student JOIN city ON student.city_code = city.city_code WHERE country = 'CHINA';
SELECT fname, major FROM student JOIN city ON student.city_code = city.city_code WHERE city.city_name = 'Baltimore';
SELECT fname, major FROM student WHERE city_code = (SELECT city_code FROM city WHERE city_name = 'Baltimore');
SELECT COUNT(stuid), country FROM student JOIN city ON student.city_code = city.city_code GROUP BY country;
SELECT city.country, COUNT(student.stuid) as num_students FROM city JOIN student ON student.city_code = city.city_code GROUP BY city.country;
SELECT COUNT(Student.StuID), City.city_name FROM student JOIN city ON Student.city_code = City.city_code GROUP BY Student.city_code;
SELECT city.city_name, COUNT(*) as student_count FROM student JOIN city ON student.city_code = city.city_code GROUP BY student.city_code;
SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state ORDER BY COUNT(Student.StuID) DESC LIMIT 1;
SELECT country FROM city INNER JOIN student ON student.city_code = city.city_code GROUP BY country ORDER BY COUNT(student.stuid) LIMIT 1;
SELECT country FROM city JOIN student ON city.city_code = student.city_code GROUP BY country ORDER BY COUNT(student.stuid) ASC LIMIT 1;
SELECT city_name FROM city WHERE city_code IN ( SELECT city_code FROM student GROUP BY city_code HAVING COUNT(stuid) >= 3 );
SELECT City.city_name FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_code HAVING COUNT(Student.stuid) >= 3;
SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.stuid) > 5;
SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.state HAVING COUNT(student.stuid) > 5;
SELECT stuid FROM student WHERE city_code IN ( SELECT city_code FROM city WHERE country != 'USA' );
SELECT stuid FROM student WHERE city_code IN ( 	SELECT city_code 	FROM city 	WHERE country != 'USA' );
SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE sex = 'F' AND city.state = 'PA';
SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE sex = 'F' AND state = 'PA';
SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE sex = 'M' AND country != 'USA';
SELECT stuid FROM student WHERE sex = 'M' AND city_code IN (SELECT city_code FROM city WHERE country != 'USA');
SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';
SELECT direct_distance.distance FROM direct_distance JOIN city ON direct_distance.city2_code = city.city_code WHERE city.city_name = 'Newark' AND direct_distance.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston');
SELECT distance FROM direct_distance JOIN city AS city1 ON direct_distance.city1_code = city1.city_code JOIN city AS city2 ON direct_distance.city2_code = city2.city_code WHERE city1.city_name = 'Boston' AND city2.city_name = 'Newark';
SELECT AVG(distance) AS average_distance, MIN(distance) AS minimum_distance, MAX(distance) AS maximum_distance FROM direct_distance;
SELECT AVG(distance), MIN(distance), MAX(distance) FROM direct_distance;
SELECT city1_code, city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance);
SELECT city1_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance);
SELECT direct_distance.city1_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance) UNION SELECT direct_distance.city2_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance);
SELECT city1_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance);
SELECT city1_code, city2_code FROM direct_distance WHERE distance < 1000;
SELECT city.city_code FROM direct_distance JOIN city ON direct_distance.city2_code = city.city_code WHERE direct_distance.distance < 1000;
SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT AVG(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code <> city1_code;
SELECT AVG(distance) FROM direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS';
SELECT city.city_name FROM city JOIN direct_distance ON city.city_code = direct_distance.city2_code WHERE direct_distance.distance = ( SELECT MIN(distance) FROM direct_distance JOIN city ON direct_distance.city2_code = city.city_code WHERE city.city_name = 'Chicago' );
SELECT city.city_name FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code WHERE city.city_name != 'Chicago' ORDER BY direct_distance.distance LIMIT 1;
SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1);
SELECT city.city_name FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code OR city.city_code = direct_distance.city2_code WHERE city.city_name != 'Boston' ORDER BY direct_distance.distance DESC LIMIT 1;
SELECT city_code, SUM(distance) as total_distance FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_code;
SELECT city.city_code, SUM(direct_distance.distance) FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code OR city.city_code = direct_distance.city2_code GROUP BY city.city_code;
SELECT city_name, AVG(distance) FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city.city_name;
SELECT city.city_name, AVG(direct_distance.distance) FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city.city_name;
SELECT direct_distance.distance FROM student JOIN direct_distance ON student.city_code = direct_distance.city1_code JOIN city ON direct_distance.city2_code = city.city_code WHERE student.fname = 'Linda' AND student.lname = 'Smith' INTERSECT SELECT direct_distance.distance FROM student JOIN direct_distance ON student.city_code = direct_distance.city1_code JOIN city ON direct_distance.city2_code = city.city_code WHERE student.fname = 'Tracy' AND student.lname = 'Kim';
SELECT distance FROM direct_distance JOIN student ON direct_distance.city1_code = student.city_code JOIN city ON student.city_code = city.city_code WHERE (student.fname = 'Linda' AND student.lname = 'Smith') INTERSECT SELECT distance FROM direct_distance JOIN student ON direct_distance.city2_code = student.city_code JOIN city ON student.city_code = city.city_code WHERE (student.fname = 'Tracy' AND student.lname = 'Kim');
SELECT fname, lname FROM student WHERE city_code = (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') ORDER BY distance DESC LIMIT 1);
SELECT fname || ' ' || lname as full_name FROM student WHERE city_code = ( SELECT city2_code FROM direct_distance WHERE city1_code = ( SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith' ) ORDER BY distance DESC LIMIT 1 );
SELECT state FROM city WHERE city_code = ( SELECT city_code FROM student WHERE fname = 'Linda' );
SELECT state FROM city WHERE city_code = ( SELECT city_code FROM student WHERE fname = 'Linda' );
SELECT * FROM Sailors WHERE age > 30;
SELECT name, rating, age FROM sailors WHERE age > 30;
SELECT name, age FROM sailors WHERE age < 30;
SELECT name, age FROM sailors WHERE age < 30;
SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid = 1;
SELECT bid FROM reserves WHERE sid = 1;
SELECT name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE bid = 102;
SELECT name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 102;
SELECT DISTINCT bid FROM reserves;
SELECT boats.bid FROM boats JOIN reserves ON boats.bid = reserves.bid;
SELECT name FROM sailors WHERE name LIKE '%e%';
SELECT name FROM sailors WHERE name LIKE '%e%';
SELECT sid FROM sailors WHERE age > (SELECT MAX(age) FROM sailors);
SELECT sid FROM sailors WHERE age != (SELECT MIN(age) FROM sailors);
SELECT name FROM sailors WHERE age > ALL (SELECT age FROM sailors WHERE rating > 7);
SELECT DISTINCT S1.name FROM sailors S1, sailors S2 WHERE S1.age > S2.age AND S2.rating > 7;
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves);
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves);
SELECT sid, name FROM sailors WHERE sid IN (SELECT sid FROM reserves GROUP BY sid HAVING COUNT(bid) > 1);
SELECT name FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY name HAVING COUNT(DISTINCT reserves.bid) >= 2;
SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE boats.color IN ('red', 'blue');
SELECT sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color IN ('red', 'blue'));
SELECT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' OR boats.color = 'blue';
SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Reserves.sid = Sailors.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue';
SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red') INTERSECT SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'blue');
SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red') INTERSECT SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'blue');
SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red') AND sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'blue');
SELECT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' INTERSECT SELECT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'blue';
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sailors.name, sailors.sid FROM sailors WHERE sailors.sid NOT IN (SELECT reserves.sid FROM reserves);
SELECT sid, name FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves);
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103;
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103;
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis');
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis');
SELECT name FROM sailors WHERE rating > ALL (SELECT rating FROM sailors WHERE name = 'Luis');
SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis');
SELECT name, sid FROM sailors WHERE rating > 2 AND sid IN (SELECT sid FROM reserves);
SELECT name, sid FROM sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM reserves);
SELECT name, age FROM sailors WHERE age = (SELECT MAX(age) FROM sailors);
SELECT name, age FROM sailors ORDER BY age DESC LIMIT 1;
SELECT COUNT(sID) FROM sailors;
SELECT COUNT(DISTINCT sid) FROM sailors;
SELECT AVG(age) FROM sailors WHERE rating = 7;
SELECT AVG(age) FROM sailors WHERE rating = 7;
SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%';
SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%';
SELECT AVG(rating), MAX(age) FROM sailors;
SELECT AVG(rating), MAX(age) FROM sailors;
SELECT boats.bid, boats.name, COUNT(*) AS num_reservations FROM reserves JOIN boats ON reserves.bid = boats.bid GROUP BY reserves.bid;
SELECT boats.bid, COUNT(reserves.bid) FROM boats JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid;
SELECT COUNT(*), boats.bid FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid > 50 GROUP BY boats.bid;
SELECT count(day), bid FROM reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(bid) FROM reserves GROUP BY bid HAVING COUNT(bid) > 1;
SELECT bid, COUNT(*) as num_reservations FROM reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT COUNT(*), reserves.bid FROM reserves JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.sid > 1 GROUP BY reserves.bid;
SELECT COUNT(reserves.bid), reserves.bid FROM reserves JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.sid > 1 GROUP BY reserves.bid;
SELECT rating, AVG(age) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY rating;
SELECT sailors.rating, AVG(sailors.age) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY sailors.rating;
SELECT name, rating, age FROM sailors ORDER BY rating, age;
SELECT name, rating, age FROM sailors ORDER BY rating, age;
SELECT COUNT(bid) FROM boats;
SELECT COUNT(DISTINCT bid) FROM boats;
SELECT COUNT(*) FROM boats WHERE color = 'red';
SELECT COUNT(*) FROM boats WHERE color = 'red';
SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON sailors.sid = reserves.sid WHERE sailors.age BETWEEN 20 AND 30;
SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON sailors.sid = reserves.sid WHERE sailors.age BETWEEN 20 AND 30;
SELECT name FROM sailors WHERE rating > ( SELECT MAX(rating) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' );
SELECT Sailors.name FROM Sailors WHERE Sailors.rating > ALL (SELECT Sailors.rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red');
SELECT MAX(rating) FROM sailors;
SELECT MAX(rating) FROM sailors;
SELECT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.name = 'Melon';
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.name = 'Melon';
SELECT name, age FROM sailors ORDER BY rating DESC;
SELECT name, age FROM sailors ORDER BY rating DESC;
SELECT model FROM headphone WHERE price = (SELECT MAX(price) FROM headphone);
SELECT model FROM headphone WHERE price = (SELECT MAX(price) FROM headphone);
SELECT model FROM headphone ORDER BY model ASC;
SELECT DISTINCT model FROM headphone ORDER BY model ASC;
SELECT class FROM headphone GROUP BY class ORDER BY COUNT(class) DESC LIMIT 1;
SELECT class FROM headphone GROUP BY class ORDER BY COUNT(headphone_id) DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2;
SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) <= 2;
SELECT COUNT(*), class FROM headphone WHERE price > 200 GROUP BY class;
SELECT class, COUNT(*) FROM headphone WHERE price > 200 GROUP BY class;
SELECT COUNT(DISTINCT earpads) FROM headphone;
SELECT COUNT(DISTINCT earpads) AS num_earpads FROM headphone;
SELECT earpads FROM headphone GROUP BY earpads ORDER BY COUNT(earpads) DESC LIMIT 2;
SELECT earpads FROM headphone GROUP BY earpads ORDER BY COUNT(headphone_id) DESC LIMIT 2;
SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone);
SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone);
SELECT AVG(price), construction FROM headphone GROUP BY construction;
SELECT construction, AVG(price) as average_price FROM headphone GROUP BY construction;
SELECT class FROM headphone WHERE earpads LIKE '%Bowls%' INTERSECT SELECT class FROM headphone WHERE earpads LIKE '%Comfort Pads%';
SELECT class FROM headphone WHERE earpads = 'Bowls' INTERSECT SELECT class FROM headphone WHERE earpads = 'Comfort Pads';
SELECT earpads FROM headphone WHERE construction NOT LIKE '%Plastic%';
SELECT earpads FROM headphone WHERE construction NOT LIKE '%Plastic%';
SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone);
SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone);
SELECT name FROM store ORDER BY date(date_opened);
SELECT store.Name FROM store ORDER BY store.Date_Opened;
SELECT name, parking FROM store WHERE neighborhood = 'Tarzana';
SELECT name, parking FROM store WHERE neighborhood = 'Tarzana';
SELECT COUNT(DISTINCT neighborhood) FROM store;
SELECT COUNT(DISTINCT store.neighborhood) FROM store;
SELECT neighborhood, COUNT(store_id) as num_of_stores FROM store GROUP BY neighborhood;
SELECT neighborhood, COUNT(store_id) AS store_count FROM store GROUP BY neighborhood;
SELECT store.name, SUM(stock.quantity) as total_stock FROM store JOIN stock ON store.store_id = stock.store_id GROUP BY store.name ORDER BY total_stock DESC LIMIT 1;
SELECT store.name, SUM(stock.quantity) as total_quantity FROM store JOIN stock ON store.store_id = stock.store_id WHERE stock.quantity > 0 GROUP BY store.name;
SELECT name FROM store WHERE store.store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0)
SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0);
SELECT headphone.model FROM headphone WHERE headphone.headphone_id NOT IN (SELECT stock.headphone_id FROM stock WHERE stock.quantity > 0) OR headphone.headphone_id NOT IN (SELECT stock.headphone_id FROM stock);
SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT DISTINCT headphone_id FROM stock);
SELECT headphone.model FROM stock JOIN headphone ON stock.headphone_id = headphone.headphone_id GROUP BY headphone.model ORDER BY SUM(stock.quantity) DESC LIMIT 1;
SELECT headphone.Model FROM headphone JOIN stock ON headphone.headphone_id = stock.headphone_id GROUP BY headphone.Model ORDER BY SUM(stock.Quantity) DESC LIMIT 1;
SELECT count(stock.headphone_id) FROM stock JOIN store ON stock.store_id = store.store_id JOIN headphone ON stock.headphone_id = headphone.headphone_id WHERE store.name = 'Woodman';
SELECT SUM(quantity) FROM stock JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman';
SELECT neighborhood FROM store WHERE neighborhood NOT IN (SELECT neighborhood FROM store WHERE store_id IN (SELECT store_id FROM stock));
SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0);
SELECT COUNT(author_id) FROM author
SELECT COUNT(DISTINCT author.author_id) AS number_of_authors FROM author;
SELECT COUNT(DISTINCT paper_id) FROM paper;
SELECT COUNT(*) FROM paper;
SELECT COUNT(affiliation_id) FROM affiliation;
SELECT COUNT(affiliation_id) FROM affiliation;
SELECT COUNT(paper.paper_id) FROM paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(paper_id) FROM paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 AND affiliation.name LIKE '%Columbia University%';
SELECT COUNT(paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 AND affiliation.name LIKE '%Columbia University%';
SELECT name, address FROM affiliation;
SELECT name, address FROM affiliation;
SELECT venue, year FROM paper ORDER BY year ASC;
SELECT DISTINCT venue FROM Paper ORDER BY year;
SELECT title, author_list.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Harvard University';
SELECT title, author_list.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id WHERE affiliation.name = 'Harvard University';
SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON author_list.paper_id = paper.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name LIKE '%Mckeown%';
SELECT title, author_list.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown';
SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name LIKE '%Stanford University%' INTERSECT SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name LIKE '%Columbia University%';
SELECT paper_id, title FROM paper WHERE paper_id IN ( SELECT al1.paper_id FROM author_list al1 JOIN affiliation af1 ON al1.affiliation_id = af1.affiliation_id WHERE af1.name LIKE '%Stanford%' ) AND paper_id IN ( SELECT al2.paper_id FROM author_list al2 JOIN affiliation af2 ON al2.affiliation_id = af2.affiliation_id WHERE af2.name LIKE '%Columbia University%' );
SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'McKeown, Kathleen' INTERSECT SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow, Owen';
SELECT title, paper_id FROM paper WHERE paper_id IN ( SELECT al1.paper_id FROM author_list AS al1 JOIN author AS a1 ON al1.author_id = a1.author_id WHERE a1.name = 'McKeown, Kathleen' ) AND paper_id IN ( SELECT al2.paper_id FROM author_list AS al2 JOIN author AS a2 ON al2.author_id = a2.author_id WHERE a2.name = 'Rambow, Owen' );
SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown' EXCEPT SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow';
SELECT title, paper_id FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list WHERE author_id IN ( SELECT author_id FROM author WHERE name LIKE '%Mckeown%' ) ) AND paper_id NOT IN ( SELECT paper_id FROM author_list WHERE author_id IN ( SELECT author_id FROM author WHERE name LIKE '%Rambow%' ) );
SELECT title, paper_id FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list WHERE author_id IN ( SELECT author_id FROM author WHERE name IN ('McKeown, Kathleen', 'Rambow, Owen') ) );
SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name IN ('McKeown, Kathleen', 'Rambow, Owen') ) );
SELECT name, COUNT(paper_id) FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id ORDER BY COUNT(paper_id) DESC;
SELECT author.name, COUNT(author_list.paper_id) as num_papers FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id ORDER BY num_papers DESC;
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id GROUP BY affiliation.affiliation_id ORDER BY COUNT(DISTINCT author_list.paper_id) ASC;
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id GROUP BY affiliation.name ORDER BY COUNT(author_list.paper_id) DESC;
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) > 50);
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) > 50);
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) = 1);
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(author_list.paper_id) = 1;
SELECT venue, year FROM paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1;
SELECT venue, year FROM paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(paper_id) LIMIT 1;
SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(paper_id) LIMIT 1;
SELECT COUNT(*) FROM citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(paper_id) FROM citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(cited_paper_id) FROM citation WHERE paper_id = 'D12-1027';
SELECT COUNT(*) FROM citation WHERE paper_id = 'D12-1027';
SELECT cited_paper_id, COUNT(cited_paper_id) as num_citations FROM citation GROUP BY cited_paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT paper_id, COUNT(cited_paper_id) FROM citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1;
SELECT paper.title FROM paper JOIN citation ON paper.paper_id = citation.paper_id GROUP BY citation.paper_id ORDER BY COUNT(citation.cited_paper_id) DESC LIMIT 1;
SELECT title FROM paper WHERE paper_id = ( SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1 );
SELECT title, COUNT(cited_paper_id) AS number_of_citations FROM paper JOIN citation ON citation.cited_paper_id = paper.paper_id GROUP BY title ORDER BY number_of_citations DESC LIMIT 10;
SELECT title, COUNT(cited_paper_id) as citation_count FROM paper JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY citation_count DESC LIMIT 10;
SELECT count(citation.cited_paper_id) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON paper.paper_id = author_list.paper_id JOIN citation ON citation.paper_id = paper.paper_id WHERE author.name = 'McKeown, Kathleen';
SELECT count(*) FROM citation WHERE cited_paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'McKeown , Kathleen'));
SELECT count(DISTINCT cited_paper_id) FROM citation WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = "McKeown, Kathleen"));
SELECT count(title) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.paper_id JOIN paper ON citation.cited_paper_id = paper.paper_id WHERE author.name = 'Mckeown , Kathleen';
SELECT name, COUNT(cited_paper_id) as num_citations FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id JOIN citation ON paper.paper_id = citation.paper_id GROUP BY author.author_id, author.name ORDER BY num_citations DESC LIMIT 1;
SELECT name, COUNT(cited_paper_id) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id JOIN citation ON citation.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY COUNT(citation.cited_paper_id) DESC LIMIT 1;
SELECT DISTINCT paper.venue, paper.year FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE author.name = 'Mckeown , Kathleen';
SELECT venue, year FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen';
SELECT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University');
SELECT DISTINCT venue, year FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University';
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.author_id ORDER BY COUNT(author_list.paper_id) DESC LIMIT 1;
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Affiliation.name FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 3;
SELECT a.name FROM affiliation a JOIN author_list al ON a.affiliation_id = al.affiliation_id JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(p.paper_id) DESC LIMIT 3;
SELECT COUNT(p.paper_id) FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009;
SELECT COUNT(DISTINCT Paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name LIKE '%Columbia University%' AND paper.year <= 2009;
SELECT COUNT(DISTINCT paper.paper_id) FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009;
SELECT COUNT(p.paper_id) FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009;
SELECT title FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1 );
SELECT title FROM paper WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1 );
SELECT COUNT(DISTINCT a2.author_id) AS num_collaborators FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN author_list al2 ON al.paper_id = al2.paper_id AND al2.author_id <> al.author_id JOIN author a2 ON a2.author_id = al2.author_id WHERE a.name = 'McKeown, Kathleen';
SELECT COUNT(DISTINCT a.name) FROM author AS a JOIN author_list AS al ON a.author_id = al.author_id WHERE al.paper_id IN (SELECT paper_id FROM author JOIN author_list ON author.author_id = author_list.author_id WHERE author.name = 'McKeown, Kathleen') AND a.name != 'McKeown, Kathleen';
SELECT author.name FROM author WHERE author.author_id IN (SELECT author_list.author_id FROM author_list JOIN author ON author_list.author_id = author.author_id JOIN author_list AS al2 ON author_list.paper_id = al2.paper_id JOIN author AS a2 ON al2.author_id = a2.author_id WHERE a2.name = 'Mckeown, Kathleen' GROUP BY author_list.author_id ORDER BY COUNT(author_list.paper_id) DESC LIMIT 1);
SELECT name FROM author WHERE author_id IN (SELECT author_list.author_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen' GROUP BY author_list.author_id ORDER BY COUNT(author_list.paper_id) DESC LIMIT 1);
SELECT paper_id FROM paper WHERE title LIKE '%translation%';
SELECT paper_id FROM paper WHERE title LIKE '%translation%';
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM citation);
SELECT paper.paper_id, paper.title FROM paper WHERE paper.paper_id NOT IN (SELECT cited_paper_id FROM citation);
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 1;
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 1;
SELECT COUNT(paper.paper_id), venue, year FROM paper GROUP BY venue, year;
SELECT COUNT(paper.paper_id) AS papers, year, venue FROM paper GROUP BY year, venue;
SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) as total_number_of_papers FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name;
SELECT affiliation.affiliation_id, affiliation.name, COUNT(DISTINCT paper.paper_id) as num_papers FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id, affiliation.name;
SELECT p.title FROM paper p JOIN citation c ON p.paper_id = c.paper_id GROUP BY p.title HAVING COUNT(c.cited_paper_id) > 50;
SELECT title FROM paper JOIN citation ON citation.paper_id = paper.paper_id GROUP BY paper.title HAVING COUNT(citation.paper_id) > 50;
SELECT COUNT(DISTINCT author.author_id) FROM author WHERE author.author_id NOT IN ( SELECT author_list.author_id FROM author_list JOIN citation ON author_list.paper_id = citation.cited_paper_id GROUP BY citation.cited_paper_id HAVING COUNT(citation.cited_paper_id) > 50 );
SELECT COUNT(DISTINCT author.author_id) FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN citation ON citation.paper_id = author_list.paper_id GROUP BY author.author_id HAVING COUNT(citation.cited_paper_id) <= 50;
SELECT author.name FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE (venue LIKE '%NAACL%' OR venue LIKE '%ACL%') AND year = 2009;
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009 AND venue LIKE '%NAACL%') INTERSECT SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009 AND venue LIKE '%ACL%') ) GROUP BY name;
SELECT name FROM author WHERE author_id NOT IN ( SELECT author_id FROM author_list WHERE paper_id IN ( SELECT paper_id FROM paper WHERE venue LIKE '%ACL%' ) );
SELECT name FROM author WHERE author_id NOT IN ( SELECT author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue NOT LIKE '%ACL%' );
SELECT COUNT(DISTINCT conference_id) FROM conference;
SELECT COUNT(conference_id) FROM conference;
SELECT DISTINCT conference_name FROM conference;
SELECT DISTINCT conference_name FROM conference;
SELECT conference.Conference_Name, conference.Year, conference.Location FROM conference;
SELECT `conference_name`, `year`, `location` FROM conference;
SELECT conference.conference_name, COUNT(conference_participation.conference_id) FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_name;
SELECT conference.conference_name, COUNT(conference_participation.conference_id) AS occurrences FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_name;
SELECT conference.year, COUNT(conference.conference_id) FROM conference GROUP BY conference.year;
SELECT year, count(conference_id) FROM conference GROUP BY year;
SELECT year FROM conference GROUP BY year ORDER BY COUNT(conference_id) ASC LIMIT 1;
SELECT year FROM conference GROUP BY year ORDER BY COUNT(conference_id) LIMIT 1;
SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) >= 2;
SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) >= 2;
SELECT institution_name, location, founded FROM institution;
SELECT institution_name, location, founded FROM institution;
SELECT count(institution_id) FROM institution WHERE founded >= 1850 AND founded <= 1900;
SELECT COUNT(*) FROM institution WHERE founded >= 1850 AND founded <= 1900;
SELECT institution_name, location FROM institution WHERE founded = (SELECT MAX(founded) FROM institution);
SELECT institution_name, location FROM institution WHERE founded = (SELECT MAX(founded) FROM institution);
SELECT institution_name, COUNT(staff.staff_id) FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE institution.founded > 1800 GROUP BY institution_name;
SELECT institution.institution_id, count(staff.staff_id) AS staff_count, staff.name FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE institution.founded > 1800 GROUP BY institution.institution_id;
SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff);
SELECT institution_name FROM institution LEFT JOIN staff on institution.institution_id = staff.institution_id WHERE staff.institution_id IS NULL;
SELECT staff.name FROM staff WHERE staff.age > (SELECT AVG(age) FROM staff);
SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff);
SELECT MAX(age), MIN(age) FROM staff WHERE nationality = 'United States';
SELECT MAX(Age), MIN(Age) FROM staff;
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id JOIN staff ON staff.staff_id = conference_participation.staff_id WHERE staff.nationality = 'Canada';
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id JOIN staff ON conference_participation.staff_id = staff.staff_id WHERE staff.nationality = 'Canada';
SELECT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation WHERE role = 'Speaker' INTERSECT SELECT staff_id FROM conference_participation WHERE role = 'Sponsor' );
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker') INTERSECT SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor');
SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference_name = 'ACL') INTERSECT SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference_name = 'Naccl');
SELECT DISTINCT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference_name = 'ACL' ) INTERSECT SELECT DISTINCT name FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference_name = 'Naccl' ); 
SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year IN (2003, 2004);
SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year IN (2003, 2004);
SELECT conference_name, year, COUNT(staff_id) AS number_of_participants FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id, conference_name, year;
SELECT conference.conference_id, conference.conference_name, conference.year, COUNT(conference_participation.staff_id) as number_of_participants FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id;
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id ORDER BY COUNT(conference_participation.staff_id) DESC LIMIT 2;
SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id ORDER BY COUNT(conference_participation.staff_id) DESC LIMIT 2;
SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference_name = 'ACL');
SELECT name, nationality FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM conference_participation WHERE conference_id IN ( SELECT conference_id FROM conference WHERE conference_name = 'ACL' ) );
SELECT institution_name, location FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM staff WHERE staff_id IN ( SELECT staff_id FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE year = 2004 ) );
SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff WHERE institution_id IN (SELECT institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004) )
SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills);
SELECT pilot_name FROM pilotskills ORDER BY age DESC LIMIT 1;
SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) FROM pilotskills) ORDER BY age ASC;
SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) FROM pilotskills) ORDER BY age ASC;
SELECT age, pilot_name, plane_name FROM pilotskills WHERE age < 30;
SELECT age, pilot_name, plane_name FROM pilotskills WHERE age < 30;
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age < 35;
SELECT pilot_name FROM pilotskills WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT hangar.location FROM hangar WHERE hangar.plane_name = 'F-14 Fighter';
SELECT location FROM hangar WHERE plane_name = 'F-14 Fighter';
SELECT COUNT(DISTINCT location) FROM hangar WHERE location IS NOT NULL;
SELECT COUNT(DISTINCT location) FROM hangar;
SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32;
SELECT COUNT(*) FROM pilotskills WHERE age > 40;
SELECT COUNT(age) FROM pilotskills WHERE age > 40;
SELECT COUNT(DISTINCT hangar.plane_name) FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE hangar.plane_name = 'B-52 Bomber' AND pilotskills.age < 35;
SELECT COUNT(*) FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE hangar.plane_name = 'B-52 Bomber' AND pilotskills.age < 35;
SELECT pilot_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub');
SELECT pilot_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub');
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1;
SELECT hangar.plane_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.plane_name ORDER BY COUNT(pilotskills.plane_name) ASC LIMIT 1;
SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(plane_name) LIMIT 1;
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Chicago');
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.location = 'Chicago';
SELECT hangar.plane_name FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE pilot_name = 'Smith' AND age = 41;
SELECT hangar.plane_name FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE pilot_name = 'Smith' AND age = 41;
SELECT COUNT(DISTINCT plane_name) FROM pilotskills;
SELECT COUNT(DISTINCT plane_name) FROM pilotskills;
SELECT COUNT(plane_name) FROM pilotskills WHERE pilot_name = 'Smith';
SELECT COUNT(plane_name) FROM pilotskills WHERE pilot_name = 'Smith';
SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE age > 40;
SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE age > 40;
SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age ASC;
SELECT pilot_name FROM pilotskills ORDER BY age DESC;
SELECT pilot_name FROM pilotskills ORDER BY age DESC;
SELECT hangar.location FROM hangar ORDER BY hangar.plane_name;
SELECT hangar.location FROM hangar ORDER BY hangar.plane_name;
SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING COUNT(DISTINCT pilot_name) = (SELECT COUNT(DISTINCT pilot_name) FROM pilotskills) ORDER BY plane_name ASC;
SELECT DISTINCT plane_name FROM hangar ORDER BY plane_name ASC;
SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > 40 OR age < 30;
SELECT count(*) from pilotskills where age > 40 or age < 30;
SELECT pilot_name, age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name, age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber';
SELECT AVG(age), MIN(age) FROM pilotskills;
SELECT AVG(age), MIN(age) FROM pilotskills;
SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin') INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Boston');
SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin' INTERSECT SELECT plane_name FROM hangar WHERE location = 'Boston');
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM pilotskills WHERE plane_name = 'F-14 Fighter';
SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter';
SELECT hangar.plane_name, AVG(pilotskills.age) as average_age FROM pilotskills INNER JOIN hangar ON pilotskills.plane_name = hangar.plane_name GROUP BY hangar.plane_name;
SELECT AVG(age), plane_name FROM pilotskills GROUP BY plane_name;
SELECT COUNT(plane_name), plane_name FROM hangar GROUP BY plane_name;
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name;
SELECT pilot_name FROM pilotskills WHERE (plane_name, age) IN ( SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name ) ORDER BY plane_name;
SELECT hangar.plane_name, pilot_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MAX(age) FROM pilotskills AS p WHERE p.plane_name = pilotskills.plane_name) ORDER BY hangar.plane_name;
SELECT pilot_name FROM pilotskills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name);
SELECT hangar.plane_name, pilot_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = hangar.plane_name);
SELECT MAX(age), pilot_name FROM pilotskills GROUP BY pilot_name;
SELECT pilot_name, MAX(age) FROM pilotskills GROUP BY pilot_name;
SELECT hangar.location, COUNT(DISTINCT pilotskills.pilot_name) AS number_of_pilots, AVG(pilotskills.age) AS average_age FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.location;
SELECT location, COUNT(pilot_name) AS number_of_pilots, AVG(age) AS average_age FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY location;
SELECT COUNT(pilot_name) FROM pilotskills WHERE plane_name IN ( SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35 );
SELECT hangar.plane_name, COUNT(pilotskills.pilot_name) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name GROUP BY hangar.plane_name HAVING AVG(pilotskills.age) < 35;
SELECT hangar.location FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MIN(age) FROM pilotskills);
SELECT hangar.location FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = ( SELECT MIN(age) FROM pilotskills );
SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin');
SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin');
SELECT pilot_name FROM pilotskills WHERE age > (SELECT age FROM pilotskills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name;
SELECT pilot_name FROM pilotskills WHERE age > ALL (SELECT age FROM pilotskills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
SELECT COUNT(*) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter'); 
SELECT count(*) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter');
SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%';
SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%';
SELECT COUNT(*) FROM pilotskills WHERE age > ANY (SELECT age FROM pilotskills WHERE plane_name = 'Piper Cub');
SELECT COUNT(pilot_name) FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub');
SELECT district.name FROM district WHERE area_km = (SELECT MAX(area_km) FROM district);
SELECT area_km, government_website FROM district WHERE population = (SELECT MIN(population) FROM district);
SELECT name, population FROM district WHERE area_km > (SELECT AVG(area_km) FROM district);
SELECT MAX(area_km) AS biggest_area, AVG(area_km) AS average_area FROM district;
SELECT sum(population) FROM district WHERE district_id IN ( SELECT district_id FROM district ORDER BY area_km DESC LIMIT 3 );
SELECT district_id, name, government_website FROM district ORDER BY population;
SELECT DISTINCT name FROM district WHERE government_website LIKE '%gov%';
SELECT district_id, name FROM district WHERE population > 4000 OR area_km > 3000;
SELECT spokesman.name, spokesman.speach_title FROM spokesman;
SELECT AVG(points), AVG(age) FROM spokesman WHERE rank_position = 1;
SELECT spokesman.name, spokesman.points FROM spokesman WHERE spokesman.age < 40;
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1;
SELECT name FROM spokesman WHERE points < (SELECT AVG(points) FROM spokesman);
SELECT district.name FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id GROUP BY district.name ORDER BY COUNT(spokesman_district.spokesman_id) DESC LIMIT 1;
SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.Start_year < '2004';
SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID;
SELECT DISTINCT district.name FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id JOIN spokesman ON spokesman.spokesman_id = spokesman_district.spokesman_id WHERE spokesman.rank_position IN (1.0, 2.0) GROUP BY district.name HAVING COUNT(DISTINCT spokesman.rank_position) = 2;
SELECT district.Name FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id GROUP BY district.Name HAVING COUNT(spokesman_district.Spokesman_ID) > 1;
SELECT COUNT(district.district_id) FROM district WHERE district.district_id NOT IN (SELECT district_id FROM spokesman_district);
SELECT name FROM spokesman WHERE spokesman_id NOT IN (SELECT spokesman_id FROM spokesman_district);
SELECT SUM(population) AS total_population, AVG(population) AS average_population FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district);
SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures);
SELECT title FROM sculptures ORDER BY year DESC LIMIT 1;
SELECT title, location FROM paintings WHERE year = (SELECT MIN(year) FROM paintings);
SELECT title, location FROM paintings WHERE year = (SELECT MIN(year) FROM paintings);
SELECT Sculptures.title FROM sculptures WHERE sculptures.location = 'Gallery 226';
SELECT title FROM sculptures WHERE location = 'Gallery 226';
SELECT title, location FROM paintings;
SELECT title, location FROM paintings;
SELECT title, location FROM sculptures;
SELECT sculptures.title, sculptures.location FROM sculptures;
SELECT medium FROM paintings WHERE paintingid = 80;
SELECT medium FROM paintings WHERE paintingid = 80;
SELECT fname, lname FROM artists WHERE birthyear > 1850;
SELECT fname || ' ' || lname AS full_name FROM artists WHERE birthyear > 1850;
SELECT title, year FROM sculptures WHERE location != 'Gallery 226';
SELECT title, year FROM sculptures WHERE location != 'Gallery 226' OR location IS NULL;
SELECT DISTINCT fname, lname FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.year < 1900;
SELECT DISTINCT fname, lname FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE year < 1900;
SELECT DISTINCT birthyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year > 1920);
SELECT DISTINCT birthyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year > 1920);
SELECT fname, lname FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1;
SELECT fname || ' ' || lname AS full_name FROM artists ORDER BY deathyear - birthyear DESC LIMIT 1;
SELECT MIN(deathYear - birthYear) AS shortest_life FROM artists;
SELECT MIN(deathyear - birthyear) AS shortest_life FROM artists;
SELECT fname, (MAX(deathyear - birthyear)) AS age FROM artists;
SELECT fname, MAX(deathyear - birthyear) as age FROM artists ORDER BY age DESC LIMIT 1;
SELECT count(*) FROM paintings WHERE location = 'Gallery 240';
SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240';
SELECT COUNT(*) FROM paintings WHERE painterid = ( SELECT artistid FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1 );
SELECT COUNT(*) FROM paintings WHERE painterid = (SELECT artistid FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1);
SELECT title, year FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Mary';
SELECT paintings.title, paintings.year FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Mary';
SELECT width_mm FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.birthyear < 1850;
SELECT width_mm FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.birthyear < 1850;
SELECT location, medium FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Pablo';
SELECT location, medium FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Pablo';
SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) INTERSECT SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures);
SELECT CONCAT(artists.fname, ' ', artists.lname) AS full_name FROM artists WHERE artistid IN (SELECT painterid FROM paintings INTERSECT SELECT sculptorid FROM sculptures);
SELECT fname, lname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' ) INTERSECT SELECT fname, lname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'lithograph' );
SELECT artists.fname, artists.lname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' ) INTERSECT SELECT fname, lname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'lithograph' );
SELECT birthyear FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE year = 1884 AND mediumOn = 'canvas' );
SELECT birthyear FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE year = 1884 );
SELECT DISTINCT fname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241';
SELECT artists.fname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241';
SELECT COUNT(*), medium FROM ( SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures ) AS AllMediums GROUP BY medium;
SELECT COUNT(paintingid) AS painting_count, medium FROM paintings GROUP BY medium UNION SELECT COUNT(sculptureid) AS sculpture_count, medium FROM sculptures GROUP BY medium;
SELECT AVG(height_mm) as avg_height, medium FROM paintings GROUP BY medium;
SELECT AVG(height_mm), medium FROM paintings GROUP BY medium;
SELECT COUNT(*), location FROM paintings WHERE year < 1900 GROUP BY location;
SELECT COUNT(DISTINCT location) FROM paintings WHERE year < 1900;
SELECT title FROM paintings WHERE year > 1910 AND medium = 'oil';
SELECT title FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE medium = 'oil' AND year > 1910;
SELECT artists.artistid FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE medium = 'oil' AND location = 'Gallery 240';
SELECT artistid FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240' );
SELECT DISTINCT title FROM paintings WHERE height_mm > ANY (SELECT height_mm FROM paintings WHERE mediumon = 'canvas');
SELECT DISTINCT title FROM paintings WHERE height_mm > ANY (SELECT height_mm FROM paintings WHERE mediumOn = 'canvas');
SELECT DISTINCT paintingid FROM paintings WHERE year<(SELECT year FROM paintings WHERE location = 'Gallery 240' LIMIT 1);
SELECT DISTINCT paintingid FROM paintings WHERE year < ANY (SELECT year FROM paintings WHERE location = 'Gallery 240');
SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings);
SELECT MIN(year) FROM paintings;
SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%');
SELECT CONCAT(fname, ' ', lname) as full_name FROM artists JOIN sculptures ON sculptures.sculptorid = artists.artistid WHERE title LIKE '%female%';
SELECT DISTINCT title FROM paintings ORDER BY title ASC;
SELECT DISTINCT title FROM paintings ORDER BY title ASC;
SELECT DISTINCT title AS names_of_paintings FROM paintings ORDER BY (height_mm + width_mm);
SELECT DISTINCT title FROM paintings ORDER BY height_mm ASC;
SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222
SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222;
SELECT MAX(artistid) FROM (SELECT artists.artistid, COUNT(paintingid) AS num_paintings FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE year<1900 GROUP BY artists.artistid ORDER BY num_paintings DESC LIMIT 1);
SELECT (SELECT painterid FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1)
SELECT fname FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid GROUP BY artists.artistid ORDER BY COUNT(sculptures.sculptureid) DESC LIMIT 1;
SELECT fname FROM artists WHERE artistid = ( SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(sculptureid) DESC LIMIT 1 );
SELECT title FROM paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT title FROM paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT location FROM paintings WHERE year < 1885 OR year > 1930;
SELECT location FROM paintings WHERE year < 1885 OR year > 1930;
SELECT paintingID FROM paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT location FROM paintings WHERE mediumOn IN ('panel', 'canvas') GROUP BY location;
SELECT DISTINCT location FROM paintings WHERE mediumOn IN ('panel', 'canvas');
SELECT location FROM paintings WHERE year < 1885 OR year > 1930;
SELECT location FROM paintings WHERE year < 1885 OR year > 1930;
SELECT AVG(height_mm), AVG(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT AVG(height_mm), AVG(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT MAX(height_mm) AS maximum_height, MAX(paintingid) AS maximum_id FROM paintings WHERE year < 1900;
SELECT MAX(height_mm) AS height, paintingid AS id FROM paintings WHERE year < 1900;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM paintings GROUP BY year;
SELECT MAX(height_mm), MAX(width_mm), year FROM paintings GROUP BY year;
SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width, artists.fname, artists.lname FROM paintings JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY artists.fname, artists.lname;
SELECT AVG(height_mm) as avg_height, AVG(width_mm) as avg_width, lname, fname FROM paintings JOIN artists ON paintings.painterid = artists.artistid GROUP BY paintings.painterid ORDER BY lname, fname;
SELECT fname, COUNT(paintingid) as number_of_works FROM artists JOIN paintings ON artists.artistid = paintings.painterid GROUP BY artists.artistid HAVING COUNT(paintingid) >= 2;
SELECT fname, COUNT(paintingID) FROM artists JOIN paintings ON artists.artistid = paintings.painterid GROUP BY fname HAVING COUNT(paintingID) >= 2;
SELECT deathyear FROM artists WHERE artistid IN ( SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(painterid) <= 3 );
SELECT artistid, MIN(deathyear) FROM artists LEFT JOIN paintings ON artistid = painterid GROUP BY artistid HAVING COUNT(paintingid) < 4;
SELECT MIN(DeathYear) FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(sculptureid) LIMIT 1);
SELECT MIN(deathyear) FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptorID) = (SELECT MIN(sculpture_count) FROM (SELECT COUNT(sculptorID) AS sculpture_count FROM sculptures GROUP BY sculptorID)));
SELECT paintingid, height_mm FROM paintings WHERE width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240');
SELECT MAX(width_mm) AS widest_painting_width_mm, height_mm, paintingid FROM paintings WHERE location = 'Gallery 240';
SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240');
SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240');
SELECT paintingID FROM paintings WHERE height_mm > ALL(SELECT height_mm FROM paintings WHERE year > 1900);
SELECT paintingID FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE year > 1900);
SELECT artists.fname, artists.lname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' GROUP BY artists.artistid ORDER BY COUNT(paintings.paintingid) DESC LIMIT 3;
SELECT artistid, fname, lname FROM artists WHERE artistid IN ( SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT paintingid, location, title FROM paintings WHERE medium = 'oil' ORDER BY year;
SELECT paintingID, location, title FROM paintings WHERE medium = 'oil' ORDER BY year;
SELECT year, location, title FROM paintings WHERE height_mm > 1000 ORDER BY title ASC;
SELECT year, location, title FROM paintings WHERE height_mm > 1000 ORDER BY title;
SELECT lname, fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings EXCEPT SELECT sculptorid FROM sculptures);
SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) AND artistid NOT IN (SELECT sculptorid FROM sculptures);
SELECT DISTINCT location FROM paintings WHERE year < 1885 AND location NOT IN (SELECT location FROM paintings WHERE mediumOn = 'canvas');
SELECT location FROM paintings WHERE year < 1885 AND mediumOn != 'canvas';
SELECT COUNT(DISTINCT road) FROM race;
SELECT COUNT(Road) FROM race;
SELECT winning_driver, winning_team FROM race ORDER BY winning_team ASC;
SELECT race.winning_driver, race.winning_team FROM race ORDER BY race.winning_team ASC;
SELECT winning_driver FROM race WHERE pole_position <> 'Junior Strous';
SELECT winning_driver FROM race WHERE pole_position != 'Junior Strous';
SELECT constructor FROM driver ORDER BY age ASC;
SELECT DISTINCT constructor FROM driver ORDER BY age ASC;
SELECT DISTINCT entrant FROM driver WHERE age >= 20;
SELECT DISTINCT entrant FROM driver WHERE age >= 20;
SELECT max(age) AS maximum_age, min(age) AS minimum_age FROM driver;
SELECT MAX(age) AS max_age, MIN(age) AS min_age FROM driver;
SELECT COUNT(DISTINCT driver.Engine) FROM driver WHERE driver.Age > 30 OR driver.Age < 20;
SELECT COUNT(DISTINCT engine) FROM driver WHERE age > 30 OR age < 20;
SELECT driver_name FROM driver ORDER BY driver_name DESC;
SELECT driver_name FROM driver ORDER BY driver_name DESC;
SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.driver_id = race.driver_id;
SELECT driver.driver_name, race.race_name FROM driver JOIN race ON driver.driver_id = race.driver_id;
SELECT driver.driver_name, COUNT(race.driver_id) as race_count FROM driver JOIN race ON race.driver_id = driver.driver_id GROUP BY driver.driver_id, driver.driver_name;
SELECT driver.driver_id, driver.driver_name, COUNT(race.driver_id) as number_of_races FROM driver LEFT JOIN race ON driver.driver_id = race.driver_id GROUP BY driver.driver_id, driver.driver_name;
SELECT driver.age FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY driver.driver_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT age FROM driver WHERE driver_id = ( SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(driver_id) DESC LIMIT 1 );
SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2);
SELECT driver_name, age FROM driver WHERE driver_id IN ( SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2 );
SELECT race_name FROM race JOIN driver ON race.driver_id = driver.driver_id WHERE driver.age >= 26;
SELECT race_name FROM race WHERE driver_id IN (SELECT driver_id FROM driver WHERE age >= 26);
SELECT driver_name FROM driver WHERE constructor != 'Bugatti';
SELECT driver_name FROM driver WHERE constructor != 'Bugatti';
SELECT constructor, COUNT(DISTINCT driver_id) FROM driver GROUP BY constructor;
SELECT constructor, COUNT(driver_id) FROM driver GROUP BY constructor;
SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1;
SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1;
SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) >= 2;
SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) >= 2;
SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race)
SELECT driver_name from driver where driver_id not in (select driver_id from race);
SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30;
SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30;
SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(winning_team) > 1;
SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(winning_team) > 1;
SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe' INTERSECT SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong');
SELECT driver.driver_name FROM driver JOIN race ON race.driver_id = driver.driver_id WHERE race.pole_position = 'James Hinchcliffe' INTERSECT SELECT driver.driver_name FROM driver JOIN race ON race.driver_id = driver.driver_id WHERE race.pole_position = 'Carl Skerlong';
SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe');
SELECT driver.driver_name FROM driver JOIN race ON race.driver_id = driver.driver_id WHERE race.pole_position <> 'James Hinchcliffe';
SELECT COUNT(*) FROM languages;
SELECT COUNT(*) FROM languages;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT AVG(justice_score) FROM countries;
SELECT AVG(justice_score) FROM countries;
SELECT MIN(countries.health_score), MAX(countries.health_score) FROM countries WHERE countries.name != 'Norway';
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name != 'Norway';
SELECT COUNT(DISTINCT language_id) as num_official_languages FROM official_languages;
SELECT COUNT(DISTINCT official_languages.language_id) FROM official_languages;
SELECT countries.name FROM countries ORDER BY countries.education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries);
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT languages.name, COUNT(official_languages.country_id) FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name;
SELECT languages.name, COUNT(official_languages.country_id) FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name;
SELECT name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY official_languages.language_id ORDER BY COUNT(official_languages.country_id) DESC LIMIT 1;
SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY count(*) DESC LIMIT 1);
SELECT languages.name FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY official_languages.language_id HAVING COUNT(official_languages.country_id) >= 2;
SELECT languages.name FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY official_languages.language_id HAVING COUNT(DISTINCT official_languages.country_id) >= 2;
SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English';
SELECT avg(overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English';
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 3;
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY official_languages.language_id ORDER BY COUNT(official_languages.country_id) DESC LIMIT 3;
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC;
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC;
SELECT name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1;
SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY official_languages.country_id ORDER BY COUNT(language_id) DESC LIMIT 1;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95 INTERSECT SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score < 90;
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id HAVING COUNT(DISTINCT CASE WHEN overall_score > 95 THEN countries.id END) > 0 AND COUNT(DISTINCT CASE WHEN overall_score < 90 THEN countries.id END) > 0);
SELECT DISTINCT country, town_city FROM addresses;
SELECT country, town_city FROM addresses;
SELECT county_state_province FROM addresses INNER JOIN properties ON addresses.address_id = properties.property_address_id;
SELECT properties.property_id, addresses.county_state_province FROM properties JOIN addresses ON properties.property_address_id = addresses.address_id;
SELECT feature_description FROM features WHERE feature_name = 'rooftop';
SELECT feature_description FROM features WHERE feature_name = 'rooftop';
SELECT Features.feature_name, Features.feature_description FROM features JOIN property_features ON features.feature_id = property_features.feature_id GROUP BY property_features.feature_id ORDER BY COUNT(property_features.feature_id) DESC LIMIT 1;
SELECT features.feature_name, features.feature_description FROM features JOIN property_features ON features.feature_id = property_features.feature_id GROUP BY features.feature_id ORDER BY COUNT(property_features.feature_id) DESC LIMIT 1;
SELECT MIN(CAST(room_count AS INTEGER)) FROM properties;
SELECT MIN(CAST(room_count AS INTEGER)) FROM properties;
SELECT COUNT(DISTINCT property_id) FROM properties WHERE parking_lots = '1' OR garage_yn = '1';
SELECT COUNT(*) FROM properties WHERE parking_lots = '1' OR garage_yn = '1';
SELECT age_category_code FROM users WHERE user_category_code IN (SELECT user_category_code FROM ref_user_categories WHERE user_category_description LIKE '%Mother%');
SELECT users.age_category_code FROM users JOIN ref_user_categories ON users.user_category_code = ref_user_categories.user_category_code WHERE ref_user_categories.user_category_description LIKE '%Mother%';
SELECT users.first_name FROM users JOIN properties ON users.user_id = properties.owner_user_id GROUP BY users.user_id ORDER BY COUNT(properties.property_id) DESC LIMIT 1;
SELECT first_name FROM users JOIN properties ON users.user_id = properties.owner_user_id GROUP BY users.user_id ORDER BY COUNT(properties.owner_user_id) DESC LIMIT 1;
SELECT AVG(room_count) FROM properties JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden';
SELECT AVG(room_count) FROM properties JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden';
SELECT addresses.town_city FROM addresses JOIN properties ON properties.property_address_id = addresses.address_id JOIN property_features ON property_features.property_id = properties.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE feature_name = 'swimming pool';
SELECT DISTINCT town_city FROM addresses JOIN properties ON properties.property_address_id = addresses.address_id JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'swimming pool';
SELECT property_id, MIN(vendor_requested_price) as lowest_price FROM properties;
SELECT property_id, MIN(vendor_requested_price) FROM Properties;
SELECT AVG(room_count) FROM properties;
SELECT AVG(room_count) FROM properties;
SELECT COUNT(DISTINCT room_size) FROM rooms;
SELECT COUNT(DISTINCT room_size) FROM rooms;
SELECT user_searches.user_id, search_string FROM user_searches WHERE user_searches.user_id IN ( SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(user_id) >= 2 );
SELECT user_id, search_seq FROM user_searches GROUP BY user_id, search_seq HAVING COUNT(search_seq) >= 2;
SELECT MAX(search_datetime) FROM user_searches;
SELECT MAX(search_datetime) FROM user_searches;
SELECT search_datetime, search_string FROM user_searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM user_searches ORDER BY search_string DESC;
SELECT zip_postcode FROM addresses JOIN properties ON properties.property_address_id = addresses.address_id LEFT JOIN users ON properties.owner_user_id = users.user_id GROUP BY zip_postcode HAVING COUNT(DISTINCT properties.property_id) > 2;
SELECT zip_postcode FROM addresses JOIN properties ON properties.property_address_id = addresses.address_id JOIN users ON properties.owner_user_id = users.user_id GROUP BY zip_postcode HAVING COUNT(properties.owner_user_id) > 2;
SELECT u.user_id, uc.user_category_code FROM users u JOIN ref_user_categories uc ON u.user_category_code = uc.user_category_code JOIN user_searches us ON u.user_id = us.user_id GROUP BY u.user_id, uc.user_category_code HAVING COUNT(us.search_seq) = 1;
SELECT user_searches.user_id, user_category_code FROM user_searches JOIN users ON user_searches.user_id = users.user_id GROUP BY user_searches.user_id HAVING COUNT(user_searches.search_seq) = 1;
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM user_searches ORDER BY search_datetime ASC LIMIT 1);
SELECT users.age_category_code FROM users JOIN user_searches ON users.user_id = user_searches.user_id WHERE search_datetime = ( SELECT MIN(search_datetime) FROM user_searches );
SELECT login_name FROM users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name;
SELECT login_name FROM users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name ASC;
SELECT COUNT(search_seq) FROM user_searches WHERE user_id IN (SELECT user_id FROM users WHERE is_buyer = '1');
SELECT COUNT(*) FROM user_searches INNER JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = '1';
SELECT date_registered FROM users WHERE login_name = 'ratione';
SELECT date_registered FROM users WHERE login_name = 'ratione';
SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1;
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1';
SELECT addresses.line_1_number_building, addresses.line_2_number_street, addresses.town_city FROM users JOIN addresses ON users.user_address_id = addresses.address_id WHERE users.user_category_code = 'Senior Citizen';
SELECT line_1_number_building, line_2_number_street, town_city FROM users JOIN addresses ON users.user_address_id = addresses.address_id WHERE user_category_code = 'Senior Citizen';
SELECT COUNT(DISTINCT properties.property_id) FROM properties JOIN property_features ON properties.property_id = property_features.property_id GROUP BY properties.property_id HAVING COUNT(property_features.feature_id) >= 2;
SELECT COUNT(property_id) FROM (SELECT property_id, COUNT(feature_id) as num_features FROM property_features GROUP BY property_id HAVING num_features >= 2) as properties_with_at_least_two_features;
SELECT properties.property_id, COUNT(property_photos.photo_seq) as num_photos FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.property_id;
SELECT property_id, COUNT(*) FROM property_photos GROUP BY property_id;
SELECT users.user_id, COUNT(property_photos.photo_seq) FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id;
SELECT properties.owner_user_id, COUNT(property_photos.property_id) FROM properties JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.owner_user_id;
SELECT SUM(price_max) FROM properties JOIN users ON properties.owner_user_id = users.user_id WHERE user_category_code = 'Single Mother' OR user_category_code = 'Student';
SELECT MAX(price_max) FROM properties WHERE owner_user_id IN (SELECT user_id FROM users WHERE user_category_code = 'Single Mother' OR user_category_code = 'Student');
SELECT user_property_history.datestamp, properties.property_name FROM user_property_history JOIN properties ON user_property_history.property_id = properties.property_id ORDER BY user_property_history.datestamp;
SELECT user_property_history.datestamp, properties.property_name FROM user_property_history JOIN properties ON properties.property_id = user_property_history.property_id ORDER BY user_property_history.datestamp;
SELECT property_type_description, property_type_code FROM ref_property_types WHERE property_type_code = ( SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1 );
SELECT property_type_code, property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1);
SELECT age_category_description FROM ref_age_categories WHERE age_category_code = 'Over 60';
SELECT age_category_description FROM ref_age_categories WHERE age_category_code = 'Over 60';
SELECT rooms.room_size, COUNT(*) FROM rooms GROUP BY rooms.room_size;
SELECT room_size, COUNT(*) FROM rooms GROUP BY room_size;
SELECT addresses.country FROM users JOIN addresses ON users.user_address_id = addresses.address_id WHERE users.first_name = 'Robbie';
SELECT country FROM addresses JOIN users ON addresses.address_id = users.user_address_id WHERE users.first_name = 'Robbie';
SELECT users.first_name, users.middle_name, users.last_name FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN addresses ON users.user_address_id = properties.property_address_id;
SELECT users.first_name || ' ' || users.middle_name || ' ' || users.last_name as full_name FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN addresses ON users.user_address_id = properties.property_address_id;
SELECT user_searches.search_string FROM user_searches WHERE user_searches.user_id NOT IN (SELECT owner_user_id FROM properties);
SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT owner_user_id FROM properties);
SELECT users.last_name, users.user_id FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN user_searches ON users.user_id = user_searches.user_id GROUP BY users.user_id HAVING COUNT(DISTINCT properties.property_id) >= 2 AND COUNT(DISTINCT user_searches.search_seq) <= 2;
SELECT last_name, user_id FROM users WHERE user_id IN ( SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(user_id) <= 2 ) AND user_id IN ( SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(owner_user_id) >= 2 );
SELECT COUNT(*) FROM cyclists_own_bikes WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC;
SELECT heat, name, nation FROM cyclist;
SELECT MAX(weight), MIN(weight) FROM bike;
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';
SELECT name, result FROM cyclist WHERE nation != 'Russia';
SELECT distinct bike.id, product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE purchase_year > 2015;
SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id, bike.product_name HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4;
SELECT cyclist.id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id, cyclist.name ORDER BY COUNT(cyclists_own_bikes.bike_id) DESC LIMIT 1;
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation = 'Russia' OR cyclist.nation = 'Great Britain';
SELECT COUNT(DISTINCT heat) FROM cyclist;
SELECT COUNT(DISTINCT cyclist.id) FROM cyclist WHERE cyclist.id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015);
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result < '4:21.558';
SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'));
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'));
SELECT product_name FROM bike WHERE material LIKE '%fiber%';
SELECT COUNT(bike_id), cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id;
SELECT flavor FROM goods WHERE price = (SELECT MAX(price) FROM goods WHERE food = 'Cake') AND food = 'Cake';
SELECT id, flavor FROM goods WHERE price = (SELECT MAX(price) FROM goods WHERE food = 'Cake');
SELECT flavor FROM goods WHERE price = (SELECT MIN(price) FROM goods WHERE food = 'Cookie') AND food = 'Cookie';
SELECT id, flavor FROM goods WHERE price = (SELECT MIN(price) FROM goods WHERE food = 'Cookie');
SELECT Id FROM goods WHERE Flavor = 'Apple';
SELECT id FROM goods WHERE flavor = 'Apple';
SELECT id FROM goods WHERE price < 3;
SELECT goods.Id FROM goods WHERE goods.Price < 3;
SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON items.receipt = receipts.receiptnumber JOIN goods ON items.item = goods.id WHERE goods.food = 'Cake' AND goods.flavor = 'Lemon';
SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON items.receipt = receipts.receiptnumber JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Lemon' AND goods.food = 'Cake';
SELECT goods.food, COUNT(DISTINCT receipts.customerid) FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY goods.food;
SELECT food, COUNT(DISTINCT customerid) as num_customers FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY food;
SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(customerid) >= 15;
SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(receiptnumber) >= 15;
SELECT customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.lastname HAVING COUNT(receipts.receiptnumber) > 10;
SELECT customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.lastname HAVING COUNT(receipts.receiptnumber) > 10;
SELECT COUNT(DISTINCT flavor) FROM goods WHERE food = 'Cake';
SELECT COUNT(DISTINCT flavor) FROM goods WHERE food = 'Cake';
SELECT DISTINCT flavor FROM goods WHERE food = 'Croissant';
SELECT flavor FROM goods WHERE food = 'Croissant';
SELECT DISTINCT item FROM items WHERE receipt IN ( SELECT receiptnumber FROM receipts WHERE customerid = 15 );
SELECT items.item FROM items JOIN receipts ON receipts.receiptnumber = items.receipt WHERE receipts.customerid = 15;
SELECT Food, AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food;
SELECT food, AVG(price) AS average_price, MIN(price) AS minimum_price, MAX(price) AS maximum_price FROM goods GROUP BY food;
SELECT receipt FROM items WHERE item = (SELECT id FROM goods WHERE food = 'Cake') INTERSECT SELECT receipt FROM items WHERE item = (SELECT id FROM goods WHERE food = 'Cookie');
SELECT receiptnumber FROM receipts WHERE receiptnumber IN ( SELECT r1.receipt FROM items r1 JOIN goods g1 ON r1.item = g1.id WHERE g1.food = 'Cake' ) AND receiptnumber IN ( SELECT r2.receipt FROM items r2 JOIN goods g2 ON r2.item = g2.id WHERE g2.food = 'Cookie' );
SELECT r.receiptnumber FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE c.lastname = 'LOGAN' AND g.food = 'Croissant';
SELECT receipts.receiptnumber FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE customers.lastname = 'LOGAN' AND goods.food = 'Croissant';
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON items.Receipt = receipts.ReceiptNumber JOIN goods ON goods.id = items.item WHERE goods.Price = (SELECT MAX(Price) FROM goods);
SELECT MAX(goods.Price) AS max_price FROM goods;
SELECT item FROM items GROUP BY item ORDER BY COUNT(receipt) ASC LIMIT 1;
SELECT item FROM items GROUP BY item ORDER BY COUNT(receipt) ASC LIMIT 1;
SELECT food, COUNT(DISTINCT id) as total_goods FROM goods GROUP BY food;
SELECT food, COUNT(id) FROM goods GROUP BY food;
SELECT food, AVG(price) FROM goods GROUP BY food;
SELECT food, AVG(price) as average_price FROM goods GROUP BY food;
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;
SELECT items.item FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Apricot' AND goods.price < 5;
SELECT flavor FROM goods WHERE food = 'Cake' AND price > 10;
SELECT flavor FROM goods WHERE food = 'Cake' AND price > 10;
SELECT DISTINCT Id, Price FROM Goods WHERE Price < (SELECT AVG(Price) FROM Goods);
SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods);
SELECT DISTINCT goods.id FROM goods WHERE goods.price < (SELECT MIN(price) FROM goods WHERE goods.food = 'Tart');
SELECT distinct id FROM goods WHERE price < (SELECT MIN(price) FROM goods WHERE food = 'Tart');
SELECT DISTINCT receipts.receiptnumber FROM items JOIN goods ON items.item = goods.id JOIN receipts ON items.receipt = receipts.receiptnumber JOIN customers ON receipts.customerid = customers.id WHERE price > 13;
SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.price > 13;
SELECT date FROM receipts WHERE customerid IN ( SELECT customerid FROM receipts WHERE receiptnumber IN ( SELECT id FROM goods WHERE price > 15 ) );
SELECT date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.price > 15;
SELECT id FROM goods WHERE id LIKE '%APP%';
SELECT id FROM goods WHERE id LIKE '%APP%';
SELECT good, price FROM goods WHERE id LIKE '%70%';
SELECT id, price FROM goods WHERE id LIKE '%70%';
SELECT LastName FROM customers ORDER BY LastName ASC;
SELECT lastname FROM customers ORDER BY lastname ASC;
SELECT items.item FROM items ORDER BY items.item ASC;
SELECT DISTINCT id FROM customers ORDER BY id;
SELECT items.receipt FROM items JOIN goods ON items.item = goods.id JOIN receipts ON receipts.receiptnumber = items.receipt JOIN customers ON receipts.customerid = customers.id WHERE (goods.flavor = 'Apple' AND goods.food = 'Pie') OR receipts.customerid = 12;
SELECT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.id WHERE goods.Flavor = 'Apple' AND goods.Food = 'Pie' OR receipts.CustomerId = 12;
SELECT receiptnumber, MAX(date) as latest_date FROM receipts WHERE date = (SELECT MAX(date) FROM receipts);
SELECT receiptnumber, MAX(date) FROM receipts;
SELECT * FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) UNION SELECT * FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.price > 10);
SELECT receiptnumber FROM receipts WHERE EXISTS ( SELECT * FROM goods WHERE goods.price > 10 ) OR date = ( SELECT MIN(date) FROM receipts );
SELECT id FROM goods WHERE (food = 'Cookie' OR food = 'Cake') AND price BETWEEN 3 AND 7;
SELECT id FROM goods WHERE (food = 'Cookie' OR food = 'Cake') AND price BETWEEN 3 AND 7;
SELECT customers.firstname, customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid WHERE receipts.date = (SELECT MIN(date) FROM receipts);
SELECT FirstName || ' ' || LastName FROM customers JOIN receipts ON customers.id = receipts.customerid WHERE Date = (SELECT MIN(Date) FROM receipts);
SELECT AVG(Price) FROM goods WHERE Flavor = 'Blackberry' OR Flavor = 'Blueberry';
SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT MIN(g.Price) FROM goods g WHERE g.Flavor = 'Cheese';
SELECT MIN(price) FROM goods WHERE flavor = 'Cheese';
SELECT MAX(price) AS highest_price, MIN(price) AS lowest_price, AVG(price) AS average_price, flavor FROM goods GROUP BY flavor ORDER BY flavor;
SELECT MAX(price) AS maximum_price, MIN(price) AS minimum_price, AVG(price) AS average_price, flavor FROM goods GROUP BY flavor ORDER BY flavor;
SELECT MIN(price) as lowest_price, MAX(price) as highest_price, food FROM goods GROUP BY food ORDER BY food ASC;
SELECT food, MIN(price) AS min_price, MAX(price) AS max_price FROM goods GROUP BY food ORDER BY food;
SELECT date FROM receipts GROUP BY date ORDER BY COUNT(receiptnumber) DESC LIMIT 3;
SELECT date FROM receipts GROUP BY date ORDER BY COUNT(receiptnumber) DESC LIMIT 3;
SELECT firstname, lastname FROM customers WHERE id = ( SELECT customerid FROM receipts GROUP BY customerid ORDER BY COUNT(receiptnumber) DESC LIMIT 1 );
SELECT MAX(count_receipts), customerid FROM (SELECT COUNT(receiptnumber) AS count_receipts, customerid FROM receipts GROUP BY customerid)
SELECT date, COUNT(DISTINCT customerid) FROM receipts GROUP BY date;
SELECT COUNT(DISTINCT customers.id) as number_of_customers, receipts.date FROM customers JOIN receipts ON receipts.customerid = customers.id GROUP BY receipts.date;
SELECT customers.FirstName, customers.LastName FROM customers JOIN receipts ON receipts.customerid = customers.id JOIN items ON items.receipt = receipts.receiptnumber JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Apple' AND goods.food = 'Tart';
SELECT customers.firstname || ' ' || customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Apple' AND goods.food = 'Tart';
SELECT id FROM goods WHERE food = 'Cookie' AND price < (SELECT MIN(price) FROM goods WHERE food = 'Croissant');
SELECT id FROM goods WHERE food = 'Cookie' AND price < (SELECT MIN(price) FROM goods WHERE food = 'Croissant');
SELECT id FROM goods WHERE food = 'Cake' AND price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart');
SELECT id FROM goods WHERE food = 'Cake' AND price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart');
SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods);
SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods);
SELECT id, flavor, food FROM goods ORDER BY price;
SELECT id, flavor, food FROM goods ORDER BY price;
SELECT id, flavor FROM goods WHERE food = 'Cake' ORDER BY flavor;
SELECT id, flavor FROM goods WHERE food = 'Cake' ORDER BY flavor ASC;
SELECT items.item FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Chocolate' GROUP BY items.item HAVING COUNT(items.item) <= 10;
SELECT item FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'Chocolate' GROUP BY item HAVING COUNT(items.item) <= 10;
SELECT flavor FROM goods WHERE food = 'Cake' EXCEPT SELECT flavor FROM goods WHERE food = 'Tart';
SELECT flavor FROM goods WHERE food = 'Cake' EXCEPT SELECT flavor FROM goods WHERE food = 'Tart';
SELECT item FROM items GROUP BY item ORDER BY COUNT(item) DESC LIMIT 3;
SELECT goods.flavor FROM items JOIN goods ON items.item = goods.id GROUP BY items.item ORDER BY COUNT(items.item) DESC LIMIT 3;
SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customerid HAVING SUM(price) > 150;
SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING SUM(goods.price) > 150;
SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customerid HAVING AVG(goods.price) > 5;
SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customerid HAVING AVG(items.ordinal * goods.price) > 5;
SELECT date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY date HAVING SUM(goods.price) > 100;
SELECT receipts.date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY receipts.date HAVING SUM(goods.price) > 100;
SELECT COUNT(DISTINCT Driver_ID) FROM driver;
SELECT COUNT(driver.driver_id) as total_number_of_drivers FROM driver;
SELECT make, COUNT(driver_id) FROM driver WHERE CAST(points AS INTEGER) > 150 GROUP BY make;
SELECT driver.make, COUNT(*) FROM driver WHERE CAST(driver.points AS INTEGER) > 150 GROUP BY driver.make;
SELECT team.make, AVG(driver.age) as average_age FROM driver JOIN team_driver ON driver.driver_id = team_driver.driver_id JOIN team ON team_driver.team_id = team.team_id GROUP BY team.make;
SELECT AVG(age) as average_age, make FROM driver GROUP BY make;
SELECT AVG(laps) FROM driver WHERE age < 20;
SELECT AVG(laps) FROM driver WHERE age < 20;
SELECT team.car_owner, team.manager, team.sponsor FROM team ORDER BY team.car_owner;
SELECT car_owner, manager, sponsor FROM team ORDER BY car_owner;
SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1;
SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1;
SELECT make FROM team WHERE car_owner = 'Buddy Arrington';
SELECT team.make FROM team WHERE team.car_owner = 'Buddy Arrington';
SELECT MAX(CAST(points AS INTEGER)), MIN(CAST(points AS INTEGER)) FROM driver;
SELECT MAX(CAST(points AS INTEGER)) AS highest_points, MIN(CAST(points AS INTEGER)) AS lowest_points FROM driver;
SELECT COUNT(*) FROM driver WHERE CAST(points AS INTEGER) < 150;
SELECT COUNT(*) FROM driver WHERE CAST(points AS INTEGER) < 150;
SELECT Driver FROM driver ORDER BY age ASC;
SELECT driver FROM driver ORDER BY age ASC;
SELECT Driver FROM driver ORDER BY Cast(points AS INTEGER) DESC;
SELECT driver FROM driver ORDER BY points DESC;
SELECT driver.driver, country.country FROM driver JOIN country ON driver.Country = country.country_id;
SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id;
SELECT MAX(points) FROM driver WHERE country IN (SELECT country_id FROM country WHERE capital = 'Dublin');
SELECT MAX(points) FROM driver WHERE country = (SELECT country_id FROM country WHERE capital = 'Dublin');
SELECT AVG(driver.Age) FROM driver JOIN country ON driver.country = country.country_id WHERE country.official_native_language = 'English';
SELECT avg(age) FROM driver WHERE country IN (SELECT country_id FROM country WHERE official_native_language LIKE '%English%');
SELECT driver.country FROM country JOIN driver ON country.country_id = driver.country WHERE driver.points > 150;
SELECT country FROM driver WHERE CAST(points AS numeric) > 150;
SELECT capital FROM country WHERE country_id = (SELECT country FROM driver WHERE points = (SELECT MAX(points) FROM driver));
SELECT country.capital FROM country JOIN driver ON driver.country = country.country_id WHERE driver.points = (SELECT MAX(points) FROM driver);
SELECT make, COUNT(driver_id) FROM driver GROUP BY make;
SELECT make, COUNT(driver_id) as driver_count FROM driver GROUP BY make;
SELECT make FROM driver GROUP BY make ORDER BY COUNT(*) DESC LIMIT 1;
SELECT make FROM driver GROUP BY make ORDER BY COUNT(*) DESC LIMIT 1;
SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3;
SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3;
SELECT team FROM team WHERE team_id NOT IN (SELECT team_id FROM team_driver);
SELECT team.team FROM team LEFT JOIN team_driver ON team.team_id = team_driver.team_id WHERE team_driver.driver_id IS NULL;
SELECT country FROM driver WHERE make = 'Dodge' INTERSECT SELECT country FROM driver WHERE make = 'Chevrolet';
SELECT country FROM driver WHERE make = 'Dodge' INTERSECT SELECT country FROM driver WHERE make = 'Chevrolet' GROUP BY country HAVING COUNT(DISTINCT make) = 2;
SELECT SUM(CAST(points AS INTEGER)) AS total_points, AVG(CAST(points AS INTEGER)) AS average_points FROM driver;
SELECT SUM(CAST(points AS INTEGER)) AS total_points, AVG(CAST(points AS INTEGER)) AS average_points FROM driver;
SELECT c.country FROM country c WHERE c.country_id NOT IN (SELECT d.country FROM driver d);
SELECT country FROM country WHERE country_id NOT IN (SELECT DISTINCT country FROM driver);
SELECT manager, sponsor FROM team WHERE team_id = ( SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1 );
SELECT manager, sponsor FROM team WHERE team_id = ( SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1 );
SELECT manager, car_owner FROM team WHERE team_id IN ( 	SELECT team_id 	FROM team_driver 	GROUP BY team_id 	HAVING COUNT(driver_id) >= 2 );
SELECT manager, car_owner FROM team WHERE team_id IN ( SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2 );
SELECT COUNT(institution_id) FROM institution;
SELECT COUNT(institution_id) FROM institution;
SELECT name FROM institution ORDER BY name ASC;
SELECT name FROM institution ORDER BY name ASC;
SELECT institution.name FROM institution ORDER BY institution.founded ASC;
SELECT name FROM institution ORDER BY founded ASC;
SELECT city, province FROM institution;
SELECT city, province FROM institution;
SELECT MAX(enrollment) AS max_enrollment, MIN(enrollment) AS min_enrollment FROM institution;
SELECT MAX(enrollment) AS maximum_enrollment, MIN(enrollment) AS minimum_enrollment FROM institution;
SELECT affiliation FROM institution WHERE city != 'Vancouver';
SELECT affiliation FROM institution WHERE city != 'Vancouver';
SELECT stadium FROM institution ORDER BY capacity DESC;
SELECT institution.stadium FROM institution ORDER BY institution.capacity DESC;
SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution);
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1;
SELECT name FROM institution UNION SELECT nickname FROM championship;
SELECT institution.name, championship.nickname FROM institution JOIN championship ON institution.institution_id = championship.institution_id;
SELECT nickname FROM championship WHERE institution_id = (SELECT institution_id FROM institution ORDER BY enrollment ASC LIMIT 1);
SELECT nickname FROM championship WHERE institution_id = ( SELECT institution_id FROM institution ORDER BY enrollment LIMIT 1 );
SELECT institution.name FROM institution JOIN championship ON institution.institution_id = championship.institution_id ORDER BY championship.number_of_championships DESC;
SELECT institution.name FROM championship JOIN institution ON championship.institution_id = institution.institution_id ORDER BY championship.number_of_championships DESC;
SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship WHERE number_of_championships >= 1);
SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship WHERE number_of_championships >= 1);
SELECT SUM(Number_of_Championships) FROM championship INNER JOIN institution ON championship.institution_id = institution.institution_id WHERE institution.affiliation = 'Public';
SELECT SUM(championship.number_of_championships) FROM championship JOIN institution ON championship.institution_id = institution.institution_id WHERE institution.affiliation = 'Public';
SELECT affiliation, COUNT(institution_id) FROM institution GROUP BY affiliation;
SELECT affiliation, COUNT(institution_id) FROM institution GROUP BY affiliation;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT founded FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1;
SELECT founded, COUNT(institution_id) as num_institutions FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1;
SELECT nickname FROM championship JOIN institution ON championship.institution_id = institution.institution_id ORDER BY institution.capacity DESC;
SELECT nickname FROM championship JOIN institution ON championship.institution_id = institution.institution_id ORDER BY institution.capacity DESC;
SELECT SUM(enrollment) FROM institution WHERE city = 'Vancouver' OR city = 'Calgary';
SELECT enrollment FROM institution WHERE city IN ('Vancouver', 'Calgary');
SELECT province FROM institution WHERE founded < 1920 GROUP BY province INTERSECT SELECT province FROM institution WHERE founded > 1950 GROUP BY province;
SELECT institution.Province FROM institution WHERE institution.founded < 1920 INTERSECT SELECT institution.Province FROM institution WHERE institution.founded > 1950 ;
SELECT COUNT(DISTINCT province) FROM institution;
SELECT COUNT(DISTINCT province) FROM institution;
SELECT * FROM warehouses;
SELECT code, location, capacity FROM warehouses;
SELECT DISTINCT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York';
SELECT DISTINCT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York');
SELECT contents FROM boxes WHERE value > 150;
SELECT contents FROM boxes WHERE value > 150;
SELECT warehouse, AVG(value) FROM boxes GROUP BY warehouse;
SELECT Boxes.warehouse, AVG(Boxes.value) as average_value FROM boxes JOIN warehouses ON Boxes.warehouse = warehouses.code GROUP BY Boxes.warehouse;
SELECT AVG(Value) as 'average value', SUM(Value) as 'total value' FROM boxes;
SELECT AVG(Value), SUM(Value) FROM boxes;
SELECT AVG(capacity) as average_capacity, SUM(capacity) as total_capacity FROM warehouses;
SELECT AVG(capacity) AS average_capacity, SUM(capacity) AS total_capacity FROM warehouses;
SELECT contents, AVG(value), MAX(value) FROM boxes GROUP BY contents;
SELECT contents, AVG(value) AS average_value, MAX(value) AS maximum_value FROM boxes GROUP BY contents;
SELECT contents FROM boxes GROUP BY contents ORDER BY SUM(value) DESC LIMIT 1;
SELECT contents FROM boxes ORDER BY value DESC LIMIT 1;
SELECT AVG(value) FROM boxes;
SELECT AVG(value) FROM boxes;
SELECT DISTINCT contents FROM boxes;
SELECT DISTINCT contents FROM boxes;
SELECT COUNT(DISTINCT contents) FROM boxes;
SELECT COUNT(DISTINCT contents) FROM boxes;
SELECT DISTINCT location FROM warehouses;
SELECT DISTINCT location FROM warehouses;
SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'));
SELECT Warehouses.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York';
SELECT SUM(Value) FROM boxes WHERE warehouse IN (SELECT code from warehouses WHERE location = 'Chicago' OR location = 'New York');
SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York');
SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York');
SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago') INTERSECT SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York');
SELECT DISTINCT contents FROM boxes WHERE contents NOT IN ( SELECT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York' );
SELECT DISTINCT contents FROM boxes WHERE contents NOT IN (SELECT DISTINCT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York');
SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Rocks' ) AND code NOT IN ( SELECT warehouse FROM boxes WHERE contents = 'Scissors' );
SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Rocks' ) EXCEPT SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Scissors' );
SELECT code FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents = 'Rocks' OR contents = 'Scissors' );
SELECT DISTINCT Warehouses.Location FROM warehouses JOIN boxes ON boxes.warehouse = warehouses.code WHERE boxes.contents = 'Rocks' OR boxes.contents = 'Scissors';
SELECT location FROM warehouses WHERE code IN ( SELECT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors') )
SELECT warehouses.location FROM warehouses WHERE warehouses.code IN (SELECT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors'));
SELECT code, contents FROM boxes ORDER BY value;
SELECT code, contents FROM boxes ORDER BY value;
SELECT code, contents	FROM boxes	WHERE value = (SELECT MIN(value) FROM boxes);
SELECT Boxes.Code, Boxes.Contents FROM boxes WHERE Value = (SELECT MIN(Value) FROM boxes);
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(value) FROM boxes);
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(value) FROM boxes);
SELECT DISTINCT contents FROM boxes ORDER BY contents;
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC;
SELECT b1.code FROM boxes b1 WHERE b1.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks');
SELECT code FROM boxes WHERE value > (SELECT max(value) FROM boxes WHERE contents = 'Rocks');
SELECT Code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors');
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors');
SELECT SUM(value) FROM boxes WHERE warehouse = (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1);
SELECT SUM(Value) FROM Boxes WHERE warehouse = (SELECT code FROM Warehouses WHERE capacity = (SELECT MAX(capacity) FROM Warehouses));
SELECT Warehouses.Code, AVG(Boxes.Value) as avg_value FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code GROUP BY boxes.warehouse HAVING avg_value > 150;
SELECT AVG(Value) as avg_value, warehouse FROM boxes GROUP BY warehouse HAVING avg_value > 150;
SELECT CONTENTS, SUM(VALUE) AS TOTAL_VALUE, COUNT(CODE) AS NUMBER_OF_BOXES FROM BOXES GROUP BY CONTENTS;
SELECT contents, SUM(value) as total_value, COUNT(code) as number_of_boxes FROM boxes GROUP BY contents;
SELECT location, SUM(capacity) as total_capacity, AVG(capacity) as average_capacity, MAX(capacity) as maximum_capacity FROM warehouses GROUP BY location;
SELECT Warehouses.Location, SUM(Warehouses.Capacity) as Total_Capacity, AVG(Warehouses.Capacity) as Average_Capacity, MAX(Warehouses.Capacity) as Maximum_Capacity FROM Warehouses GROUP BY Warehouses.Location;
SELECT SUM(capacity) FROM warehouses;
SELECT SUM(capacity) FROM warehouses;
SELECT warehouse, max(value) FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code GROUP BY warehouses.location;
SELECT warehouses.location, MAX(boxes.value) FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code GROUP BY warehouses.location;
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse;
SELECT warehouse, COUNT(*) as total_boxes FROM boxes GROUP BY warehouse;
SELECT COUNT(DISTINCT warehouses.location) FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE boxes.contents = 'Rocks';
SELECT COUNT(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks';
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT warehouses.code FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago';
SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago');
SELECT Boxes.Warehouse, COUNT(*) FROM boxes GROUP BY Boxes.Warehouse;
SELECT warehouse, COUNT(code) FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(DISTINCT contents) AS num_distinct_contents FROM boxes GROUP BY warehouse;
SELECT warehouse, COUNT(DISTINCT contents) as num_types FROM boxes GROUP BY warehouse;
SELECT code FROM warehouses WHERE (SELECT COUNT(warehouse) FROM boxes WHERE boxes.warehouse = warehouses.code) > capacity;
SELECT warehouse FROM boxes GROUP BY warehouse HAVING COUNT(*) > (SELECT capacity FROM warehouses WHERE code = boxes.warehouse);
SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location != 'Chicago');
SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location <> 'Chicago');
SELECT university_name, city, state FROM university ORDER BY university_name ASC;
SELECT university_name, city, state FROM university ORDER BY university_name ASC;
SELECT COUNT(DISTINCT university_id) FROM university WHERE state = 'Illinois' OR state = 'Ohio';
SELECT COUNT(DISTINCT university.university_id) AS total_universities FROM university WHERE state = 'Illinois' OR state = 'Ohio';
SELECT MAX(enrollment) AS maximum_enrollment, AVG(enrollment) AS average_enrollment, MIN(enrollment) AS minimum_enrollment FROM university;
SELECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM university;
SELECT team_name FROM university WHERE enrollment > (SELECT AVG(enrollment) FROM university);
SELECT university.team_name FROM university WHERE university.enrollment > ( SELECT AVG(enrollment) FROM university );
SELECT DISTINCT home_conference FROM university;
SELECT DISTINCT home_conference FROM university;
SELECT home_conference, COUNT(university_id) FROM university GROUP BY home_conference;
SELECT university.home_conference, COUNT(university.university_name) FROM university GROUP BY university.home_conference;
SELECT state FROM university GROUP BY state ORDER BY COUNT(university_id) DESC LIMIT 1;
SELECT state FROM university GROUP BY state ORDER BY COUNT(university_id) DESC LIMIT 1;
SELECT home_conference FROM university GROUP BY 1 HAVING AVG(enrollment) > 2000;
SELECT home_conference FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000;
SELECT home_conference FROM university GROUP BY home_conference ORDER BY SUM(enrollment) ASC LIMIT 1;
SELECT home_conference FROM university GROUP BY home_conference ORDER BY SUM(enrollment) ASC LIMIT 1;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT major_name, major_code FROM major ORDER BY major_code ASC;
SELECT major.major_name, major_ranking.rank FROM major JOIN major_ranking ON major.major_id = major_ranking.major_id JOIN university ON university.university_id = major_ranking.university_id WHERE university.university_name = 'Augustana College';
SELECT major_ranking.rank, major.major_name FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id JOIN university ON major_ranking.university_id = university.university_id WHERE university.university_name = 'Augustana College';
SELECT university.university_name, university.city, university.state FROM major_ranking JOIN university ON major_ranking.university_id = university.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.rank = 1 AND major.major_name = 'Accounting';
SELECT university.university_name, university.city, university.state FROM major_ranking JOIN university ON major_ranking.university_id = university.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.rank = 1 AND major.major_name = 'Accounting';
SELECT university.university_name FROM university WHERE university.university_id = ( SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(major_id) DESC LIMIT 1 );
SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id WHERE major_ranking.rank = 1 GROUP BY university.university_name ORDER BY COUNT(major_ranking.major_id) DESC LIMIT 1;
SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1);
SELECT University_Name FROM university WHERE university_id NOT IN ( SELECT university_id FROM major_ranking WHERE rank = 1 );
SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Accounting') INTERSECT SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Urban Education'));
SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND university.university_id IN (SELECT university_id FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Urban Education');
SELECT university_name, rank FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state = 'Wisconsin';
SELECT university.university_name, overall_ranking.rank FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE university.state = 'Wisconsin';
SELECT university.university_name FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id ORDER BY research_point DESC LIMIT 1;
SELECT University.University_Name FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id ORDER BY overall_ranking.research_point DESC LIMIT 1;
SELECT university.University_Name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY overall_ranking.Reputation_point ASC;
SELECT university.university_name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY overall_ranking.reputation_point ASC;
SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND major_ranking.rank <= 3;
SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND major_ranking.rank <= 3;
SELECT SUM(enrollment) FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE rank <= 5;
SELECT sum(enrollment) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking WHERE rank <= 5);
SELECT university.university_name, overall_ranking.citation_point FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.reputation_point >= 3 ORDER BY overall_ranking.reputation_point DESC;
SELECT university.university_name, overall_ranking.citation_point FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY overall_ranking.reputation_point DESC LIMIT 3;
SELECT state FROM university WHERE Enrollment < 3000 GROUP BY state HAVING COUNT(*) > 2;
SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(*) > 2;
SELECT title FROM movies WHERE rating IS NULL;
SELECT title FROM movies WHERE rating IS NULL;
SELECT title FROM movies WHERE rating = 'G';
SELECT name FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movies.rating = 'G';
SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon';
SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon';
SELECT movies.title, movietheaters.name FROM movies JOIN movietheaters ON movies.code = movietheaters.movie;
SELECT title, name FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.movie IS NOT NULL;
SELECT COUNT(code) FROM movies WHERE rating = 'G';
SELECT COUNT(*) FROM movies WHERE rating = 'G';
SELECT COUNT(DISTINCT movie) FROM movietheaters;
SELECT COUNT(DISTINCT movie) FROM movietheaters;
SELECT COUNT(DISTINCT(MovieTheaters.Movie)) FROM MovieTheaters WHERE MovieTheaters.Movie IS NOT NULL;
SELECT COUNT(DISTINCT movies.title) FROM movietheaters JOIN movies ON movietheaters.movie = movies.code;
SELECT COUNT(DISTINCT code) FROM movietheaters;
SELECT COUNT(code) FROM movietheaters;
SELECT rating FROM movies WHERE title LIKE '%Citizen%';
SELECT rating FROM movies WHERE title LIKE '%Citizen%';
SELECT name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movies.rating = 'G' OR movies.rating = 'PG';
SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating IN ('G', 'PG'));
SELECT DISTINCT movies.title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name IN ('Odeon', 'Imperial');
SELECT Title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name IN ('Odeon', 'Imperial'));
SELECT title FROM movies JOIN movietheaters AS mt1 ON movies.code = mt1.movie AND mt1.name = 'Odeon' JOIN movietheaters AS mt2 ON movies.code = mt2.movie AND mt2.name = 'Imperial';
SELECT movies.title FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movietheaters.name = 'Odeon' INTERSECT SELECT movies.title FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movietheaters.name = 'Imperial';
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon');
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon');
SELECT title FROM movies ORDER BY title ASC;
SELECT Title FROM movies ORDER BY Title ASC;
SELECT title FROM movies ORDER BY rating;
SELECT title FROM movies ORDER BY CASE WHEN rating = 'G' THEN 1 WHEN rating = 'PG' THEN 2 WHEN rating = 'PG-13' THEN 3 WHEN rating = 'NC-17' THEN 4 ELSE 5 END;
SELECT name FROM movietheaters GROUP BY name ORDER BY COUNT(movie) DESC LIMIT 1;
SELECT name FROM movietheaters GROUP BY name ORDER BY COUNT(movie) DESC LIMIT 1;
SELECT Title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie GROUP BY Title ORDER BY COUNT(movie) DESC LIMIT 1;
SELECT Title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie GROUP BY Title ORDER BY COUNT(movietheaters.movie) DESC LIMIT 1;
SELECT COUNT(*), rating FROM movies GROUP BY rating;
SELECT Rating, COUNT(Code) AS "Number of Movies" FROM movies GROUP BY Rating;
SELECT COUNT(code) FROM movies WHERE rating IS NOT NULL;
SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT name FROM movietheaters WHERE movie IS NOT NULL;
SELECT name FROM movietheaters WHERE movie IS NULL;
SELECT name FROM movietheaters WHERE movie IS NULL;
SELECT name FROM MovieTheaters WHERE movie IN (SELECT code FROM Movies WHERE rating = 'G');
SELECT name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movies.rating = 'G';
SELECT title FROM movies;
SELECT title FROM movies
SELECT DISTINCT rating FROM movies;
SELECT DISTINCT rating FROM movies;
SELECT * FROM movies WHERE rating IS NULL;
SELECT * FROM movies WHERE rating IS NULL;
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters);
SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters);
SELECT client.name FROM package JOIN client ON package.recipient = client.accountnumber WHERE weight = (SELECT MAX(weight) FROM package);
SELECT c.name FROM client c JOIN package p ON c.accountnumber = p.recipient WHERE p.weight = (SELECT MAX(weight) FROM package);
SELECT SUM(Weight) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = "Leo Wong");
SELECT SUM(weight) FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong';
SELECT position FROM employee WHERE name = "Amy Wong";
SELECT position FROM employee WHERE name = "Amy Wong";
SELECT employee.salary, employee.position FROM employee WHERE employee.name = "Turanga Leela";
SELECT salary, position FROM employee WHERE name = 'Turanga Leela';
SELECT AVG(salary) FROM employee WHERE position = 'Intern';
SELECT AVG(salary) FROM employee WHERE position = 'Intern';
SELECT level FROM has_clearance JOIN employee ON has_clearance.employee = employee.employeeid WHERE employee.position = 'Physician';
SELECT HC.level FROM employee E JOIN has_clearance HC ON E.employeeid = HC.employee WHERE E.position = 'Physician';
SELECT packagenumber FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong';
SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong');
SELECT packagenumber FROM package JOIN client ON package.recipient = client.accountnumber WHERE client.name = 'Leo Wong';
SELECT packagenumber FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = "Leo Wong");
SELECT package.packagenumber, package.shipment, package.recipient, package.sender, package.contents FROM package JOIN client ON package.recipient = client.accountnumber OR package.sender = client.accountnumber WHERE client.name = 'Leo Wong';
SELECT DISTINCT packagenumber FROM package WHERE recipient IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong') OR sender IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong');
SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Ogden Wernstrom') AND recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong');
SELECT COUNT(*) FROM package JOIN client sender ON package.sender = sender.accountnumber JOIN client recipient ON package.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong';
SELECT contents FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'John Zoidfarb';
SELECT contents FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'John Zoidfarb';
SELECT package.packagenumber, max(package.weight) FROM client JOIN package ON client.accountnumber = package.recipient WHERE client.name LIKE '%John%' GROUP BY package.packagenumber;
SELECT package.packagenumber, MAX(package.weight) FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name LIKE '%John%' GROUP BY package.packagenumber ORDER BY MAX(package.weight) DESC LIMIT 1;
SELECT package.PackageNumber, package.Weight FROM package ORDER BY package.Weight ASC LIMIT 3;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
SELECT Client.Name, COUNT(Package.Sender) FROM client JOIN package ON client.accountnumber = package.sender GROUP BY Client.Name ORDER BY COUNT(Package.Sender) DESC LIMIT 1;
SELECT c.name, count(p.packagenumber) AS number_of_packages_sent FROM client c JOIN package p ON p.sender = c.accountnumber GROUP BY c.name ORDER BY number_of_packages_sent DESC LIMIT 1;
SELECT c.name, COUNT(p.recipient) AS number_of_packages_received FROM client c JOIN package p ON c.accountnumber = p.recipient GROUP BY p.recipient ORDER BY number_of_packages_received LIMIT 1;
SELECT client.name FROM package JOIN client ON package.recipient = client.accountnumber GROUP BY package.recipient ORDER BY COUNT(package.packagenumber) ASC LIMIT 1;
SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(*) > 1);
SELECT c.name FROM client c INNER JOIN package p ON c.accountnumber = p.sender GROUP BY p.sender HAVING COUNT(*) > 1;
SELECT planet.coordinates FROM planet WHERE planet.name = 'Mars';
SELECT coordinates FROM planet WHERE name = 'Mars';
SELECT name, coordinates FROM planet ORDER BY name ASC;
SELECT name, coordinates FROM planet ORDER BY name ASC;
SELECT shipmentid FROM shipment WHERE manager = (SELECT employeeid FROM employee WHERE name = 'Phillip J. Fry');
SELECT shipmentid FROM shipment WHERE manager = (SELECT employeeid FROM employee WHERE name = 'Phillip J Fry');
SELECT shipment.date FROM shipment;
SELECT date FROM shipment;
SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela';
SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela';
SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') OR manager = (SELECT employeeid FROM employee WHERE name = 'Turanga Leela');
SELECT shipment.ShipmentID FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela';
SELECT P.name, COUNT(S.shipmentid) as total_shipments FROM planet P JOIN shipment S ON P.planetid = S.planet GROUP BY P.name;
SELECT planet.name, COUNT(shipment.shipmentid) FROM shipment JOIN planet ON shipment.planet = planet.planetid GROUP BY shipment.planet;
SELECT name FROM planet WHERE planetid = (SELECT planet FROM shipment GROUP BY planet ORDER BY COUNT(shipmentid) DESC LIMIT 1);
SELECT name FROM planet JOIN shipment ON planet.planetid = shipment.planet GROUP BY planet.name ORDER BY COUNT(shipment.shipmentid) DESC LIMIT 1;
SELECT Employee.Name AS manager_name, COUNT(Shipment.ShipmentID) AS number_of_shipments FROM employee JOIN shipment ON employee.employeeid = shipment.manager GROUP BY Shipment.manager;
SELECT Employee.Name, COUNT(Shipment.ShipmentID) FROM shipment JOIN employee ON shipment.manager = employee.employeeid GROUP BY Shipment.Manager;
SELECT SUM(weight) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'));
SELECT SUM(package.weight) FROM package JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars';
SELECT planet.name, SUM(package.weight) as total_weight FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON shipment.shipmentid = package.shipment GROUP BY planet.name;
SELECT planet.name, SUM(package.weight) as "total package weight" FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON package.shipment = shipment.shipmentid GROUP BY planet.planetid;
SELECT p.name FROM planet p JOIN shipment s ON p.planetid = s.planet JOIN package pk ON s.shipmentid = pk.shipment GROUP BY p.name HAVING SUM(pk.weight) > 30;
SELECT Planet.Name FROM planet INNER JOIN shipment ON planet.planetid = shipment.planet INNER JOIN package ON shipment.shipmentid = package.shipment GROUP BY planet.name HAVING SUM(package.weight) > 30;
SELECT package.packagenumber FROM package JOIN client ON package.sender = client.accountnumber JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE client.name = "Zapp Brannigan" AND planet.name = "Omicron Persei 8";
SELECT COUNT(*) FROM package JOIN client ON package.sender = client.accountnumber JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE client.name = 'Zapp Brannigan' AND planet.name = 'Omicron Persei 8';
SELECT package.PackageNumber FROM package JOIN shipment ON package.Shipment = shipment.ShipmentID JOIN planet ON shipment.Planet = planet.PlanetID JOIN client ON package.Sender = client.AccountNumber WHERE planet.Name = 'Omicron Persei 8' OR client.Name = 'Zapp Brannigan';
SELECT COUNT(packagenumber) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8') OR sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan'));
SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30;
SELECT packageNumber, weight FROM package WHERE weight BETWEEN 10 AND 30;
SELECT name FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'));
SELECT name FROM employee WHERE employeeid NOT IN ( SELECT employee FROM has_clearance WHERE planet = ( SELECT planetid FROM planet WHERE name = 'Mars' ) );
SELECT employee.name FROM employee JOIN has_clearance ON employee.employeeid = has_clearance.employee JOIN planet ON has_clearance.planet = planet.planetid WHERE planet.name = 'Omega III';
SELECT employee.name FROM employee JOIN has_clearance ON employee.employeeid = has_clearance.employee JOIN planet ON has_clearance.planet = planet.planetid WHERE planet.name = 'Omega III';
SELECT Name FROM planet WHERE planetid IN ( SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(employee) = 1);
SELECT Planet.name FROM planet JOIN has_clearance ON planet.planetid = has_clearance.planet GROUP BY planet.name HAVING COUNT(has_clearance.employee) = 1;
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000;
SELECT employee.name FROM employee WHERE salary BETWEEN 5000 AND 10000;
SELECT name FROM employee WHERE salary > ( SELECT AVG(salary) FROM employee) OR salary > 5000;
SELECT Employee.Name FROM employee WHERE Salary > (SELECT AVG(Salary) FROM employee) OR Salary > 5000;
SELECT COUNT(*) FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'));
SELECT COUNT(*) FROM employee WHERE employeeid NOT IN ( SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') );
SELECT COUNT(DISTINCT game_id) FROM game;
SELECT COUNT(DISTINCT game_id) FROM game;
SELECT title, developers FROM game ORDER BY units_sold_millions DESC;
SELECT title, developers FROM game ORDER BY units_sold_millions DESC;
SELECT AVG(units_sold_millions) FROM game WHERE developers NOT LIKE '%Nintendo%';
SELECT AVG(units_sold_millions) FROM game WHERE developers NOT LIKE '%Nintendo%';
SELECT platform_name, market_district FROM platform;
SELECT platform_name, market_district FROM platform;
SELECT platform_id, platform_name FROM platform WHERE download_rank = 1;
SELECT platform_name, platform_id FROM platform WHERE download_rank = 1;
SELECT MAX(rank_of_the_year) AS maximum_rank, MIN(rank_of_the_year) AS minimum_rank FROM player;
SELECT MAX(rank_of_the_year), MIN(rank_of_the_year) FROM player;
SELECT COUNT(player_id) FROM player WHERE rank_of_the_year < 3;
SELECT COUNT(*) FROM player WHERE rank_of_the_year <= 3;
SELECT player_name FROM player ORDER BY player_name ASC;
SELECT player_name FROM player ORDER BY player_name ASC;
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC;
SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC;
SELECT player.player_name, player.rank_of_the_year FROM player JOIN game_player ON player.player_id = game_player.player_id JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World';
SELECT player.player_name, player.rank_of_the_year FROM player JOIN game_player ON player.player_id = game_player.player_id JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World';
SELECT DISTINCT game.developers FROM game_player JOIN player ON game_player.player_id = player.player_id JOIN game ON game_player.game_id = game.game_id WHERE player.college = 'Auburn';
SELECT DISTINCT game.developers FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn';
SELECT AVG(game.units_sold_millions) FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = "Guard";
SELECT AVG(game.units_sold_millions) as avg_units_sold_millions FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard';
SELECT game.title, platform.platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id;
SELECT game.title, platform.platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id;
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district = 'Asia' OR p.market_district = 'USA';
SELECT title FROM game JOIN platform ON game.platform_id = platform.platform_id WHERE market_district = 'Asia' OR market_district = 'USA';
SELECT franchise, COUNT(game_id) FROM game GROUP BY franchise;
SELECT franchise, COUNT(game_id) FROM game GROUP BY franchise;
SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(game_id) DESC LIMIT 1;
SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(game_id) DESC LIMIT 1;
SELECT franchise FROM game GROUP BY franchise HAVING COUNT(game_id) >= 2;
SELECT franchise FROM game GROUP BY franchise HAVING COUNT(game_id) >= 2;
SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM game_player);
SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM game_player);
SELECT title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Oklahoma' INTERSECT SELECT title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn';
SELECT title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Oklahoma' OR player.college = 'Auburn';
SELECT DISTINCT franchise FROM game;
SELECT DISTINCT franchise FROM game;
SELECT title FROM game WHERE game_id NOT IN ( SELECT game_id FROM game_player WHERE player_id IN ( SELECT player_id FROM player WHERE position = 'Guard' ) );
SELECT title FROM game WHERE game_id NOT IN ( SELECT game_id FROM game_player JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard' );
SELECT name FROM press ORDER BY year_profits_billion DESC;
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT name FROM press WHERE year_profits_billion > 15 OR month_profits_billion > 1;
SELECT name FROM press WHERE year_profits_billion > 15 OR month_profits_billion > 1;
SELECT AVG(year_profits_billion) AS average_profit, MAX(year_profits_billion) AS maximum_profit FROM press;
SELECT press.press_id, AVG(press.year_profits_billion) AS avg_yearly_profit, MAX(press.year_profits_billion) AS max_yearly_profit FROM press GROUP BY press.press_id;
SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1;
SELECT press.name FROM press ORDER BY month_profits_billion DESC LIMIT 1;
SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR month_profits_billion = (SELECT MIN(month_profits_billion) FROM press);
SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR month_profits_billion = (SELECT MIN(month_profits_billion) FROM press);
SELECT COUNT(*) FROM author WHERE age < 30;
SELECT COUNT(*) FROM author WHERE age < 30;
SELECT AVG(age), gender FROM author GROUP BY gender;
SELECT gender, AVG(age) as average_age FROM author GROUP BY gender;
SELECT gender, COUNT(author_id) FROM author WHERE age > 30 GROUP BY gender;
SELECT COUNT(*), Gender FROM author WHERE Age > 30 GROUP BY Gender;
SELECT title FROM book ORDER BY release_date DESC;
SELECT title FROM book ORDER BY release_date DESC;
SELECT book_series, COUNT(book_id) FROM book GROUP BY book_series;
SELECT book_series, COUNT(book_id) FROM book GROUP BY book_series;
SELECT title, release_date FROM book ORDER BY CAST(sale_amount AS INTEGER) DESC LIMIT 5;
SELECT title, release_date FROM book ORDER BY sale_amount DESC LIMIT 5;
SELECT book_series FROM book GROUP BY book_series HAVING SUM(CAST(sale_amount AS INTEGER) > 1000) > 0 AND SUM(CAST(sale_amount AS INTEGER) < 500) > 0;
SELECT book_series FROM book WHERE book_id IN (SELECT book_id FROM book WHERE CAST(sale_amount AS INTEGER) > 1000) INTERSECT SELECT book_series FROM book WHERE book_id IN (SELECT book_id FROM book WHERE CAST(sale_amount AS INTEGER) < 500);
SELECT name FROM author WHERE author_id IN ( SELECT author_id FROM book WHERE book_series = 'LT' INTERSECT SELECT author_id FROM book WHERE book_series = 'MM' );
SELECT name FROM author WHERE author_id IN ( SELECT author_id FROM book WHERE book_series = 'MM' ) INTERSECT SELECT name FROM author WHERE author_id IN ( SELECT author_id FROM book WHERE book_series = 'LT' );
SELECT name, age FROM author WHERE author_id NOT IN (SELECT author_id FROM book);
SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book);
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(book_id) > 1);
SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(book_id) > 1);
SELECT title, author.name, press.name FROM book JOIN author ON book.author_id = author.author_id JOIN press ON book.press_id = press.press_id ORDER BY CAST(Sale_Amount AS NUMERIC) DESC LIMIT 3;
SELECT b.title, a.name, p.name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3;
SELECT press.name, SUM(book.sale_amount) AS total_book_sale_amount FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.name;
SELECT press.name, SUM(CAST(book.sale_amount AS INTEGER)) FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.press_id;
SELECT press.name, COUNT(book.book_id) FROM press JOIN book ON press.press_id = book.press_id WHERE CAST(book.sale_amount AS INTEGER) > 1000 GROUP BY press.name;
SELECT press.name, COUNT(*) as num_books_above_1000 FROM press JOIN book ON press.press_id = book.press_id WHERE CAST(book.sale_amount AS INTEGER) > 1000 GROUP BY press.name;
SELECT author.name FROM author JOIN book ON author.author_id = book.author_id ORDER BY book.sale_amount DESC LIMIT 1;
SELECT author.name FROM author JOIN book ON author.author_id = book.author_id WHERE sale_amount = (SELECT MAX(sale_amount) FROM book);
SELECT author.name, author.gender FROM author WHERE author.author_id = ( SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(book_id) DESC LIMIT 1 );
SELECT name, gender FROM author WHERE author_id = ( SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(book_id) DESC LIMIT 1 );
SELECT name FROM author WHERE author.author_id NOT IN (SELECT author_id FROM book WHERE press_id = (SELECT press_id FROM press WHERE name = 'Accor'));
SELECT name FROM author WHERE author_id NOT IN ( SELECT author_id FROM book WHERE press_id = ( SELECT press_id FROM press WHERE name = 'Accor' ) );
SELECT name, year_profits_billion FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.press_id HAVING COUNT(book.book_id) > 2;
SELECT name, year_profits_billion FROM press WHERE press_id IN ( SELECT press_id FROM book GROUP BY press_id HAVING COUNT(*) > 2 );
SELECT COUNT(author_name) FROM authors;
SELECT author_name FROM authors;
SELECT author_name, other_details FROM authors;
SELECT other_details FROM authors WHERE author_name = 'Addison Denesik';
SELECT COUNT(*) FROM documents;
SELECT author_name FROM documents WHERE document_id = 4;
SELECT author_name FROM documents WHERE document_name = 'Travel to Brazil';
SELECT COUNT(document_id) FROM documents WHERE author_name = 'Era Kerluke';
SELECT document_name, document_description FROM documents;
SELECT document_id, document_name FROM documents WHERE author_name = 'Bianka Cummings';
SELECT author_name, other_details FROM authors WHERE author_name IN (SELECT author_name FROM documents WHERE document_name = 'Travel to China');
SELECT Authors.author_name, COUNT(Documents.document_id) as num_documents FROM Documents LEFT JOIN Authors ON Authors.author_name = Documents.author_name GROUP BY Documents.author_name;
SELECT author_name FROM documents GROUP BY author_name ORDER BY COUNT(document_id) DESC LIMIT 1;
SELECT author_name FROM authors WHERE author_name IN ( SELECT author_name FROM documents GROUP BY author_name HAVING COUNT(document_id) >= 2 );
SELECT COUNT(process_id) FROM business_processes;
SELECT next_process_id, process_name, process_description FROM business_processes WHERE process_id = 9;
SELECT process_name FROM business_processes WHERE process_id = (SELECT next_process_id FROM business_processes WHERE process_id = 9);
SELECT COUNT(*) FROM process_outcomes;
SELECT process_outcome_code, process_outcome_description FROM process_outcomes;
SELECT process_outcome_description FROM process_outcomes WHERE process_outcome_code = 'working';
SELECT COUNT(DISTINCT process_status_code) FROM process_status;
SELECT process_status_code, process_status_description FROM process_status;
SELECT process_status_description FROM process_status WHERE process_status_code = 'ct';
SELECT COUNT(DISTINCT staff_id) FROM staff;
SELECT staff_id, staff_details FROM staff;
SELECT staff_details FROM staff WHERE staff_id = 100;
SELECT COUNT(DISTINCT staff_role_code) FROM ref_staff_roles;
SELECT staff_role_code, staff_role_description FROM ref_staff_roles;
SELECT staff_role_description FROM ref_staff_roles WHERE staff_role_code = 'HR';
SELECT COUNT(DISTINCT document_id) FROM documents_processes;
SELECT process_id FROM documents_processes;
SELECT document_id FROM documents WHERE document_id NOT IN (SELECT document_id FROM documents_processes);
SELECT business_processes.process_id FROM business_processes LEFT JOIN documents_processes ON business_processes.process_id = documents_processes.process_id WHERE documents_processes.process_id IS NULL;
SELECT process_outcomes.process_outcome_description, process_status.process_status_description FROM documents_processes JOIN process_outcomes ON documents_processes.process_outcome_code = process_outcomes.process_outcome_code JOIN process_status ON documents_processes.process_status_code = process_status.process_status_code WHERE documents_processes.document_id = 0;
SELECT process_name FROM business_processes JOIN documents_processes ON business_processes.process_id = documents_processes.process_id JOIN documents ON documents_processes.document_id = documents.document_id WHERE document_name = 'Travel to Brazil';
SELECT process_id, COUNT(document_id) FROM documents_processes GROUP BY process_id;
SELECT COUNT(DISTINCT staff_id) FROM staff_in_processes WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, COUNT(document_id) FROM staff_in_processes GROUP BY staff_id;
SELECT staff_role_code, COUNT(process_id) as number_of_document_processes FROM staff_in_processes GROUP BY staff_role_code;
SELECT COUNT(DISTINCT staff_role_code) FROM staff_in_processes WHERE staff_id = 3;
SELECT COUNT(*) FROM agencies;
SELECT Count (agency_id) FROM agencies;
SELECT agency_id, agency_details FROM agencies;
SELECT agency_id, agency_details FROM agencies;
SELECT COUNT(client_id) FROM Clients;
SELECT COUNT(DISTINCT client_id) FROM clients;
SELECT client_id, client_details FROM clients;
SELECT client_id, client_details FROM clients;
SELECT agencies.agency_id, COUNT(clients.client_id) FROM agencies LEFT JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id;
SELECT agency_id, COUNT(client_id) FROM clients GROUP BY agency_id;
SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1);
SELECT agency_id, agency_details FROM agencies WHERE agency_id = ( SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 );
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2);
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN ( SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 );
SELECT agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id WHERE client_details = 'Mac';
SELECT agency_details FROM agencies INNER JOIN clients ON agencies.agency_id = clients.agency_id WHERE clients.client_details = 'Mac';
SELECT clients.client_id, clients.client_details, clients.agency_id, agencies.agency_id, agencies.agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT client_details, agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT sic_code, COUNT(client_id) FROM clients GROUP BY sic_code;
SELECT clients.sic_code, count(clients.client_id) FROM clients GROUP BY clients.sic_code;
SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad';
SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad';
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM clients);
SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients);
SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT agency_id FROM clients);
SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT agency_id FROM clients);
SELECT COUNT(invoice_id) FROM invoices;
SELECT COUNT(invoice_id) FROM invoices;
SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id;
SELECT invoice_id, invoice_status, invoice_details FROM invoices;
SELECT client_id, COUNT(invoice_id) FROM invoices GROUP BY client_id;
SELECT client_id, COUNT(invoice_id) as num_invoices FROM invoices GROUP BY client_id;
SELECT clients.client_id, clients.client_details FROM clients JOIN invoices ON clients.client_id = invoices.client_id GROUP BY invoices.client_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT client_id, client_details FROM clients WHERE client_id IN (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1);
SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2;
SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2;
SELECT invoice_status, COUNT(*) FROM invoices GROUP BY invoice_status;
SELECT Invoices.invoice_status, COUNT(*) FROM invoices GROUP BY Invoices.invoice_status;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1;
SELECT invoices.invoice_status, invoices.invoice_details, clients.client_id, clients.client_details, agencies.agency_id, agencies.agency_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id JOIN agencies ON clients.agency_id = agencies.agency_id;
SELECT Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
SELECT meeting_type, other_details FROM meetings;
SELECT meeting_type, other_details FROM meetings;
SELECT meeting_outcome, purpose_of_meeting FROM meetings;
SELECT meeting_outcome, purpose_of_meeting FROM meetings;
SELECT payment_id, payment_details FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id WHERE invoice_status = 'Working';
SELECT payment_id, payment_details FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id WHERE invoice_status = 'Working';
SELECT `invoice_id`, `invoice_status` FROM `invoices` WHERE `invoice_id` NOT IN (SELECT `invoice_id` FROM `payments`);
SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments);
SELECT COUNT(*) FROM payments;
SELECT COUNT(payment_id) FROM payments;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT payment_id, invoice_id, payment_details FROM payments;
SELECT payments.invoice_id, invoice_status FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id;
SELECT DISTINCT invoices.invoice_id, invoice_status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id;
SELECT invoices.invoice_id, COUNT(payments.invoice_id) AS num_payments FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id;
SELECT invoice_id, COUNT(payment_id) FROM payments GROUP BY invoice_id;
SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id ORDER BY COUNT(payments.invoice_id) DESC LIMIT 1;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY COUNT(p.invoice_id) DESC LIMIT 1;
SELECT COUNT(staff_id) FROM staff;
SELECT COUNT(DISTINCT staff_id) FROM staff;
SELECT agency_id, COUNT(staff_id) FROM staff GROUP BY agency_id;
SELECT agencies.agency_id, count(staff.staff_id) FROM staff JOIN agencies ON staff.agency_id = agencies.agency_id GROUP BY agencies.agency_id;
SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1);
SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1);
SELECT meeting_outcome, COUNT(meeting_outcome) FROM meetings GROUP BY meeting_outcome;
SELECT COUNT(meeting_id), meeting_outcome FROM meetings GROUP BY meeting_outcome;
SELECT clients.client_id, COUNT(meetings.client_id) FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY meetings.client_id;
SELECT client_id, COUNT(meeting_id) as meeting_count FROM meetings GROUP BY client_id;
SELECT client_id, meeting_type, COUNT(*) FROM meetings GROUP BY client_id, meeting_type;
SELECT meeting_type, COUNT(meeting_id) FROM meetings GROUP BY meeting_type;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings m JOIN clients c ON m.client_id = c.client_id;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id;
SELECT meeting_id, COUNT(staff_id) FROM staff_in_meetings GROUP BY meeting_id;
SELECT meeting_id, COUNT(staff_id) FROM staff_in_meetings GROUP BY meeting_id;
SELECT staff_id, COUNT(meeting_id) as meeting_attendance FROM staff_in_meetings GROUP BY staff_id HAVING COUNT(meeting_id) = ( SELECT COUNT(meeting_id) as min_attendance FROM staff_in_meetings GROUP BY staff_id ORDER BY min_attendance LIMIT 1 );
SELECT staff_id FROM staff_in_meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id) ASC LIMIT 1;
SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings;
SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings;
SELECT staff.staff_id FROM staff WHERE staff.staff_id NOT IN (SELECT staff_id FROM staff_in_meetings);
SELECT COUNT(DISTINCT staff.staff_id) FROM staff WHERE staff.staff_id NOT IN (SELECT staff_id FROM staff_in_meetings);
SELECT client_id, client_details FROM clients WHERE client_id IN (SELECT client_id FROM meetings UNION SELECT client_id FROM invoices);
SELECT client_id, client_details FROM clients WHERE client_id IN ( SELECT client_id FROM meetings UNION SELECT client_id FROM invoices );
SELECT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE staff.staff_id IN (SELECT staff_id FROM staff_in_meetings) AND staff.staff_details LIKE '%s%';
SELECT staff.staff_id, staff.staff_details FROM staff INNER JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE staff.staff_details LIKE '%s%' ;
SELECT client_id, sic_code, agency_id FROM clients WHERE client_id IN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM invoices);
SELECT client_id, sic_code, agency_id FROM clients WHERE client_id IN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM invoices);
SELECT start_date_time, end_date_time, client_details, staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON staff_in_meetings.meeting_id = meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id;
SELECT meetings.start_date_time, meetings.end_date_time, clients.client_details, staff.staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id;
